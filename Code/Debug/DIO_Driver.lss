
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000643a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000643a  000064ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800184  00800184  000065f2  2**0
                  ALLOC
  3 .stab         00006954  00000000  00000000  000065f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002885  00000000  00000000  0000cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000f96d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  0000fb62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  00011d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  00013030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  00014328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  000145fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_1>
       8:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_2>
       c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_10>
      2c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 31 	call	0x6256	; 0x6256 <main>
      8a:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 31 	jmp	0x63c8	; 0x63c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 31 	jmp	0x63c8	; 0x63c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 ec 31 	jmp	0x63d8	; 0x63d8 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 08 32 	jmp	0x6410	; 0x6410 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e8 59       	subi	r30, 0x98	; 152
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     d9a:	a1 e4       	ldi	r26, 0x41	; 65
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e1 e4       	ldi	r30, 0x41	; 65
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     da8:	a1 e4       	ldi	r26, 0x41	; 65
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e1 e4       	ldi	r30, 0x41	; 65
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     db6:	a1 e4       	ldi	r26, 0x41	; 65
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e1 e4       	ldi	r30, 0x41	; 65
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     dc4:	a1 e4       	ldi	r26, 0x41	; 65
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e1 e4       	ldi	r30, 0x41	; 65
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	84 60       	ori	r24, 0x04	; 4
     dd0:	8c 93       	st	X, r24
}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <WDT_voidDisable>:

void WDT_voidDisable(void){
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     de0:	a1 e4       	ldi	r26, 0x41	; 65
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e1 e4       	ldi	r30, 0x41	; 65
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 60       	ori	r24, 0x08	; 8
     dec:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     dee:	a1 e4       	ldi	r26, 0x41	; 65
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e1 e4       	ldi	r30, 0x41	; 65
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     dfc:	e1 e4       	ldi	r30, 0x41	; 65
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1
}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <UART_Init+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     e18:	87 e6       	ldi	r24, 0x67	; 103
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     e20:	ab e2       	ldi	r26, 0x2B	; 43
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e2       	ldi	r30, 0x2B	; 43
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     e2e:	ab e2       	ldi	r26, 0x2B	; 43
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	eb e2       	ldi	r30, 0x2B	; 43
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8e 7f       	andi	r24, 0xFE	; 254
     e3a:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     e3c:	aa e2       	ldi	r26, 0x2A	; 42
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ea e2       	ldi	r30, 0x2A	; 42
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8b 7f       	andi	r24, 0xFB	; 251
     e48:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	82 60       	ori	r24, 0x02	; 2
     e4e:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	8f 7b       	andi	r24, 0xBF	; 191
     e5a:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	8f 7e       	andi	r24, 0xEF	; 239
     e60:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	8f 7d       	andi	r24, 0xDF	; 223
     e66:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     e6e:	e0 e4       	ldi	r30, 0x40	; 64
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     e76:	e9 e2       	ldi	r30, 0x29	; 41
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     e7e:	e0 e4       	ldi	r30, 0x40	; 64
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	89 2f       	mov	r24, r25
     e88:	99 27       	eor	r25, r25
     e8a:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     e8c:	aa e2       	ldi	r26, 0x2A	; 42
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e2       	ldi	r30, 0x2A	; 42
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     e9a:	aa e2       	ldi	r26, 0x2A	; 42
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ea e2       	ldi	r30, 0x2A	; 42
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 61       	ori	r24, 0x10	; 16
     ea6:	8c 93       	st	X, r24
	
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
     ec0:	eb e2       	ldi	r30, 0x2B	; 43
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	82 95       	swap	r24
     ec8:	86 95       	lsr	r24
     eca:	87 70       	andi	r24, 0x07	; 7
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	a1 f3       	breq	.-24     	; 0xec0 <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
     ed8:	ec e2       	ldi	r30, 0x2C	; 44
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	80 83       	st	Z, r24
	
}
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <UART_SendString+0x6>
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9b 83       	std	Y+3, r25	; 0x03
     ef6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	0e c0       	rjmp	.+28     	; 0xf18 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	fc 01       	movw	r30, r24
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	80 81       	ld	r24, Z
     f0e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <UART_Send1ByteData>
		i++;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	9b 81       	ldd	r25, Y+3	; 0x03
     f22:	fc 01       	movw	r30, r24
     f24:	e2 0f       	add	r30, r18
     f26:	f3 1f       	adc	r31, r19
     f28:	80 81       	ld	r24, Z
     f2a:	88 23       	and	r24, r24
     f2c:	39 f7       	brne	.-50     	; 0xefc <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <UART_DisplayNumber>:

void UART_DisplayNumber(u32 num){
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	68 97       	sbiw	r28, 0x18	; 24
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	6d 8b       	std	Y+21, r22	; 0x15
     f54:	7e 8b       	std	Y+22, r23	; 0x16
     f56:	8f 8b       	std	Y+23, r24	; 0x17
     f58:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
     f5a:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
     f5c:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	08 2f       	mov	r16, r24
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	8d 89       	ldd	r24, Y+21	; 0x15
     f66:	9e 89       	ldd	r25, Y+22	; 0x16
     f68:	af 89       	ldd	r26, Y+23	; 0x17
     f6a:	b8 8d       	ldd	r27, Y+24	; 0x18
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 ae 31 	call	0x635c	; 0x635c <__udivmodsi4>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	28 2f       	mov	r18, r24
     f82:	20 5d       	subi	r18, 0xD0	; 208
     f84:	ce 01       	movw	r24, r28
     f86:	05 96       	adiw	r24, 0x05	; 5
     f88:	fc 01       	movw	r30, r24
     f8a:	e0 0f       	add	r30, r16
     f8c:	f1 1f       	adc	r31, r17
     f8e:	20 83       	st	Z, r18
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
     f96:	8d 89       	ldd	r24, Y+21	; 0x15
     f98:	9e 89       	ldd	r25, Y+22	; 0x16
     f9a:	af 89       	ldd	r26, Y+23	; 0x17
     f9c:	b8 8d       	ldd	r27, Y+24	; 0x18
     f9e:	2a e0       	ldi	r18, 0x0A	; 10
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 ae 31 	call	0x635c	; 0x635c <__udivmodsi4>
     fae:	da 01       	movw	r26, r20
     fb0:	c9 01       	movw	r24, r18
     fb2:	8d 8b       	std	Y+21, r24	; 0x15
     fb4:	9e 8b       	std	Y+22, r25	; 0x16
     fb6:	af 8b       	std	Y+23, r26	; 0x17
     fb8:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
     fba:	8d 89       	ldd	r24, Y+21	; 0x15
     fbc:	9e 89       	ldd	r25, Y+22	; 0x16
     fbe:	af 89       	ldd	r26, Y+23	; 0x17
     fc0:	b8 8d       	ldd	r27, Y+24	; 0x18
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	a1 05       	cpc	r26, r1
     fc6:	b1 05       	cpc	r27, r1
     fc8:	51 f6       	brne	.-108    	; 0xf5e <UART_DisplayNumber+0x24>

    if (isNegative) {
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 23       	and	r24, r24
     fce:	69 f0       	breq	.+26     	; 0xfea <UART_DisplayNumber+0xb0>
        buffer[i++] = '-';
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	ce 01       	movw	r24, r28
     fd8:	05 96       	adiw	r24, 0x05	; 5
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	8d e2       	ldi	r24, 0x2D	; 45
     fe2:	80 83       	st	Z, r24
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	3d c0       	rjmp	.+122    	; 0x1068 <UART_DisplayNumber+0x12e>
        char temp = buffer[j];
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	ce 01       	movw	r24, r28
     ff6:	05 96       	adiw	r24, 0x05	; 5
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	80 81       	ld	r24, Z
    1000:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	48 2f       	mov	r20, r24
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b9 01       	movw	r22, r18
    1016:	68 1b       	sub	r22, r24
    1018:	79 0b       	sbc	r23, r25
    101a:	cb 01       	movw	r24, r22
    101c:	9c 01       	movw	r18, r24
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
    1024:	05 96       	adiw	r24, 0x05	; 5
    1026:	fc 01       	movw	r30, r24
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	20 81       	ld	r18, Z
    102e:	ce 01       	movw	r24, r28
    1030:	05 96       	adiw	r24, 0x05	; 5
    1032:	fc 01       	movw	r30, r24
    1034:	e4 0f       	add	r30, r20
    1036:	f5 1f       	adc	r31, r21
    1038:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	48 1b       	sub	r20, r24
    104a:	59 0b       	sbc	r21, r25
    104c:	ca 01       	movw	r24, r20
    104e:	9c 01       	movw	r18, r24
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	30 40       	sbci	r19, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	05 96       	adiw	r24, 0x05	; 5
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	98 2f       	mov	r25, r24
    106c:	96 95       	lsr	r25
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	89 17       	cp	r24, r25
    1072:	08 f4       	brcc	.+2      	; 0x1076 <UART_DisplayNumber+0x13c>
    1074:	bc cf       	rjmp	.-136    	; 0xfee <UART_DisplayNumber+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	ce 01       	movw	r24, r28
    107e:	05 96       	adiw	r24, 0x05	; 5
    1080:	fc 01       	movw	r30, r24
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	10 82       	st	Z, r1

    // Write the string to LCD
    UART_SendString(buffer);
    1088:	ce 01       	movw	r24, r28
    108a:	05 96       	adiw	r24, 0x05	; 5
    108c:	0e 94 74 07 	call	0xee8	; 0xee8 <UART_SendString>
}
    1090:	68 96       	adiw	r28, 0x18	; 24
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <UART_displayFloat>:

void UART_displayFloat(f32 number) {
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	28 97       	sbiw	r28, 0x08	; 8
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	6d 83       	std	Y+5, r22	; 0x05
    10bc:	7e 83       	std	Y+6, r23	; 0x06
    10be:	8f 83       	std	Y+7, r24	; 0x07
    10c0:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    10c2:	6d 81       	ldd	r22, Y+5	; 0x05
    10c4:	7e 81       	ldd	r23, Y+6	; 0x06
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	aa 27       	eor	r26, r26
    10dc:	97 fd       	sbrc	r25, 7
    10de:	a0 95       	com	r26
    10e0:	ba 2f       	mov	r27, r26
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	6d 81       	ldd	r22, Y+5	; 0x05
    10f0:	7e 81       	ldd	r23, Y+6	; 0x06
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a e7       	ldi	r20, 0x7A	; 122
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	84 36       	cpi	r24, 0x64	; 100
    1128:	91 05       	cpc	r25, r1
    112a:	54 f0       	brlt	.+20     	; 0x1140 <UART_displayFloat+0x9a>
    	integerPart /= 10;
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	2a e0       	ldi	r18, 0x0A	; 10
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	b9 01       	movw	r22, r18
    1136:	0e 94 9b 31 	call	0x6336	; 0x6336 <__divmodhi4>
    113a:	cb 01       	movw	r24, r22
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    }
    UART_DisplayNumber(integerPart);
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	aa 27       	eor	r26, r26
    1146:	97 fd       	sbrc	r25, 7
    1148:	a0 95       	com	r26
    114a:	ba 2f       	mov	r27, r26
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 9d 07 	call	0xf3a	; 0xf3a <UART_DisplayNumber>
    UART_Send1ByteData('.');
    1154:	8e e2       	ldi	r24, 0x2E	; 46
    1156:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <UART_Send1ByteData>
    UART_DisplayNumber(decimalPart);
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	aa 27       	eor	r26, r26
    1160:	97 fd       	sbrc	r25, 7
    1162:	a0 95       	com	r26
    1164:	ba 2f       	mov	r27, r26
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <UART_DisplayNumber>
}
    116e:	28 96       	adiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <UART_u8Recieve1ByteData+0x6>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    119c:	eb e2       	ldi	r30, 0x2B	; 43
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 23       	and	r24, r24
    11a4:	dc f7       	brge	.-10     	; 0x119c <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
    11a6:	ec e2       	ldi	r30, 0x2C	; 44
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	ea 81       	ldd	r30, Y+2	; 0x02
    11ae:	fb 81       	ldd	r31, Y+3	; 0x03
    11b0:	80 83       	st	Z, r24
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <UART_u8RecieveString+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <UART_u8RecieveString+0x8>
    11cc:	0f 92       	push	r0
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9c 83       	std	Y+4, r25	; 0x04
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    11dc:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	19 f1       	breq	.+70     	; 0x122c <UART_u8RecieveString+0x68>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    11e8:	eb e2       	ldi	r30, 0x2B	; 43
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 23       	and	r24, r24
    11f0:	dc f7       	brge	.-10     	; 0x11e8 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	dc 01       	movw	r26, r24
    11fe:	a2 0f       	add	r26, r18
    1200:	b3 1f       	adc	r27, r19
    1202:	ec e2       	ldi	r30, 0x2C	; 44
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8c 93       	st	X, r24
			i++;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
    1210:	99 81       	ldd	r25, Y+1	; 0x01
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	98 17       	cp	r25, r24
    1216:	40 f3       	brcs	.-48     	; 0x11e8 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	fc 01       	movw	r30, r24
    1224:	e2 0f       	add	r30, r18
    1226:	f3 1f       	adc	r31, r19
    1228:	10 82       	st	Z, r1
    122a:	01 c0       	rjmp	.+2      	; 0x122e <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    122c:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
    1256:	a3 e5       	ldi	r26, 0x53	; 83
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e3 e5       	ldi	r30, 0x53	; 83
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
    1264:	a3 e5       	ldi	r26, 0x53	; 83
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e3 e5       	ldi	r30, 0x53	; 83
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 62       	ori	r24, 0x20	; 32
    1270:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
    1272:	a3 e5       	ldi	r26, 0x53	; 83
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e3 e5       	ldi	r30, 0x53	; 83
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	80 61       	ori	r24, 0x10	; 16
    127e:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
    1280:	a3 e5       	ldi	r26, 0x53	; 83
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e3 e5       	ldi	r30, 0x53	; 83
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8e 7f       	andi	r24, 0xFE	; 254
    128c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
    128e:	a3 e5       	ldi	r26, 0x53	; 83
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e3 e5       	ldi	r30, 0x53	; 83
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
    129c:	a3 e5       	ldi	r26, 0x53	; 83
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e3 e5       	ldi	r30, 0x53	; 83
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8b 7f       	andi	r24, 0xFB	; 251
    12a8:	8c 93       	st	X, r24
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
    12b8:	af e4       	ldi	r26, 0x4F	; 79
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ef e4       	ldi	r30, 0x4F	; 79
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	82 60       	ori	r24, 0x02	; 2
    12c4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
    12c6:	af e4       	ldi	r26, 0x4F	; 79
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef e4       	ldi	r30, 0x4F	; 79
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
    12d4:	ae e4       	ldi	r26, 0x4E	; 78
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ee e4       	ldi	r30, 0x4E	; 78
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	88 60       	ori	r24, 0x08	; 8
    12e0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 61       	ori	r24, 0x10	; 16
    12ee:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
    12f0:	af e4       	ldi	r26, 0x4F	; 79
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e4       	ldi	r30, 0x4F	; 79
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
    12fe:	af e4       	ldi	r26, 0x4F	; 79
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e4       	ldi	r30, 0x4F	; 79
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8f 7b       	andi	r24, 0xBF	; 191
    130a:	8c 93       	st	X, r24

	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
    130c:	ae e4       	ldi	r26, 0x4E	; 78
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ee e4       	ldi	r30, 0x4E	; 78
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8e 7f       	andi	r24, 0xFE	; 254
    1318:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
    131a:	ae e4       	ldi	r26, 0x4E	; 78
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ee e4       	ldi	r30, 0x4E	; 78
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
    1328:	ae e4       	ldi	r26, 0x4E	; 78
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ee e4       	ldi	r30, 0x4E	; 78
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8b 7f       	andi	r24, 0xFB	; 251
    1334:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 39999;
    1336:	e6 e4       	ldi	r30, 0x46	; 70
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8f e3       	ldi	r24, 0x3F	; 63
    133c:	9c e9       	ldi	r25, 0x9C	; 156
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 3499;
    1342:	ea e4       	ldi	r30, 0x4A	; 74
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8b ea       	ldi	r24, 0xAB	; 171
    1348:	9d e0       	ldi	r25, 0x0D	; 13
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <TIMERS_u8TIMER0SetCallBack+0x6>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9b 83       	std	Y+3, r25	; 0x03
    1362:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	39 f0       	breq	.+14     	; 0x137e <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	9b 81       	ldd	r25, Y+3	; 0x03
    1374:	90 93 85 01 	sts	0x0185, r25
    1378:	80 93 84 01 	sts	0x0184, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    137e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	39 f0       	breq	.+14     	; 0x13b8 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	90 93 87 01 	sts	0x0187, r25
    13b2:	80 93 86 01 	sts	0x0186, r24
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    13d4:	ec e5       	ldi	r30, 0x5C	; 92
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	80 83       	st	Z, r24
	
}
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    13f0:	e2 e5       	ldi	r30, 0x52	; 82
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	80 83       	st	Z, r24
}
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    140e:	ea e4       	ldi	r30, 0x4A	; 74
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <TIMERS_voidTIMER1SetTimerValue+0x6>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    1432:	ec e4       	ldi	r30, 0x4C	; 76
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	80 83       	st	Z, r24
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    1450:	ec e4       	ldi	r30, 0x4C	; 76
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1488:	80 91 88 01 	lds	r24, 0x0188
    148c:	90 91 89 01 	lds	r25, 0x0189
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	90 93 89 01 	sts	0x0189, r25
    1496:	80 93 88 01 	sts	0x0188, r24
	if(Local_u16CounterOVF == 3907){
    149a:	80 91 88 01 	lds	r24, 0x0188
    149e:	90 91 89 01 	lds	r25, 0x0189
    14a2:	2f e0       	ldi	r18, 0x0F	; 15
    14a4:	83 34       	cpi	r24, 0x43	; 67
    14a6:	92 07       	cpc	r25, r18
    14a8:	99 f4       	brne	.+38     	; 0x14d0 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    14aa:	e2 e5       	ldi	r30, 0x52	; 82
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 ec       	ldi	r24, 0xC0	; 192
    14b0:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    14b2:	10 92 89 01 	sts	0x0189, r1
    14b6:	10 92 88 01 	sts	0x0188, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    14ba:	80 91 84 01 	lds	r24, 0x0184
    14be:	90 91 85 01 	lds	r25, 0x0185
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    14c6:	e0 91 84 01 	lds	r30, 0x0184
    14ca:	f0 91 85 01 	lds	r31, 0x0185
    14ce:	09 95       	icall
		}
	}
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1520:	80 91 8a 01 	lds	r24, 0x018A
    1524:	90 91 8b 01 	lds	r25, 0x018B
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	90 93 8b 01 	sts	0x018B, r25
    152e:	80 93 8a 01 	sts	0x018A, r24
	if(Local_u16CounterCTC == 10000){
    1532:	80 91 8a 01 	lds	r24, 0x018A
    1536:	90 91 8b 01 	lds	r25, 0x018B
    153a:	27 e2       	ldi	r18, 0x27	; 39
    153c:	80 31       	cpi	r24, 0x10	; 16
    153e:	92 07       	cpc	r25, r18
    1540:	79 f4       	brne	.+30     	; 0x1560 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1542:	10 92 8b 01 	sts	0x018B, r1
    1546:	10 92 8a 01 	sts	0x018A, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    154a:	80 91 86 01 	lds	r24, 0x0186
    154e:	90 91 87 01 	lds	r25, 0x0187
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	29 f0       	breq	.+10     	; 0x1560 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    1556:	e0 91 86 01 	lds	r30, 0x0186
    155a:	f0 91 87 01 	lds	r31, 0x0187
    155e:	09 95       	icall
		}
	}
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <Switch_Init+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <Switch_Init+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    159a:	1a 82       	std	Y+2, r1	; 0x02
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	50 c0       	rjmp	.+160    	; 0x1640 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    15a0:	29 81       	ldd	r18, Y+1	; 0x01
    15a2:	3a 81       	ldd	r19, Y+2	; 0x02
    15a4:	c9 01       	movw	r24, r18
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	28 0f       	add	r18, r24
    15ac:	39 1f       	adc	r19, r25
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	fc 01       	movw	r30, r24
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	40 81       	ld	r20, Z
    15ba:	29 81       	ldd	r18, Y+1	; 0x01
    15bc:	3a 81       	ldd	r19, Y+2	; 0x02
    15be:	c9 01       	movw	r24, r18
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	28 0f       	add	r18, r24
    15c6:	39 1f       	adc	r19, r25
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	fc 01       	movw	r30, r24
    15ce:	e2 0f       	add	r30, r18
    15d0:	f3 1f       	adc	r31, r19
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	84 2f       	mov	r24, r20
    15d6:	69 2f       	mov	r22, r25
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	3a 81       	ldd	r19, Y+2	; 0x02
    15e2:	c9 01       	movw	r24, r18
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	28 0f       	add	r18, r24
    15ea:	39 1f       	adc	r19, r25
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	fc 01       	movw	r30, r24
    15f2:	e2 0f       	add	r30, r18
    15f4:	f3 1f       	adc	r31, r19
    15f6:	50 81       	ld	r21, Z
    15f8:	29 81       	ldd	r18, Y+1	; 0x01
    15fa:	3a 81       	ldd	r19, Y+2	; 0x02
    15fc:	c9 01       	movw	r24, r18
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	28 0f       	add	r18, r24
    1604:	39 1f       	adc	r19, r25
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	fc 01       	movw	r30, r24
    160c:	e2 0f       	add	r30, r18
    160e:	f3 1f       	adc	r31, r19
    1610:	41 81       	ldd	r20, Z+1	; 0x01
    1612:	29 81       	ldd	r18, Y+1	; 0x01
    1614:	3a 81       	ldd	r19, Y+2	; 0x02
    1616:	c9 01       	movw	r24, r18
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	28 0f       	add	r18, r24
    161e:	39 1f       	adc	r19, r25
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	fc 01       	movw	r30, r24
    1626:	e2 0f       	add	r30, r18
    1628:	f3 1f       	adc	r31, r19
    162a:	92 81       	ldd	r25, Z+2	; 0x02
    162c:	85 2f       	mov	r24, r21
    162e:	64 2f       	mov	r22, r20
    1630:	49 2f       	mov	r20, r25
    1632:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	82 17       	cp	r24, r18
    164c:	93 07       	cpc	r25, r19
    164e:	0c f4       	brge	.+2      	; 0x1652 <Switch_Init+0xcc>
    1650:	a7 cf       	rjmp	.-178    	; 0x15a0 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <Switch_GetValue+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <Switch_GetValue+0x8>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	7c 83       	std	Y+4, r23	; 0x04
    1674:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	80 81       	ld	r24, Z
    167c:	e9 81       	ldd	r30, Y+1	; 0x01
    167e:	fa 81       	ldd	r31, Y+2	; 0x02
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	3c 81       	ldd	r19, Y+4	; 0x04
    1686:	69 2f       	mov	r22, r25
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 9b 13 	call	0x2736	; 0x2736 <DIO_u8GetPinValue>
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <LCD_setPinDirection+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <LCD_setPinDirection+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	6a 83       	std	Y+2, r22	; 0x02
    16ae:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 30       	cpi	r24, 0x08	; 8
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <LCD_setPinDirection+0x1c>
    16b6:	d5 c0       	rjmp	.+426    	; 0x1862 <LCD_setPinDirection+0x1c6>
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <LCD_setPinDirection+0x24>
    16be:	d1 c0       	rjmp	.+418    	; 0x1862 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3d 83       	std	Y+5, r19	; 0x05
    16c8:	2c 83       	std	Y+4, r18	; 0x04
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <LCD_setPinDirection+0x3a>
    16d4:	43 c0       	rjmp	.+134    	; 0x175c <LCD_setPinDirection+0xc0>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <LCD_setPinDirection+0x4e>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	71 f0       	breq	.+28     	; 0x1704 <LCD_setPinDirection+0x68>
    16e8:	bc c0       	rjmp	.+376    	; 0x1862 <LCD_setPinDirection+0x1c6>
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <LCD_setPinDirection+0x5a>
    16f4:	5f c0       	rjmp	.+190    	; 0x17b4 <LCD_setPinDirection+0x118>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <LCD_setPinDirection+0x66>
    1700:	85 c0       	rjmp	.+266    	; 0x180c <LCD_setPinDirection+0x170>
    1702:	af c0       	rjmp	.+350    	; 0x1862 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    170a:	aa e3       	ldi	r26, 0x3A	; 58
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ea e3       	ldi	r30, 0x3A	; 58
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <LCD_setPinDirection+0x8c>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <LCD_setPinDirection+0x88>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	98 c0       	rjmp	.+304    	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1732:	aa e3       	ldi	r26, 0x3A	; 58
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ea e3       	ldi	r30, 0x3A	; 58
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <LCD_setPinDirection+0xb4>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <LCD_setPinDirection+0xb0>
    1754:	80 95       	com	r24
    1756:	84 23       	and	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	83 c0       	rjmp	.+262    	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1762:	a7 e3       	ldi	r26, 0x37	; 55
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e7 e3       	ldi	r30, 0x37	; 55
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <LCD_setPinDirection+0xe4>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <LCD_setPinDirection+0xe0>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	6c c0       	rjmp	.+216    	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    178a:	a7 e3       	ldi	r26, 0x37	; 55
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <LCD_setPinDirection+0x10c>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <LCD_setPinDirection+0x108>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	57 c0       	rjmp	.+174    	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17ba:	a4 e3       	ldi	r26, 0x34	; 52
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e4 e3       	ldi	r30, 0x34	; 52
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <LCD_setPinDirection+0x13c>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <LCD_setPinDirection+0x138>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	40 c0       	rjmp	.+128    	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    17e2:	a4 e3       	ldi	r26, 0x34	; 52
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <LCD_setPinDirection+0x164>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <LCD_setPinDirection+0x160>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	2b c0       	rjmp	.+86     	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	a1 f4       	brne	.+40     	; 0x183a <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1812:	a1 e3       	ldi	r26, 0x31	; 49
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e1 e3       	ldi	r30, 0x31	; 49
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <LCD_setPinDirection+0x194>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <LCD_setPinDirection+0x190>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    183a:	a1 e3       	ldi	r26, 0x31	; 49
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e1 e3       	ldi	r30, 0x31	; 49
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <LCD_setPinDirection+0x1bc>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <LCD_setPinDirection+0x1b8>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <LCD_setPinValue+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <LCD_setPinValue+0x8>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
    1884:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	08 f0       	brcs	.+2      	; 0x188e <LCD_setPinValue+0x1c>
    188c:	d5 c0       	rjmp	.+426    	; 0x1a38 <LCD_setPinValue+0x1c6>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <LCD_setPinValue+0x24>
    1894:	d1 c0       	rjmp	.+418    	; 0x1a38 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <LCD_setPinValue+0x3a>
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <LCD_setPinValue+0xc0>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <LCD_setPinValue+0x4e>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	71 f0       	breq	.+28     	; 0x18da <LCD_setPinValue+0x68>
    18be:	bc c0       	rjmp	.+376    	; 0x1a38 <LCD_setPinValue+0x1c6>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <LCD_setPinValue+0x5a>
    18ca:	5f c0       	rjmp	.+190    	; 0x198a <LCD_setPinValue+0x118>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <LCD_setPinValue+0x66>
    18d6:	85 c0       	rjmp	.+266    	; 0x19e2 <LCD_setPinValue+0x170>
    18d8:	af c0       	rjmp	.+350    	; 0x1a38 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	a1 f4       	brne	.+40     	; 0x1908 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18e0:	ab e3       	ldi	r26, 0x3B	; 59
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	eb e3       	ldi	r30, 0x3B	; 59
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <LCD_setPinValue+0x8c>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <LCD_setPinValue+0x88>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	98 c0       	rjmp	.+304    	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    1908:	ab e3       	ldi	r26, 0x3B	; 59
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	eb e3       	ldi	r30, 0x3B	; 59
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <LCD_setPinValue+0xb4>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <LCD_setPinValue+0xb0>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	83 c0       	rjmp	.+262    	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	a1 f4       	brne	.+40     	; 0x1960 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1938:	a8 e3       	ldi	r26, 0x38	; 56
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e3       	ldi	r30, 0x38	; 56
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <LCD_setPinValue+0xe4>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <LCD_setPinValue+0xe0>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	6c c0       	rjmp	.+216    	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1960:	a8 e3       	ldi	r26, 0x38	; 56
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e8 e3       	ldi	r30, 0x38	; 56
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <LCD_setPinValue+0x10c>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <LCD_setPinValue+0x108>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	57 c0       	rjmp	.+174    	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1990:	a5 e3       	ldi	r26, 0x35	; 53
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e3       	ldi	r30, 0x35	; 53
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <LCD_setPinValue+0x13c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <LCD_setPinValue+0x138>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	40 c0       	rjmp	.+128    	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    19b8:	a5 e3       	ldi	r26, 0x35	; 53
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e3       	ldi	r30, 0x35	; 53
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <LCD_setPinValue+0x164>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <LCD_setPinValue+0x160>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	2b c0       	rjmp	.+86     	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19e8:	a2 e3       	ldi	r26, 0x32	; 50
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <LCD_setPinValue+0x194>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <LCD_setPinValue+0x190>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    1a10:	a2 e3       	ldi	r26, 0x32	; 50
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e2 e3       	ldi	r30, 0x32	; 50
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <LCD_setPinValue+0x1bc>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <LCD_setPinValue+0x1b8>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <LCD_getPinValue+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <LCD_getPinValue+0x8>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1a5a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <LCD_getPinValue+0x1c>
    1a62:	84 c0       	rjmp	.+264    	; 0x1b6c <LCD_getPinValue+0x124>
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <LCD_getPinValue+0x24>
    1a6a:	80 c0       	rjmp	.+256    	; 0x1b6c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	4c 81       	ldd	r20, Y+4	; 0x04
    1a78:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7a:	41 30       	cpi	r20, 0x01	; 1
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	79 f1       	breq	.+94     	; 0x1ade <LCD_getPinValue+0x96>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	91 05       	cpc	r25, r1
    1a88:	34 f4       	brge	.+12     	; 0x1a96 <LCD_getPinValue+0x4e>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	69 f0       	breq	.+26     	; 0x1aae <LCD_getPinValue+0x66>
    1a94:	6b c0       	rjmp	.+214    	; 0x1b6c <LCD_getPinValue+0x124>
    1a96:	4c 81       	ldd	r20, Y+4	; 0x04
    1a98:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9a:	42 30       	cpi	r20, 0x02	; 2
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	b9 f1       	breq	.+110    	; 0x1b0e <LCD_getPinValue+0xc6>
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <LCD_getPinValue+0x64>
    1aaa:	49 c0       	rjmp	.+146    	; 0x1b3e <LCD_getPinValue+0xf6>
    1aac:	5f c0       	rjmp	.+190    	; 0x1b6c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1aae:	e9 e3       	ldi	r30, 0x39	; 57
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a9 01       	movw	r20, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <LCD_getPinValue+0x7e>
    1ac2:	55 95       	asr	r21
    1ac4:	47 95       	ror	r20
    1ac6:	8a 95       	dec	r24
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <LCD_getPinValue+0x7a>
    1aca:	ca 01       	movw	r24, r20
    1acc:	81 70       	andi	r24, 0x01	; 1
    1ace:	90 70       	andi	r25, 0x00	; 0
    1ad0:	88 23       	and	r24, r24
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	49 c0       	rjmp	.+146    	; 0x1b6c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	47 c0       	rjmp	.+142    	; 0x1b6c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ade:	e6 e3       	ldi	r30, 0x36	; 54
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a9 01       	movw	r20, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <LCD_getPinValue+0xae>
    1af2:	55 95       	asr	r21
    1af4:	47 95       	ror	r20
    1af6:	8a 95       	dec	r24
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <LCD_getPinValue+0xaa>
    1afa:	ca 01       	movw	r24, r20
    1afc:	81 70       	andi	r24, 0x01	; 1
    1afe:	90 70       	andi	r25, 0x00	; 0
    1b00:	88 23       	and	r24, r24
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	31 c0       	rjmp	.+98     	; 0x1b6c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b0a:	19 82       	std	Y+1, r1	; 0x01
    1b0c:	2f c0       	rjmp	.+94     	; 0x1b6c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b0e:	e3 e3       	ldi	r30, 0x33	; 51
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a9 01       	movw	r20, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <LCD_getPinValue+0xde>
    1b22:	55 95       	asr	r21
    1b24:	47 95       	ror	r20
    1b26:	8a 95       	dec	r24
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <LCD_getPinValue+0xda>
    1b2a:	ca 01       	movw	r24, r20
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	88 23       	and	r24, r24
    1b32:	19 f0       	breq	.+6      	; 0x1b3a <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	19 c0       	rjmp	.+50     	; 0x1b6c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	17 c0       	rjmp	.+46     	; 0x1b6c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b3e:	e0 e3       	ldi	r30, 0x30	; 48
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a9 01       	movw	r20, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <LCD_getPinValue+0x10e>
    1b52:	55 95       	asr	r21
    1b54:	47 95       	ror	r20
    1b56:	8a 95       	dec	r24
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <LCD_getPinValue+0x10a>
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	81 70       	andi	r24, 0x01	; 1
    1b5e:	90 70       	andi	r25, 0x00	; 0
    1b60:	88 23       	and	r24, r24
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b6a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <LCD_setPortDirection+0x6>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <LCD_setPortDirection+0x8>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	90 f5       	brcc	.+100    	; 0x1bf8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	d1 f0       	breq	.+52     	; 0x1bdc <LCD_setPortDirection+0x5e>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <LCD_setPortDirection+0x3e>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <LCD_setPortDirection+0x54>
    1bba:	1e c0       	rjmp	.+60     	; 0x1bf8 <LCD_setPortDirection+0x7a>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <LCD_setPortDirection+0x68>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <LCD_setPortDirection+0x72>
    1bd0:	13 c0       	rjmp	.+38     	; 0x1bf8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bd2:	ea e3       	ldi	r30, 0x3A	; 58
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 83       	st	Z, r24
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bdc:	e7 e3       	ldi	r30, 0x37	; 55
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	80 83       	st	Z, r24
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1be6:	e4 e3       	ldi	r30, 0x34	; 52
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 83       	st	Z, r24
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bf0:	e1 e3       	ldi	r30, 0x31	; 49
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <LCD_setPortValue+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <LCD_setPortValue+0x8>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	90 f5       	brcc	.+100    	; 0x1c80 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	3c 83       	std	Y+4, r19	; 0x04
    1c24:	2b 83       	std	Y+3, r18	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	d1 f0       	breq	.+52     	; 0x1c64 <LCD_setPortValue+0x5e>
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	3c 81       	ldd	r19, Y+4	; 0x04
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	31 05       	cpc	r19, r1
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <LCD_setPortValue+0x3e>
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <LCD_setPortValue+0x54>
    1c42:	1e c0       	rjmp	.+60     	; 0x1c80 <LCD_setPortValue+0x7a>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <LCD_setPortValue+0x68>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	91 05       	cpc	r25, r1
    1c56:	81 f0       	breq	.+32     	; 0x1c78 <LCD_setPortValue+0x72>
    1c58:	13 c0       	rjmp	.+38     	; 0x1c80 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c5a:	eb e3       	ldi	r30, 0x3B	; 59
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	80 83       	st	Z, r24
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c64:	e8 e3       	ldi	r30, 0x38	; 56
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	80 83       	st	Z, r24
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c6e:	e5 e3       	ldi	r30, 0x35	; 53
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 83       	st	Z, r24
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c78:	e2 e3       	ldi	r30, 0x32	; 50
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <LCD_getPortValue+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <LCD_getPortValue+0x8>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1c9c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	90 f5       	brcc	.+100    	; 0x1d08 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3c 83       	std	Y+4, r19	; 0x04
    1cac:	2b 83       	std	Y+3, r18	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	d1 f0       	breq	.+52     	; 0x1cec <LCD_getPortValue+0x5e>
    1cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cba:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbc:	22 30       	cpi	r18, 0x02	; 2
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_getPortValue+0x3e>
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	61 f0       	breq	.+24     	; 0x1ce2 <LCD_getPortValue+0x54>
    1cca:	1e c0       	rjmp	.+60     	; 0x1d08 <LCD_getPortValue+0x7a>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	81 f0       	breq	.+32     	; 0x1cf6 <LCD_getPortValue+0x68>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	91 05       	cpc	r25, r1
    1cde:	81 f0       	breq	.+32     	; 0x1d00 <LCD_getPortValue+0x72>
    1ce0:	13 c0       	rjmp	.+38     	; 0x1d08 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ce2:	e9 e3       	ldi	r30, 0x39	; 57
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	0e c0       	rjmp	.+28     	; 0x1d08 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cec:	e6 e3       	ldi	r30, 0x36	; 54
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cf6:	e3 e3       	ldi	r30, 0x33	; 51
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d00:	e0 e3       	ldi	r30, 0x30	; 48
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1d20:	af e5       	ldi	r26, 0x5F	; 95
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ef e5       	ldi	r30, 0x5F	; 95
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 68       	ori	r24, 0x80	; 128
    1d2c:	8c 93       	st	X, r24
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1d3c:	af e5       	ldi	r26, 0x5F	; 95
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ef e5       	ldi	r30, 0x5F	; 95
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 77       	andi	r24, 0x7F	; 127
    1d48:	8c 93       	st	X, r24
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <setCallBack+0x6>
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e4 57       	subi	r30, 0x74	; 116
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1d8e:	a5 e5       	ldi	r26, 0x55	; 85
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e5       	ldi	r30, 0x55	; 85
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1d9c:	a5 e5       	ldi	r26, 0x55	; 85
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e5       	ldi	r30, 0x55	; 85
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8d 7f       	andi	r24, 0xFD	; 253
    1da8:	8c 93       	st	X, r24
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1db8:	a5 e5       	ldi	r26, 0x55	; 85
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e5 e5       	ldi	r30, 0x55	; 85
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	82 60       	ori	r24, 0x02	; 2
    1dc4:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1dc6:	a5 e5       	ldi	r26, 0x55	; 85
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e5 e5       	ldi	r30, 0x55	; 85
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8e 7f       	andi	r24, 0xFE	; 254
    1dd2:	8c 93       	st	X, r24
}
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1de2:	a5 e5       	ldi	r26, 0x55	; 85
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e5       	ldi	r30, 0x55	; 85
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8d 7f       	andi	r24, 0xFD	; 253
    1dee:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1df0:	a5 e5       	ldi	r26, 0x55	; 85
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e5 e5       	ldi	r30, 0x55	; 85
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	81 60       	ori	r24, 0x01	; 1
    1dfc:	8c 93       	st	X, r24
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1e0c:	a5 e5       	ldi	r26, 0x55	; 85
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e5 e5       	ldi	r30, 0x55	; 85
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	82 60       	ori	r24, 0x02	; 2
    1e18:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1e1a:	a5 e5       	ldi	r26, 0x55	; 85
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e5 e5       	ldi	r30, 0x55	; 85
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	81 60       	ori	r24, 0x01	; 1
    1e26:	8c 93       	st	X, r24
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1e36:	a5 e5       	ldi	r26, 0x55	; 85
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8b 7f       	andi	r24, 0xFB	; 251
    1e42:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1e44:	a5 e5       	ldi	r26, 0x55	; 85
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e5       	ldi	r30, 0x55	; 85
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	87 7f       	andi	r24, 0xF7	; 247
    1e50:	8c 93       	st	X, r24
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1e60:	a5 e5       	ldi	r26, 0x55	; 85
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e5 e5       	ldi	r30, 0x55	; 85
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 60       	ori	r24, 0x08	; 8
    1e6c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1e6e:	a5 e5       	ldi	r26, 0x55	; 85
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e5       	ldi	r30, 0x55	; 85
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8b 7f       	andi	r24, 0xFB	; 251
    1e7a:	8c 93       	st	X, r24
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1e8a:	a5 e5       	ldi	r26, 0x55	; 85
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e5       	ldi	r30, 0x55	; 85
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	87 7f       	andi	r24, 0xF7	; 247
    1e96:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1e98:	a5 e5       	ldi	r26, 0x55	; 85
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e5       	ldi	r30, 0x55	; 85
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	84 60       	ori	r24, 0x04	; 4
    1ea4:	8c 93       	st	X, r24
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1eb4:	a5 e5       	ldi	r26, 0x55	; 85
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e5 e5       	ldi	r30, 0x55	; 85
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 60       	ori	r24, 0x08	; 8
    1ec0:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1ec2:	a5 e5       	ldi	r26, 0x55	; 85
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e5 e5       	ldi	r30, 0x55	; 85
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	84 60       	ori	r24, 0x04	; 4
    1ece:	8c 93       	st	X, r24
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1ede:	a4 e5       	ldi	r26, 0x54	; 84
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e4 e5       	ldi	r30, 0x54	; 84
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 64       	ori	r24, 0x40	; 64
    1eea:	8c 93       	st	X, r24
}
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1efa:	a4 e5       	ldi	r26, 0x54	; 84
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e4 e5       	ldi	r30, 0x54	; 84
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7b       	andi	r24, 0xBF	; 191
    1f06:	8c 93       	st	X, r24
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1f16:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1f1a:	ab e5       	ldi	r26, 0x5B	; 91
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	eb e5       	ldi	r30, 0x5B	; 91
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 64       	ori	r24, 0x40	; 64
    1f26:	8c 93       	st	X, r24
}
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1f36:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1f3a:	ab e5       	ldi	r26, 0x5B	; 91
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	eb e5       	ldi	r30, 0x5B	; 91
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 68       	ori	r24, 0x80	; 128
    1f46:	8c 93       	st	X, r24
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	2a 97       	sbiw	r28, 0x0a	; 10
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3a 87       	std	Y+10, r19	; 0x0a
    1f6e:	29 87       	std	Y+9, r18	; 0x09
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	e9 f1       	breq	.+122    	; 0x1ff4 <EXTI_INTEnable+0xa6>
    1f7a:	29 85       	ldd	r18, Y+9	; 0x09
    1f7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <EXTI_INTEnable+0x38>
    1f84:	69 c0       	rjmp	.+210    	; 0x2058 <EXTI_INTEnable+0x10a>
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <EXTI_INTEnable+0x42>
    1f8e:	7f c0       	rjmp	.+254    	; 0x208e <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1f90:	ab e5       	ldi	r26, 0x5B	; 91
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	eb e5       	ldi	r30, 0x5B	; 91
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 64       	ori	r24, 0x40	; 64
    1f9c:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	38 87       	std	Y+8, r19	; 0x08
    1fa6:	2f 83       	std	Y+7, r18	; 0x07
    1fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1faa:	98 85       	ldd	r25, Y+8	; 0x08
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	c1 f0       	breq	.+48     	; 0x1fe2 <EXTI_INTEnable+0x94>
    1fb2:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb4:	38 85       	ldd	r19, Y+8	; 0x08
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <EXTI_INTEnable+0x78>
    1fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fbe:	98 85       	ldd	r25, Y+8	; 0x08
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	61 f0       	breq	.+24     	; 0x1fdc <EXTI_INTEnable+0x8e>
    1fc4:	64 c0       	rjmp	.+200    	; 0x208e <EXTI_INTEnable+0x140>
    1fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fc8:	38 85       	ldd	r19, Y+8	; 0x08
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <EXTI_INTEnable+0x9a>
    1fd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd2:	98 85       	ldd	r25, Y+8	; 0x08
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	51 f0       	breq	.+20     	; 0x1fee <EXTI_INTEnable+0xa0>
    1fda:	59 c0       	rjmp	.+178    	; 0x208e <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1fdc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EXTI0_LowLevel_MODE>
    1fe0:	56 c0       	rjmp	.+172    	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1fe2:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <EXTI0_FALLING_MODE>
    1fe6:	53 c0       	rjmp	.+166    	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1fe8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <EXTI0_AnyLogicalChange_MODE>
    1fec:	50 c0       	rjmp	.+160    	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1fee:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EXTI0_RISING_MODE>
    1ff2:	4d c0       	rjmp	.+154    	; 0x208e <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1ff4:	ab e5       	ldi	r26, 0x5B	; 91
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	eb e5       	ldi	r30, 0x5B	; 91
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 68       	ori	r24, 0x80	; 128
    2000:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3e 83       	std	Y+6, r19	; 0x06
    200a:	2d 83       	std	Y+5, r18	; 0x05
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	c1 f0       	breq	.+48     	; 0x2046 <EXTI_INTEnable+0xf8>
    2016:	2d 81       	ldd	r18, Y+5	; 0x05
    2018:	3e 81       	ldd	r19, Y+6	; 0x06
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	2c f4       	brge	.+10     	; 0x202a <EXTI_INTEnable+0xdc>
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	61 f0       	breq	.+24     	; 0x2040 <EXTI_INTEnable+0xf2>
    2028:	32 c0       	rjmp	.+100    	; 0x208e <EXTI_INTEnable+0x140>
    202a:	2d 81       	ldd	r18, Y+5	; 0x05
    202c:	3e 81       	ldd	r19, Y+6	; 0x06
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	61 f0       	breq	.+24     	; 0x204c <EXTI_INTEnable+0xfe>
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	51 f0       	breq	.+20     	; 0x2052 <EXTI_INTEnable+0x104>
    203e:	27 c0       	rjmp	.+78     	; 0x208e <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    2040:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <EXTI1_LowLevel_MODE>
    2044:	24 c0       	rjmp	.+72     	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    2046:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <EXTI1_FALLING_MODE>
    204a:	21 c0       	rjmp	.+66     	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    204c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <EXTI1_AnyLogicalChange_MODE>
    2050:	1e c0       	rjmp	.+60     	; 0x208e <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    2052:	0e 94 56 0f 	call	0x1eac	; 0x1eac <EXTI1_RISING_MODE>
    2056:	1b c0       	rjmp	.+54     	; 0x208e <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2058:	ab e5       	ldi	r26, 0x5B	; 91
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	eb e5       	ldi	r30, 0x5B	; 91
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	80 62       	ori	r24, 0x20	; 32
    2064:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	3c 83       	std	Y+4, r19	; 0x04
    206e:	2b 83       	std	Y+3, r18	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	81 30       	cpi	r24, 0x01	; 1
    2076:	91 05       	cpc	r25, r1
    2078:	41 f0       	breq	.+16     	; 0x208a <EXTI_INTEnable+0x13c>
    207a:	2b 81       	ldd	r18, Y+3	; 0x03
    207c:	3c 81       	ldd	r19, Y+4	; 0x04
    207e:	23 30       	cpi	r18, 0x03	; 3
    2080:	31 05       	cpc	r19, r1
    2082:	29 f4       	brne	.+10     	; 0x208e <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    2084:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <EXTI2_RISING_MODE>
    2088:	02 c0       	rjmp	.+4      	; 0x208e <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    208a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    208e:	2a 96       	adiw	r28, 0x0a	; 10
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <EXTI_voidINTDisable+0x6>
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	3b 83       	std	Y+3, r19	; 0x03
    20b6:	2a 83       	std	Y+2, r18	; 0x02
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	91 05       	cpc	r25, r1
    20c0:	89 f0       	breq	.+34     	; 0x20e4 <EXTI_voidINTDisable+0x44>
    20c2:	2a 81       	ldd	r18, Y+2	; 0x02
    20c4:	3b 81       	ldd	r19, Y+3	; 0x03
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	31 05       	cpc	r19, r1
    20ca:	a1 f0       	breq	.+40     	; 0x20f4 <EXTI_voidINTDisable+0x54>
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	b9 f4       	brne	.+46     	; 0x2102 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    20d4:	ab e5       	ldi	r26, 0x5B	; 91
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	eb e5       	ldi	r30, 0x5B	; 91
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8f 7b       	andi	r24, 0xBF	; 191
    20e0:	8c 93       	st	X, r24
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    20e4:	ab e5       	ldi	r26, 0x5B	; 91
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	eb e5       	ldi	r30, 0x5B	; 91
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 77       	andi	r24, 0x7F	; 127
    20f0:	8c 93       	st	X, r24
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    20f4:	ab e5       	ldi	r26, 0x5B	; 91
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	eb e5       	ldi	r30, 0x5B	; 91
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 7d       	andi	r24, 0xDF	; 223
    2100:	8c 93       	st	X, r24
			break;
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	2f 93       	push	r18
    211a:	3f 93       	push	r19
    211c:	4f 93       	push	r20
    211e:	5f 93       	push	r21
    2120:	6f 93       	push	r22
    2122:	7f 93       	push	r23
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    2138:	80 91 8c 01 	lds	r24, 0x018C
    213c:	90 91 8d 01 	lds	r25, 0x018D
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	29 f0       	breq	.+10     	; 0x214e <__vector_1+0x40>
		EXTI[0]();
    2144:	e0 91 8c 01 	lds	r30, 0x018C
    2148:	f0 91 8d 01 	lds	r31, 0x018D
    214c:	09 95       	icall
	}

}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    219e:	80 91 8e 01 	lds	r24, 0x018E
    21a2:	90 91 8f 01 	lds	r25, 0x018F
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	29 f0       	breq	.+10     	; 0x21b4 <__vector_2+0x40>
			EXTI[1]();
    21aa:	e0 91 8e 01 	lds	r30, 0x018E
    21ae:	f0 91 8f 01 	lds	r31, 0x018F
    21b2:	09 95       	icall
	}

}
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	0f 90       	pop	r0
    21d6:	1f 90       	pop	r1
    21d8:	18 95       	reti

000021da <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    21da:	1f 92       	push	r1
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	0f 92       	push	r0
    21e2:	11 24       	eor	r1, r1
    21e4:	2f 93       	push	r18
    21e6:	3f 93       	push	r19
    21e8:	4f 93       	push	r20
    21ea:	5f 93       	push	r21
    21ec:	6f 93       	push	r22
    21ee:	7f 93       	push	r23
    21f0:	8f 93       	push	r24
    21f2:	9f 93       	push	r25
    21f4:	af 93       	push	r26
    21f6:	bf 93       	push	r27
    21f8:	ef 93       	push	r30
    21fa:	ff 93       	push	r31
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    2204:	80 91 90 01 	lds	r24, 0x0190
    2208:	90 91 91 01 	lds	r25, 0x0191
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	29 f0       	breq	.+10     	; 0x221a <__vector_3+0x40>
			EXTI[2]();
    2210:	e0 91 90 01 	lds	r30, 0x0190
    2214:	f0 91 91 01 	lds	r31, 0x0191
    2218:	09 95       	icall
	}

}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	ff 91       	pop	r31
    2220:	ef 91       	pop	r30
    2222:	bf 91       	pop	r27
    2224:	af 91       	pop	r26
    2226:	9f 91       	pop	r25
    2228:	8f 91       	pop	r24
    222a:	7f 91       	pop	r23
    222c:	6f 91       	pop	r22
    222e:	5f 91       	pop	r21
    2230:	4f 91       	pop	r20
    2232:	3f 91       	pop	r19
    2234:	2f 91       	pop	r18
    2236:	0f 90       	pop	r0
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	0f 90       	pop	r0
    223c:	1f 90       	pop	r1
    223e:	18 95       	reti

00002240 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    2248:	ea e3       	ldi	r30, 0x3A	; 58
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    224e:	e7 e3       	ldi	r30, 0x37	; 55
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    2254:	e4 e3       	ldi	r30, 0x34	; 52
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	10 82       	st	Z, r1
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    225a:	e1 e3       	ldi	r30, 0x31	; 49
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    2262:	eb e3       	ldi	r30, 0x3B	; 59
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    2268:	e8 e3       	ldi	r30, 0x38	; 56
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    226e:	e5 e3       	ldi	r30, 0x35	; 53
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    2274:	e2 e3       	ldi	r30, 0x32	; 50
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	10 82       	st	Z, r1

}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	2e 97       	sbiw	r28, 0x0e	; 14
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	6b 83       	std	Y+3, r22	; 0x03
    2298:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	84 30       	cpi	r24, 0x04	; 4
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <DIO_u8SetPinDirection+0x26>
    22a4:	0c c1       	rjmp	.+536    	; 0x24be <DIO_u8SetPinDirection+0x23e>
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <DIO_u8SetPinDirection+0x2e>
    22ac:	08 c1       	rjmp	.+528    	; 0x24be <DIO_u8SetPinDirection+0x23e>
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	21 f0       	breq	.+8      	; 0x22bc <DIO_u8SetPinDirection+0x3c>
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	88 23       	and	r24, r24
    22b8:	09 f0       	breq	.+2      	; 0x22bc <DIO_u8SetPinDirection+0x3c>
    22ba:	01 c1       	rjmp	.+514    	; 0x24be <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3e 87       	std	Y+14, r19	; 0x0e
    22c4:	2d 87       	std	Y+13, r18	; 0x0d
    22c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	91 05       	cpc	r25, r1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <DIO_u8SetPinDirection+0x52>
    22d0:	4f c0       	rjmp	.+158    	; 0x2370 <DIO_u8SetPinDirection+0xf0>
    22d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    22d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	2c f4       	brge	.+10     	; 0x22e6 <DIO_u8SetPinDirection+0x66>
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	71 f0       	breq	.+28     	; 0x2300 <DIO_u8SetPinDirection+0x80>
    22e4:	ed c0       	rjmp	.+474    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
    22e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    22e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <DIO_u8SetPinDirection+0x72>
    22f0:	77 c0       	rjmp	.+238    	; 0x23e0 <DIO_u8SetPinDirection+0x160>
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	83 30       	cpi	r24, 0x03	; 3
    22f8:	91 05       	cpc	r25, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <DIO_u8SetPinDirection+0x7e>
    22fc:	a9 c0       	rjmp	.+338    	; 0x2450 <DIO_u8SetPinDirection+0x1d0>
    22fe:	e0 c0       	rjmp	.+448    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3c 87       	std	Y+12, r19	; 0x0c
    2308:	2b 87       	std	Y+11, r18	; 0x0b
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	9c 85       	ldd	r25, Y+12	; 0x0c
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	d1 f0       	breq	.+52     	; 0x2346 <DIO_u8SetPinDirection+0xc6>
    2312:	2b 85       	ldd	r18, Y+11	; 0x0b
    2314:	3c 85       	ldd	r19, Y+12	; 0x0c
    2316:	21 30       	cpi	r18, 0x01	; 1
    2318:	31 05       	cpc	r19, r1
    231a:	09 f0       	breq	.+2      	; 0x231e <DIO_u8SetPinDirection+0x9e>
    231c:	d1 c0       	rjmp	.+418    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    231e:	aa e3       	ldi	r26, 0x3A	; 58
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ea e3       	ldi	r30, 0x3A	; 58
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	48 2f       	mov	r20, r24
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	02 2e       	mov	r0, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <DIO_u8SetPinDirection+0xbc>
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	0a 94       	dec	r0
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <DIO_u8SetPinDirection+0xb8>
    2340:	84 2b       	or	r24, r20
    2342:	8c 93       	st	X, r24
    2344:	bd c0       	rjmp	.+378    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2346:	aa e3       	ldi	r26, 0x3A	; 58
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ea e3       	ldi	r30, 0x3A	; 58
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	48 2f       	mov	r20, r24
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 2e       	mov	r0, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <DIO_u8SetPinDirection+0xe4>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	0a 94       	dec	r0
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <DIO_u8SetPinDirection+0xe0>
    2368:	80 95       	com	r24
    236a:	84 23       	and	r24, r20
    236c:	8c 93       	st	X, r24
    236e:	a8 c0       	rjmp	.+336    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	3a 87       	std	Y+10, r19	; 0x0a
    2378:	29 87       	std	Y+9, r18	; 0x09
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	d1 f0       	breq	.+52     	; 0x23b6 <DIO_u8SetPinDirection+0x136>
    2382:	29 85       	ldd	r18, Y+9	; 0x09
    2384:	3a 85       	ldd	r19, Y+10	; 0x0a
    2386:	21 30       	cpi	r18, 0x01	; 1
    2388:	31 05       	cpc	r19, r1
    238a:	09 f0       	breq	.+2      	; 0x238e <DIO_u8SetPinDirection+0x10e>
    238c:	99 c0       	rjmp	.+306    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    238e:	a7 e3       	ldi	r26, 0x37	; 55
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e7 e3       	ldi	r30, 0x37	; 55
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_u8SetPinDirection+0x12c>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_u8SetPinDirection+0x128>
    23b0:	84 2b       	or	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	85 c0       	rjmp	.+266    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    23b6:	a7 e3       	ldi	r26, 0x37	; 55
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e7 e3       	ldi	r30, 0x37	; 55
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <DIO_u8SetPinDirection+0x154>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <DIO_u8SetPinDirection+0x150>
    23d8:	80 95       	com	r24
    23da:	84 23       	and	r24, r20
    23dc:	8c 93       	st	X, r24
    23de:	70 c0       	rjmp	.+224    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    23e0:	8c 81       	ldd	r24, Y+4	; 0x04
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	38 87       	std	Y+8, r19	; 0x08
    23e8:	2f 83       	std	Y+7, r18	; 0x07
    23ea:	8f 81       	ldd	r24, Y+7	; 0x07
    23ec:	98 85       	ldd	r25, Y+8	; 0x08
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	d1 f0       	breq	.+52     	; 0x2426 <DIO_u8SetPinDirection+0x1a6>
    23f2:	2f 81       	ldd	r18, Y+7	; 0x07
    23f4:	38 85       	ldd	r19, Y+8	; 0x08
    23f6:	21 30       	cpi	r18, 0x01	; 1
    23f8:	31 05       	cpc	r19, r1
    23fa:	09 f0       	breq	.+2      	; 0x23fe <DIO_u8SetPinDirection+0x17e>
    23fc:	61 c0       	rjmp	.+194    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    23fe:	a4 e3       	ldi	r26, 0x34	; 52
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e4 e3       	ldi	r30, 0x34	; 52
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	48 2f       	mov	r20, r24
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	02 2e       	mov	r0, r18
    2416:	02 c0       	rjmp	.+4      	; 0x241c <DIO_u8SetPinDirection+0x19c>
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	0a 94       	dec	r0
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <DIO_u8SetPinDirection+0x198>
    2420:	84 2b       	or	r24, r20
    2422:	8c 93       	st	X, r24
    2424:	4d c0       	rjmp	.+154    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2426:	a4 e3       	ldi	r26, 0x34	; 52
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e4 e3       	ldi	r30, 0x34	; 52
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	48 2f       	mov	r20, r24
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_u8SetPinDirection+0x1c4>
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <DIO_u8SetPinDirection+0x1c0>
    2448:	80 95       	com	r24
    244a:	84 23       	and	r24, r20
    244c:	8c 93       	st	X, r24
    244e:	38 c0       	rjmp	.+112    	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	3e 83       	std	Y+6, r19	; 0x06
    2458:	2d 83       	std	Y+5, r18	; 0x05
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	c9 f0       	breq	.+50     	; 0x2494 <DIO_u8SetPinDirection+0x214>
    2462:	2d 81       	ldd	r18, Y+5	; 0x05
    2464:	3e 81       	ldd	r19, Y+6	; 0x06
    2466:	21 30       	cpi	r18, 0x01	; 1
    2468:	31 05       	cpc	r19, r1
    246a:	51 f5       	brne	.+84     	; 0x24c0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    246c:	a1 e3       	ldi	r26, 0x31	; 49
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e1 e3       	ldi	r30, 0x31	; 49
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_u8SetPinDirection+0x20a>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_u8SetPinDirection+0x206>
    248e:	84 2b       	or	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	16 c0       	rjmp	.+44     	; 0x24c0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2494:	a1 e3       	ldi	r26, 0x31	; 49
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e1 e3       	ldi	r30, 0x31	; 49
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 2e       	mov	r0, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_u8SetPinDirection+0x232>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	0a 94       	dec	r0
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_u8SetPinDirection+0x22e>
    24b6:	80 95       	com	r24
    24b8:	84 23       	and	r24, r20
    24ba:	8c 93       	st	X, r24
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    24be:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c2:	2e 96       	adiw	r28, 0x0e	; 14
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	2f 97       	sbiw	r28, 0x0f	; 15
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	6c 83       	std	Y+4, r22	; 0x04
    24ec:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	84 30       	cpi	r24, 0x04	; 4
    24f6:	08 f0       	brcs	.+2      	; 0x24fa <DIO_u8SetPinValue+0x26>
    24f8:	13 c1       	rjmp	.+550    	; 0x2720 <DIO_u8SetPinValue+0x24c>
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	88 30       	cpi	r24, 0x08	; 8
    24fe:	08 f0       	brcs	.+2      	; 0x2502 <DIO_u8SetPinValue+0x2e>
    2500:	0f c1       	rjmp	.+542    	; 0x2720 <DIO_u8SetPinValue+0x24c>
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	88 23       	and	r24, r24
    2506:	21 f0       	breq	.+8      	; 0x2510 <DIO_u8SetPinValue+0x3c>
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	09 f0       	breq	.+2      	; 0x2510 <DIO_u8SetPinValue+0x3c>
    250e:	08 c1       	rjmp	.+528    	; 0x2720 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	3f 87       	std	Y+15, r19	; 0x0f
    2518:	2e 87       	std	Y+14, r18	; 0x0e
    251a:	8e 85       	ldd	r24, Y+14	; 0x0e
    251c:	9f 85       	ldd	r25, Y+15	; 0x0f
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	91 05       	cpc	r25, r1
    2522:	09 f4       	brne	.+2      	; 0x2526 <DIO_u8SetPinValue+0x52>
    2524:	50 c0       	rjmp	.+160    	; 0x25c6 <DIO_u8SetPinValue+0xf2>
    2526:	2e 85       	ldd	r18, Y+14	; 0x0e
    2528:	3f 85       	ldd	r19, Y+15	; 0x0f
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	2c f4       	brge	.+10     	; 0x253a <DIO_u8SetPinValue+0x66>
    2530:	8e 85       	ldd	r24, Y+14	; 0x0e
    2532:	9f 85       	ldd	r25, Y+15	; 0x0f
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	71 f0       	breq	.+28     	; 0x2554 <DIO_u8SetPinValue+0x80>
    2538:	f4 c0       	rjmp	.+488    	; 0x2722 <DIO_u8SetPinValue+0x24e>
    253a:	2e 85       	ldd	r18, Y+14	; 0x0e
    253c:	3f 85       	ldd	r19, Y+15	; 0x0f
    253e:	22 30       	cpi	r18, 0x02	; 2
    2540:	31 05       	cpc	r19, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <DIO_u8SetPinValue+0x72>
    2544:	79 c0       	rjmp	.+242    	; 0x2638 <DIO_u8SetPinValue+0x164>
    2546:	8e 85       	ldd	r24, Y+14	; 0x0e
    2548:	9f 85       	ldd	r25, Y+15	; 0x0f
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	91 05       	cpc	r25, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <DIO_u8SetPinValue+0x7e>
    2550:	ad c0       	rjmp	.+346    	; 0x26ac <DIO_u8SetPinValue+0x1d8>
    2552:	e7 c0       	rjmp	.+462    	; 0x2722 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3d 87       	std	Y+13, r19	; 0x0d
    255c:	2c 87       	std	Y+12, r18	; 0x0c
    255e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2560:	9d 85       	ldd	r25, Y+13	; 0x0d
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	c9 f0       	breq	.+50     	; 0x2598 <DIO_u8SetPinValue+0xc4>
    2566:	2c 85       	ldd	r18, Y+12	; 0x0c
    2568:	3d 85       	ldd	r19, Y+13	; 0x0d
    256a:	21 30       	cpi	r18, 0x01	; 1
    256c:	31 05       	cpc	r19, r1
    256e:	49 f5       	brne	.+82     	; 0x25c2 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2570:	ab e3       	ldi	r26, 0x3B	; 59
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	eb e3       	ldi	r30, 0x3B	; 59
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 2e       	mov	r0, r18
    2588:	02 c0       	rjmp	.+4      	; 0x258e <DIO_u8SetPinValue+0xba>
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	0a 94       	dec	r0
    2590:	e2 f7       	brpl	.-8      	; 0x258a <DIO_u8SetPinValue+0xb6>
    2592:	84 2b       	or	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	c5 c0       	rjmp	.+394    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2598:	ab e3       	ldi	r26, 0x3B	; 59
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e3       	ldi	r30, 0x3B	; 59
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8c 81       	ldd	r24, Y+4	; 0x04
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_u8SetPinValue+0xe2>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_u8SetPinValue+0xde>
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	8c 93       	st	X, r24
    25c0:	b0 c0       	rjmp	.+352    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    25c2:	1a 82       	std	Y+2, r1	; 0x02
    25c4:	ae c0       	rjmp	.+348    	; 0x2722 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	3b 87       	std	Y+11, r19	; 0x0b
    25ce:	2a 87       	std	Y+10, r18	; 0x0a
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	c9 f0       	breq	.+50     	; 0x260a <DIO_u8SetPinValue+0x136>
    25d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    25da:	3b 85       	ldd	r19, Y+11	; 0x0b
    25dc:	21 30       	cpi	r18, 0x01	; 1
    25de:	31 05       	cpc	r19, r1
    25e0:	49 f5       	brne	.+82     	; 0x2634 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    25e2:	a8 e3       	ldi	r26, 0x38	; 56
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e8 e3       	ldi	r30, 0x38	; 56
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_u8SetPinValue+0x12c>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_u8SetPinValue+0x128>
    2604:	84 2b       	or	r24, r20
    2606:	8c 93       	st	X, r24
    2608:	8c c0       	rjmp	.+280    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    260a:	a8 e3       	ldi	r26, 0x38	; 56
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e8 e3       	ldi	r30, 0x38	; 56
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	48 2f       	mov	r20, r24
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <DIO_u8SetPinValue+0x154>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <DIO_u8SetPinValue+0x150>
    262c:	80 95       	com	r24
    262e:	84 23       	and	r24, r20
    2630:	8c 93       	st	X, r24
    2632:	77 c0       	rjmp	.+238    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2634:	1a 82       	std	Y+2, r1	; 0x02
    2636:	75 c0       	rjmp	.+234    	; 0x2722 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	39 87       	std	Y+9, r19	; 0x09
    2640:	28 87       	std	Y+8, r18	; 0x08
    2642:	88 85       	ldd	r24, Y+8	; 0x08
    2644:	99 85       	ldd	r25, Y+9	; 0x09
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	31 f0       	breq	.+12     	; 0x2656 <DIO_u8SetPinValue+0x182>
    264a:	28 85       	ldd	r18, Y+8	; 0x08
    264c:	39 85       	ldd	r19, Y+9	; 0x09
    264e:	21 30       	cpi	r18, 0x01	; 1
    2650:	31 05       	cpc	r19, r1
    2652:	b1 f0       	breq	.+44     	; 0x2680 <DIO_u8SetPinValue+0x1ac>
    2654:	29 c0       	rjmp	.+82     	; 0x26a8 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2656:	a5 e3       	ldi	r26, 0x35	; 53
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e3       	ldi	r30, 0x35	; 53
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	48 2f       	mov	r20, r24
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	02 2e       	mov	r0, r18
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <DIO_u8SetPinValue+0x1a0>
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	0a 94       	dec	r0
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <DIO_u8SetPinValue+0x19c>
    2678:	80 95       	com	r24
    267a:	84 23       	and	r24, r20
    267c:	8c 93       	st	X, r24
    267e:	51 c0       	rjmp	.+162    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2680:	a5 e3       	ldi	r26, 0x35	; 53
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e5 e3       	ldi	r30, 0x35	; 53
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	48 2f       	mov	r20, r24
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	02 2e       	mov	r0, r18
    2698:	02 c0       	rjmp	.+4      	; 0x269e <DIO_u8SetPinValue+0x1ca>
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	0a 94       	dec	r0
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <DIO_u8SetPinValue+0x1c6>
    26a2:	84 2b       	or	r24, r20
    26a4:	8c 93       	st	X, r24
    26a6:	3d c0       	rjmp	.+122    	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    26a8:	1a 82       	std	Y+2, r1	; 0x02
    26aa:	3b c0       	rjmp	.+118    	; 0x2722 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	3f 83       	std	Y+7, r19	; 0x07
    26b4:	2e 83       	std	Y+6, r18	; 0x06
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	31 f0       	breq	.+12     	; 0x26ca <DIO_u8SetPinValue+0x1f6>
    26be:	2e 81       	ldd	r18, Y+6	; 0x06
    26c0:	3f 81       	ldd	r19, Y+7	; 0x07
    26c2:	21 30       	cpi	r18, 0x01	; 1
    26c4:	31 05       	cpc	r19, r1
    26c6:	b1 f0       	breq	.+44     	; 0x26f4 <DIO_u8SetPinValue+0x220>
    26c8:	29 c0       	rjmp	.+82     	; 0x271c <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    26ca:	a5 e3       	ldi	r26, 0x35	; 53
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e5 e3       	ldi	r30, 0x35	; 53
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	48 2f       	mov	r20, r24
    26d6:	8c 81       	ldd	r24, Y+4	; 0x04
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	02 2e       	mov	r0, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <DIO_u8SetPinValue+0x214>
    26e4:	88 0f       	add	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	0a 94       	dec	r0
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <DIO_u8SetPinValue+0x210>
    26ec:	80 95       	com	r24
    26ee:	84 23       	and	r24, r20
    26f0:	8c 93       	st	X, r24
    26f2:	17 c0       	rjmp	.+46     	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    26f4:	a2 e3       	ldi	r26, 0x32	; 50
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e2 e3       	ldi	r30, 0x32	; 50
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	48 2f       	mov	r20, r24
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	02 2e       	mov	r0, r18
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <DIO_u8SetPinValue+0x23e>
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	0a 94       	dec	r0
    2714:	e2 f7       	brpl	.-8      	; 0x270e <DIO_u8SetPinValue+0x23a>
    2716:	84 2b       	or	r24, r20
    2718:	8c 93       	st	X, r24
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    271c:	1a 82       	std	Y+2, r1	; 0x02
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2720:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2724:	2f 96       	adiw	r28, 0x0f	; 15
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	28 97       	sbiw	r28, 0x08	; 8
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	6c 83       	std	Y+4, r22	; 0x04
    274e:	5e 83       	std	Y+6, r21	; 0x06
    2750:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	84 30       	cpi	r24, 0x04	; 4
    275a:	08 f0       	brcs	.+2      	; 0x275e <DIO_u8GetPinValue+0x28>
    275c:	9f c0       	rjmp	.+318    	; 0x289c <DIO_u8GetPinValue+0x166>
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	88 30       	cpi	r24, 0x08	; 8
    2762:	08 f0       	brcs	.+2      	; 0x2766 <DIO_u8GetPinValue+0x30>
    2764:	9b c0       	rjmp	.+310    	; 0x289c <DIO_u8GetPinValue+0x166>
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <DIO_u8GetPinValue+0x3a>
    276e:	96 c0       	rjmp	.+300    	; 0x289c <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	38 87       	std	Y+8, r19	; 0x08
    2778:	2f 83       	std	Y+7, r18	; 0x07
    277a:	4f 81       	ldd	r20, Y+7	; 0x07
    277c:	58 85       	ldd	r21, Y+8	; 0x08
    277e:	41 30       	cpi	r20, 0x01	; 1
    2780:	51 05       	cpc	r21, r1
    2782:	a9 f1       	breq	.+106    	; 0x27ee <DIO_u8GetPinValue+0xb8>
    2784:	8f 81       	ldd	r24, Y+7	; 0x07
    2786:	98 85       	ldd	r25, Y+8	; 0x08
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	91 05       	cpc	r25, r1
    278c:	34 f4       	brge	.+12     	; 0x279a <DIO_u8GetPinValue+0x64>
    278e:	2f 81       	ldd	r18, Y+7	; 0x07
    2790:	38 85       	ldd	r19, Y+8	; 0x08
    2792:	21 15       	cp	r18, r1
    2794:	31 05       	cpc	r19, r1
    2796:	71 f0       	breq	.+28     	; 0x27b4 <DIO_u8GetPinValue+0x7e>
    2798:	82 c0       	rjmp	.+260    	; 0x289e <DIO_u8GetPinValue+0x168>
    279a:	4f 81       	ldd	r20, Y+7	; 0x07
    279c:	58 85       	ldd	r21, Y+8	; 0x08
    279e:	42 30       	cpi	r20, 0x02	; 2
    27a0:	51 05       	cpc	r21, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <DIO_u8GetPinValue+0x70>
    27a4:	41 c0       	rjmp	.+130    	; 0x2828 <DIO_u8GetPinValue+0xf2>
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	91 05       	cpc	r25, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <DIO_u8GetPinValue+0x7c>
    27b0:	58 c0       	rjmp	.+176    	; 0x2862 <DIO_u8GetPinValue+0x12c>
    27b2:	75 c0       	rjmp	.+234    	; 0x289e <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    27b4:	e9 e3       	ldi	r30, 0x39	; 57
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a9 01       	movw	r20, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <DIO_u8GetPinValue+0x96>
    27c8:	55 95       	asr	r21
    27ca:	47 95       	ror	r20
    27cc:	8a 95       	dec	r24
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <DIO_u8GetPinValue+0x92>
    27d0:	ca 01       	movw	r24, r20
    27d2:	81 70       	andi	r24, 0x01	; 1
    27d4:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	88 23       	and	r24, r24
    27da:	21 f4       	brne	.+8      	; 0x27e4 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    27dc:	ed 81       	ldd	r30, Y+5	; 0x05
    27de:	fe 81       	ldd	r31, Y+6	; 0x06
    27e0:	10 82       	st	Z, r1
    27e2:	5d c0       	rjmp	.+186    	; 0x289e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    27e4:	ed 81       	ldd	r30, Y+5	; 0x05
    27e6:	fe 81       	ldd	r31, Y+6	; 0x06
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	80 83       	st	Z, r24
    27ec:	58 c0       	rjmp	.+176    	; 0x289e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    27ee:	e6 e3       	ldi	r30, 0x36	; 54
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a9 01       	movw	r20, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <DIO_u8GetPinValue+0xd0>
    2802:	55 95       	asr	r21
    2804:	47 95       	ror	r20
    2806:	8a 95       	dec	r24
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <DIO_u8GetPinValue+0xcc>
    280a:	ca 01       	movw	r24, r20
    280c:	81 70       	andi	r24, 0x01	; 1
    280e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	88 23       	and	r24, r24
    2814:	21 f4       	brne	.+8      	; 0x281e <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2816:	ed 81       	ldd	r30, Y+5	; 0x05
    2818:	fe 81       	ldd	r31, Y+6	; 0x06
    281a:	10 82       	st	Z, r1
    281c:	40 c0       	rjmp	.+128    	; 0x289e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    281e:	ed 81       	ldd	r30, Y+5	; 0x05
    2820:	fe 81       	ldd	r31, Y+6	; 0x06
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 83       	st	Z, r24
    2826:	3b c0       	rjmp	.+118    	; 0x289e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2828:	e3 e3       	ldi	r30, 0x33	; 51
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_u8GetPinValue+0x10a>
    283c:	55 95       	asr	r21
    283e:	47 95       	ror	r20
    2840:	8a 95       	dec	r24
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_u8GetPinValue+0x106>
    2844:	ca 01       	movw	r24, r20
    2846:	81 70       	andi	r24, 0x01	; 1
    2848:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	88 23       	and	r24, r24
    284e:	21 f4       	brne	.+8      	; 0x2858 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2850:	ed 81       	ldd	r30, Y+5	; 0x05
    2852:	fe 81       	ldd	r31, Y+6	; 0x06
    2854:	10 82       	st	Z, r1
    2856:	23 c0       	rjmp	.+70     	; 0x289e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2858:	ed 81       	ldd	r30, Y+5	; 0x05
    285a:	fe 81       	ldd	r31, Y+6	; 0x06
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	80 83       	st	Z, r24
    2860:	1e c0       	rjmp	.+60     	; 0x289e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    2862:	e0 e3       	ldi	r30, 0x30	; 48
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a9 01       	movw	r20, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_u8GetPinValue+0x144>
    2876:	55 95       	asr	r21
    2878:	47 95       	ror	r20
    287a:	8a 95       	dec	r24
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <DIO_u8GetPinValue+0x140>
    287e:	ca 01       	movw	r24, r20
    2880:	81 70       	andi	r24, 0x01	; 1
    2882:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	88 23       	and	r24, r24
    2888:	21 f4       	brne	.+8      	; 0x2892 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    288a:	ed 81       	ldd	r30, Y+5	; 0x05
    288c:	fe 81       	ldd	r31, Y+6	; 0x06
    288e:	10 82       	st	Z, r1
    2890:	06 c0       	rjmp	.+12     	; 0x289e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2892:	ed 81       	ldd	r30, Y+5	; 0x05
    2894:	fe 81       	ldd	r31, Y+6	; 0x06
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	80 83       	st	Z, r24
    289a:	01 c0       	rjmp	.+2      	; 0x289e <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    289c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28a0:	28 96       	adiw	r28, 0x08	; 8
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <DIO_getPinValueWithoutPointer+0x6>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <DIO_getPinValueWithoutPointer+0x8>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    28c4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	88 30       	cpi	r24, 0x08	; 8
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <DIO_getPinValueWithoutPointer+0x1c>
    28cc:	6b c0       	rjmp	.+214    	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	84 30       	cpi	r24, 0x04	; 4
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <DIO_getPinValueWithoutPointer+0x24>
    28d4:	67 c0       	rjmp	.+206    	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3d 83       	std	Y+5, r19	; 0x05
    28de:	2c 83       	std	Y+4, r18	; 0x04
    28e0:	4c 81       	ldd	r20, Y+4	; 0x04
    28e2:	5d 81       	ldd	r21, Y+5	; 0x05
    28e4:	41 30       	cpi	r20, 0x01	; 1
    28e6:	51 05       	cpc	r21, r1
    28e8:	41 f1       	breq	.+80     	; 0x293a <DIO_getPinValueWithoutPointer+0x88>
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	82 30       	cpi	r24, 0x02	; 2
    28f0:	91 05       	cpc	r25, r1
    28f2:	34 f4       	brge	.+12     	; 0x2900 <DIO_getPinValueWithoutPointer+0x4e>
    28f4:	2c 81       	ldd	r18, Y+4	; 0x04
    28f6:	3d 81       	ldd	r19, Y+5	; 0x05
    28f8:	21 15       	cp	r18, r1
    28fa:	31 05       	cpc	r19, r1
    28fc:	61 f0       	breq	.+24     	; 0x2916 <DIO_getPinValueWithoutPointer+0x64>
    28fe:	52 c0       	rjmp	.+164    	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
    2900:	4c 81       	ldd	r20, Y+4	; 0x04
    2902:	5d 81       	ldd	r21, Y+5	; 0x05
    2904:	42 30       	cpi	r20, 0x02	; 2
    2906:	51 05       	cpc	r21, r1
    2908:	51 f1       	breq	.+84     	; 0x295e <DIO_getPinValueWithoutPointer+0xac>
    290a:	8c 81       	ldd	r24, Y+4	; 0x04
    290c:	9d 81       	ldd	r25, Y+5	; 0x05
    290e:	83 30       	cpi	r24, 0x03	; 3
    2910:	91 05       	cpc	r25, r1
    2912:	b9 f1       	breq	.+110    	; 0x2982 <DIO_getPinValueWithoutPointer+0xd0>
    2914:	47 c0       	rjmp	.+142    	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    2916:	e9 e3       	ldi	r30, 0x39	; 57
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a9 01       	movw	r20, r18
    2928:	02 c0       	rjmp	.+4      	; 0x292e <DIO_getPinValueWithoutPointer+0x7c>
    292a:	55 95       	asr	r21
    292c:	47 95       	ror	r20
    292e:	8a 95       	dec	r24
    2930:	e2 f7       	brpl	.-8      	; 0x292a <DIO_getPinValueWithoutPointer+0x78>
    2932:	ca 01       	movw	r24, r20
    2934:	81 70       	andi	r24, 0x01	; 1
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	35 c0       	rjmp	.+106    	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    293a:	e6 e3       	ldi	r30, 0x36	; 54
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a9 01       	movw	r20, r18
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <DIO_getPinValueWithoutPointer+0xa0>
    294e:	55 95       	asr	r21
    2950:	47 95       	ror	r20
    2952:	8a 95       	dec	r24
    2954:	e2 f7       	brpl	.-8      	; 0x294e <DIO_getPinValueWithoutPointer+0x9c>
    2956:	ca 01       	movw	r24, r20
    2958:	81 70       	andi	r24, 0x01	; 1
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	23 c0       	rjmp	.+70     	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    295e:	e3 e3       	ldi	r30, 0x33	; 51
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	88 2f       	mov	r24, r24
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a9 01       	movw	r20, r18
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <DIO_getPinValueWithoutPointer+0xc4>
    2972:	55 95       	asr	r21
    2974:	47 95       	ror	r20
    2976:	8a 95       	dec	r24
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <DIO_getPinValueWithoutPointer+0xc0>
    297a:	ca 01       	movw	r24, r20
    297c:	81 70       	andi	r24, 0x01	; 1
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	11 c0       	rjmp	.+34     	; 0x29a4 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    2982:	e0 e3       	ldi	r30, 0x30	; 48
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	88 2f       	mov	r24, r24
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a9 01       	movw	r20, r18
    2994:	02 c0       	rjmp	.+4      	; 0x299a <DIO_getPinValueWithoutPointer+0xe8>
    2996:	55 95       	asr	r21
    2998:	47 95       	ror	r20
    299a:	8a 95       	dec	r24
    299c:	e2 f7       	brpl	.-8      	; 0x2996 <DIO_getPinValueWithoutPointer+0xe4>
    299e:	ca 01       	movw	r24, r20
    29a0:	81 70       	andi	r24, 0x01	; 1
    29a2:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	2d 97       	sbiw	r28, 0x0d	; 13
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	3c 87       	std	Y+12, r19	; 0x0c
    29d6:	2b 87       	std	Y+11, r18	; 0x0b
    29d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29da:	9c 85       	ldd	r25, Y+12	; 0x0c
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	91 05       	cpc	r25, r1
    29e0:	71 f1       	breq	.+92     	; 0x2a3e <DIO_u8SetPortDirection+0x88>
    29e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    29e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    29e6:	22 30       	cpi	r18, 0x02	; 2
    29e8:	31 05       	cpc	r19, r1
    29ea:	2c f4       	brge	.+10     	; 0x29f6 <DIO_u8SetPortDirection+0x40>
    29ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    29ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	69 f0       	breq	.+26     	; 0x2a0e <DIO_u8SetPortDirection+0x58>
    29f4:	6b c0       	rjmp	.+214    	; 0x2acc <DIO_u8SetPortDirection+0x116>
    29f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    29f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    29fa:	22 30       	cpi	r18, 0x02	; 2
    29fc:	31 05       	cpc	r19, r1
    29fe:	b9 f1       	breq	.+110    	; 0x2a6e <DIO_u8SetPortDirection+0xb8>
    2a00:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a02:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a04:	83 30       	cpi	r24, 0x03	; 3
    2a06:	91 05       	cpc	r25, r1
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <DIO_u8SetPortDirection+0x56>
    2a0a:	49 c0       	rjmp	.+146    	; 0x2a9e <DIO_u8SetPortDirection+0xe8>
    2a0c:	5f c0       	rjmp	.+190    	; 0x2acc <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	3a 87       	std	Y+10, r19	; 0x0a
    2a16:	29 87       	std	Y+9, r18	; 0x09
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	31 f0       	breq	.+12     	; 0x2a2c <DIO_u8SetPortDirection+0x76>
    2a20:	29 85       	ldd	r18, Y+9	; 0x09
    2a22:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a24:	21 30       	cpi	r18, 0x01	; 1
    2a26:	31 05       	cpc	r19, r1
    2a28:	29 f0       	breq	.+10     	; 0x2a34 <DIO_u8SetPortDirection+0x7e>
    2a2a:	50 c0       	rjmp	.+160    	; 0x2acc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    2a2c:	ea e3       	ldi	r30, 0x3A	; 58
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	10 82       	st	Z, r1
    2a32:	4c c0       	rjmp	.+152    	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    2a34:	ea e3       	ldi	r30, 0x3A	; 58
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	80 83       	st	Z, r24
    2a3c:	47 c0       	rjmp	.+142    	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	38 87       	std	Y+8, r19	; 0x08
    2a46:	2f 83       	std	Y+7, r18	; 0x07
    2a48:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4a:	98 85       	ldd	r25, Y+8	; 0x08
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	31 f0       	breq	.+12     	; 0x2a5c <DIO_u8SetPortDirection+0xa6>
    2a50:	2f 81       	ldd	r18, Y+7	; 0x07
    2a52:	38 85       	ldd	r19, Y+8	; 0x08
    2a54:	21 30       	cpi	r18, 0x01	; 1
    2a56:	31 05       	cpc	r19, r1
    2a58:	29 f0       	breq	.+10     	; 0x2a64 <DIO_u8SetPortDirection+0xae>
    2a5a:	38 c0       	rjmp	.+112    	; 0x2acc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2a5c:	e7 e3       	ldi	r30, 0x37	; 55
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	10 82       	st	Z, r1
    2a62:	34 c0       	rjmp	.+104    	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2a64:	e7 e3       	ldi	r30, 0x37	; 55
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	8f ef       	ldi	r24, 0xFF	; 255
    2a6a:	80 83       	st	Z, r24
    2a6c:	2f c0       	rjmp	.+94     	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	3e 83       	std	Y+6, r19	; 0x06
    2a76:	2d 83       	std	Y+5, r18	; 0x05
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	31 f0       	breq	.+12     	; 0x2a8c <DIO_u8SetPortDirection+0xd6>
    2a80:	2d 81       	ldd	r18, Y+5	; 0x05
    2a82:	3e 81       	ldd	r19, Y+6	; 0x06
    2a84:	21 30       	cpi	r18, 0x01	; 1
    2a86:	31 05       	cpc	r19, r1
    2a88:	29 f0       	breq	.+10     	; 0x2a94 <DIO_u8SetPortDirection+0xde>
    2a8a:	20 c0       	rjmp	.+64     	; 0x2acc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2a8c:	e4 e3       	ldi	r30, 0x34	; 52
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	10 82       	st	Z, r1
    2a92:	1c c0       	rjmp	.+56     	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    2a94:	e4 e3       	ldi	r30, 0x34	; 52
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	80 83       	st	Z, r24
    2a9c:	17 c0       	rjmp	.+46     	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	3c 83       	std	Y+4, r19	; 0x04
    2aa6:	2b 83       	std	Y+3, r18	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	31 f0       	breq	.+12     	; 0x2abc <DIO_u8SetPortDirection+0x106>
    2ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab4:	21 30       	cpi	r18, 0x01	; 1
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	29 f0       	breq	.+10     	; 0x2ac4 <DIO_u8SetPortDirection+0x10e>
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2abc:	e1 e3       	ldi	r30, 0x31	; 49
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	10 82       	st	Z, r1
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    2ac4:	e1 e3       	ldi	r30, 0x31	; 49
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2acc:	2d 96       	adiw	r28, 0x0d	; 13
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	2d 97       	sbiw	r28, 0x0d	; 13
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	8a 83       	std	Y+2, r24	; 0x02
    2af4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	84 30       	cpi	r24, 0x04	; 4
    2afe:	08 f0       	brcs	.+2      	; 0x2b02 <DIO_u8SetPortValue+0x24>
    2b00:	80 c0       	rjmp	.+256    	; 0x2c02 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	3d 87       	std	Y+13, r19	; 0x0d
    2b0a:	2c 87       	std	Y+12, r18	; 0x0c
    2b0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	71 f1       	breq	.+92     	; 0x2b72 <DIO_u8SetPortValue+0x94>
    2b16:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b18:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b1a:	22 30       	cpi	r18, 0x02	; 2
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <DIO_u8SetPortValue+0x4c>
    2b20:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b22:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f0       	breq	.+26     	; 0x2b42 <DIO_u8SetPortValue+0x64>
    2b28:	6d c0       	rjmp	.+218    	; 0x2c04 <DIO_u8SetPortValue+0x126>
    2b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	31 05       	cpc	r19, r1
    2b32:	b9 f1       	breq	.+110    	; 0x2ba2 <DIO_u8SetPortValue+0xc4>
    2b34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <DIO_u8SetPortValue+0x62>
    2b3e:	49 c0       	rjmp	.+146    	; 0x2bd2 <DIO_u8SetPortValue+0xf4>
    2b40:	61 c0       	rjmp	.+194    	; 0x2c04 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	3b 87       	std	Y+11, r19	; 0x0b
    2b4a:	2a 87       	std	Y+10, r18	; 0x0a
    2b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	31 f0       	breq	.+12     	; 0x2b60 <DIO_u8SetPortValue+0x82>
    2b54:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b56:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b58:	21 30       	cpi	r18, 0x01	; 1
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	29 f0       	breq	.+10     	; 0x2b68 <DIO_u8SetPortValue+0x8a>
    2b5e:	52 c0       	rjmp	.+164    	; 0x2c04 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    2b60:	eb e3       	ldi	r30, 0x3B	; 59
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	10 82       	st	Z, r1
    2b66:	4e c0       	rjmp	.+156    	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2b68:	eb e3       	ldi	r30, 0x3B	; 59
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	80 83       	st	Z, r24
    2b70:	49 c0       	rjmp	.+146    	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	39 87       	std	Y+9, r19	; 0x09
    2b7a:	28 87       	std	Y+8, r18	; 0x08
    2b7c:	88 85       	ldd	r24, Y+8	; 0x08
    2b7e:	99 85       	ldd	r25, Y+9	; 0x09
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <DIO_u8SetPortValue+0xb2>
    2b84:	28 85       	ldd	r18, Y+8	; 0x08
    2b86:	39 85       	ldd	r19, Y+9	; 0x09
    2b88:	21 30       	cpi	r18, 0x01	; 1
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <DIO_u8SetPortValue+0xba>
    2b8e:	3a c0       	rjmp	.+116    	; 0x2c04 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    2b90:	e8 e3       	ldi	r30, 0x38	; 56
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	10 82       	st	Z, r1
    2b96:	36 c0       	rjmp	.+108    	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2b98:	e8 e3       	ldi	r30, 0x38	; 56
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	80 83       	st	Z, r24
    2ba0:	31 c0       	rjmp	.+98     	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	3f 83       	std	Y+7, r19	; 0x07
    2baa:	2e 83       	std	Y+6, r18	; 0x06
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	31 f0       	breq	.+12     	; 0x2bc0 <DIO_u8SetPortValue+0xe2>
    2bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    2bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    2bb8:	21 30       	cpi	r18, 0x01	; 1
    2bba:	31 05       	cpc	r19, r1
    2bbc:	29 f0       	breq	.+10     	; 0x2bc8 <DIO_u8SetPortValue+0xea>
    2bbe:	22 c0       	rjmp	.+68     	; 0x2c04 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2bc0:	e5 e3       	ldi	r30, 0x35	; 53
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	10 82       	st	Z, r1
    2bc6:	1e c0       	rjmp	.+60     	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2bc8:	e5 e3       	ldi	r30, 0x35	; 53
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	80 83       	st	Z, r24
    2bd0:	19 c0       	rjmp	.+50     	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	3d 83       	std	Y+5, r19	; 0x05
    2bda:	2c 83       	std	Y+4, r18	; 0x04
    2bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bde:	9d 81       	ldd	r25, Y+5	; 0x05
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	31 f0       	breq	.+12     	; 0x2bf0 <DIO_u8SetPortValue+0x112>
    2be4:	2c 81       	ldd	r18, Y+4	; 0x04
    2be6:	3d 81       	ldd	r19, Y+5	; 0x05
    2be8:	21 30       	cpi	r18, 0x01	; 1
    2bea:	31 05       	cpc	r19, r1
    2bec:	29 f0       	breq	.+10     	; 0x2bf8 <DIO_u8SetPortValue+0x11a>
    2bee:	0a c0       	rjmp	.+20     	; 0x2c04 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    2bf0:	e2 e3       	ldi	r30, 0x32	; 50
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	10 82       	st	Z, r1
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2bf8:	e2 e3       	ldi	r30, 0x32	; 50
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	80 83       	st	Z, r24
    2c00:	01 c0       	rjmp	.+2      	; 0x2c04 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2c02:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c06:	2d 96       	adiw	r28, 0x0d	; 13
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <DIO_u8GetPortValue+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <DIO_u8GetPortValue+0x8>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <DIO_u8GetPortValue+0xa>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	8a 83       	std	Y+2, r24	; 0x02
    2c28:	7c 83       	std	Y+4, r23	; 0x04
    2c2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	84 30       	cpi	r24, 0x04	; 4
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <DIO_u8GetPortValue+0x20>
    2c36:	3f c0       	rjmp	.+126    	; 0x2cb6 <DIO_u8GetPortValue+0x9e>
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	d9 f1       	breq	.+118    	; 0x2cb6 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	3e 83       	std	Y+6, r19	; 0x06
    2c48:	2d 83       	std	Y+5, r18	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	91 05       	cpc	r25, r1
    2c52:	e1 f0       	breq	.+56     	; 0x2c8c <DIO_u8GetPortValue+0x74>
    2c54:	2d 81       	ldd	r18, Y+5	; 0x05
    2c56:	3e 81       	ldd	r19, Y+6	; 0x06
    2c58:	22 30       	cpi	r18, 0x02	; 2
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	2c f4       	brge	.+10     	; 0x2c68 <DIO_u8GetPortValue+0x50>
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	61 f0       	breq	.+24     	; 0x2c7e <DIO_u8GetPortValue+0x66>
    2c66:	28 c0       	rjmp	.+80     	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
    2c68:	2d 81       	ldd	r18, Y+5	; 0x05
    2c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c6c:	22 30       	cpi	r18, 0x02	; 2
    2c6e:	31 05       	cpc	r19, r1
    2c70:	a1 f0       	breq	.+40     	; 0x2c9a <DIO_u8GetPortValue+0x82>
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	83 30       	cpi	r24, 0x03	; 3
    2c78:	91 05       	cpc	r25, r1
    2c7a:	b1 f0       	breq	.+44     	; 0x2ca8 <DIO_u8GetPortValue+0x90>
    2c7c:	1d c0       	rjmp	.+58     	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2c7e:	e9 e3       	ldi	r30, 0x39	; 57
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	eb 81       	ldd	r30, Y+3	; 0x03
    2c86:	fc 81       	ldd	r31, Y+4	; 0x04
    2c88:	80 83       	st	Z, r24
    2c8a:	16 c0       	rjmp	.+44     	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2c8c:	e6 e3       	ldi	r30, 0x36	; 54
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	eb 81       	ldd	r30, Y+3	; 0x03
    2c94:	fc 81       	ldd	r31, Y+4	; 0x04
    2c96:	80 83       	st	Z, r24
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2c9a:	e3 e3       	ldi	r30, 0x33	; 51
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca4:	80 83       	st	Z, r24
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2ca8:	e0 e3       	ldi	r30, 0x30	; 48
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	80 83       	st	Z, r24
    2cb4:	01 c0       	rjmp	.+2      	; 0x2cb8 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2cb6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cba:	26 96       	adiw	r28, 0x06	; 6
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2cd4:	a7 e2       	ldi	r26, 0x27	; 39
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e7 e2       	ldi	r30, 0x27	; 39
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	8f 77       	andi	r24, 0x7F	; 127
    2ce0:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2ce2:	a7 e2       	ldi	r26, 0x27	; 39
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e7 e2       	ldi	r30, 0x27	; 39
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	80 64       	ori	r24, 0x40	; 64
    2cee:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2cf0:	a7 e2       	ldi	r26, 0x27	; 39
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e7 e2       	ldi	r30, 0x27	; 39
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8f 7d       	andi	r24, 0xDF	; 223
    2cfc:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2cfe:	a6 e2       	ldi	r26, 0x26	; 38
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e6 e2       	ldi	r30, 0x26	; 38
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	8f 7d       	andi	r24, 0xDF	; 223
    2d0a:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2d0c:	a6 e2       	ldi	r26, 0x26	; 38
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e6 e2       	ldi	r30, 0x26	; 38
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	84 60       	ori	r24, 0x04	; 4
    2d18:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2d1a:	a6 e2       	ldi	r26, 0x26	; 38
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e6 e2       	ldi	r30, 0x26	; 38
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	82 60       	ori	r24, 0x02	; 2
    2d26:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2d28:	a6 e2       	ldi	r26, 0x26	; 38
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e6 e2       	ldi	r30, 0x26	; 38
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8e 7f       	andi	r24, 0xFE	; 254
    2d34:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2d36:	a6 e2       	ldi	r26, 0x26	; 38
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e6 e2       	ldi	r30, 0x26	; 38
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	8c 93       	st	X, r24

}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	28 97       	sbiw	r28, 0x08	; 8
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	8e 83       	std	Y+6, r24	; 0x06
    2d60:	78 87       	std	Y+8, r23	; 0x08
    2d62:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2d68:	19 82       	std	Y+1, r1	; 0x01
    2d6a:	1a 82       	std	Y+2, r1	; 0x02
    2d6c:	1b 82       	std	Y+3, r1	; 0x03
    2d6e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2d70:	8e 81       	ldd	r24, Y+6	; 0x06
    2d72:	80 32       	cpi	r24, 0x20	; 32
    2d74:	08 f0       	brcs	.+2      	; 0x2d78 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2d76:	5b c0       	rjmp	.+182    	; 0x2e2e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2d78:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7a:	98 85       	ldd	r25, Y+8	; 0x08
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2d80:	56 c0       	rjmp	.+172    	; 0x2e2e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2d82:	a7 e2       	ldi	r26, 0x27	; 39
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e7 e2       	ldi	r30, 0x27	; 39
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 7e       	andi	r24, 0xE0	; 224
    2d8e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2d90:	a7 e2       	ldi	r26, 0x27	; 39
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e7 e2       	ldi	r30, 0x27	; 39
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	90 81       	ld	r25, Z
    2d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9c:	89 2b       	or	r24, r25
    2d9e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2da0:	a6 e2       	ldi	r26, 0x26	; 38
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e6 e2       	ldi	r30, 0x26	; 38
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	80 64       	ori	r24, 0x40	; 64
    2dac:	8c 93       	st	X, r24
    2dae:	0b c0       	rjmp	.+22     	; 0x2dc6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	ab 81       	ldd	r26, Y+3	; 0x03
    2db6:	bc 81       	ldd	r27, Y+4	; 0x04
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	a1 1d       	adc	r26, r1
    2dbc:	b1 1d       	adc	r27, r1
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	ab 83       	std	Y+3, r26	; 0x03
    2dc4:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2dc6:	e6 e2       	ldi	r30, 0x26	; 38
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	82 95       	swap	r24
    2dce:	8f 70       	andi	r24, 0x0F	; 15
    2dd0:	88 2f       	mov	r24, r24
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	81 70       	andi	r24, 0x01	; 1
    2dd6:	90 70       	andi	r25, 0x00	; 0
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	61 f4       	brne	.+24     	; 0x2df4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	ab 81       	ldd	r26, Y+3	; 0x03
    2de2:	bc 81       	ldd	r27, Y+4	; 0x04
    2de4:	80 35       	cpi	r24, 0x50	; 80
    2de6:	23 ec       	ldi	r18, 0xC3	; 195
    2de8:	92 07       	cpc	r25, r18
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	a2 07       	cpc	r26, r18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	b2 07       	cpc	r27, r18
    2df2:	f0 f2       	brcs	.-68     	; 0x2db0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2df4:	e6 e2       	ldi	r30, 0x26	; 38
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	82 95       	swap	r24
    2dfc:	8f 70       	andi	r24, 0x0F	; 15
    2dfe:	88 2f       	mov	r24, r24
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	90 70       	andi	r25, 0x00	; 0
    2e06:	88 23       	and	r24, r24
    2e08:	81 f0       	breq	.+32     	; 0x2e2a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2e0a:	a6 e2       	ldi	r26, 0x26	; 38
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e6 e2       	ldi	r30, 0x26	; 38
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	80 61       	ori	r24, 0x10	; 16
    2e16:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2e18:	e4 e2       	ldi	r30, 0x24	; 36
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	ef 81       	ldd	r30, Y+7	; 0x07
    2e22:	f8 85       	ldd	r31, Y+8	; 0x08
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2e2a:	1d 82       	std	Y+5, r1	; 0x05
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e2e:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2e32:	28 96       	adiw	r28, 0x08	; 8
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	8a 83       	std	Y+2, r24	; 0x02
    2e52:	7c 83       	std	Y+4, r23	; 0x04
    2e54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	80 32       	cpi	r24, 0x20	; 32
    2e5e:	78 f5       	brcc	.+94     	; 0x2ebe <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	59 f1       	breq	.+86     	; 0x2ebe <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2e68:	80 91 94 01 	lds	r24, 0x0194
    2e6c:	88 23       	and	r24, r24
    2e6e:	39 f5       	brne	.+78     	; 0x2ebe <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	80 93 94 01 	sts	0x0194, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	90 93 93 01 	sts	0x0193, r25
    2e7e:	80 93 92 01 	sts	0x0192, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2e82:	a6 e2       	ldi	r26, 0x26	; 38
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e6 e2       	ldi	r30, 0x26	; 38
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 60       	ori	r24, 0x08	; 8
    2e8e:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2e90:	a7 e2       	ldi	r26, 0x27	; 39
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e7 e2       	ldi	r30, 0x27	; 39
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 7e       	andi	r24, 0xE0	; 224
    2e9c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2e9e:	a7 e2       	ldi	r26, 0x27	; 39
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e7 e2       	ldi	r30, 0x27	; 39
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	90 81       	ld	r25, Z
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	89 2b       	or	r24, r25
    2eac:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2eae:	a6 e2       	ldi	r26, 0x26	; 38
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e6 e2       	ldi	r30, 0x26	; 38
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 64       	ori	r24, 0x40	; 64
    2eba:	8c 93       	st	X, r24
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ebe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <ADC_u8GetADCRegValue+0x6>
    2ed6:	0f 92       	push	r0
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	9b 83       	std	Y+3, r25	; 0x03
    2ede:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	39 f0       	breq	.+14     	; 0x2efa <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2eec:	e4 e2       	ldi	r30, 0x24	; 36
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	9b 83       	std	Y+3, r25	; 0x03
    2ef6:	8a 83       	std	Y+2, r24	; 0x02
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2efa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2f0a:	1f 92       	push	r1
    2f0c:	0f 92       	push	r0
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	0f 92       	push	r0
    2f12:	11 24       	eor	r1, r1
    2f14:	2f 93       	push	r18
    2f16:	3f 93       	push	r19
    2f18:	4f 93       	push	r20
    2f1a:	5f 93       	push	r21
    2f1c:	6f 93       	push	r22
    2f1e:	7f 93       	push	r23
    2f20:	8f 93       	push	r24
    2f22:	9f 93       	push	r25
    2f24:	af 93       	push	r26
    2f26:	bf 93       	push	r27
    2f28:	ef 93       	push	r30
    2f2a:	ff 93       	push	r31
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2f34:	80 91 92 01 	lds	r24, 0x0192
    2f38:	90 91 93 01 	lds	r25, 0x0193
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	99 f0       	breq	.+38     	; 0x2f66 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2f40:	10 92 94 01 	sts	0x0194, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2f44:	a6 e2       	ldi	r26, 0x26	; 38
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e6 e2       	ldi	r30, 0x26	; 38
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	87 7f       	andi	r24, 0xF7	; 247
    2f50:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2f52:	20 91 92 01 	lds	r18, 0x0192
    2f56:	30 91 93 01 	lds	r19, 0x0193
    2f5a:	e4 e2       	ldi	r30, 0x24	; 36
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	f9 01       	movw	r30, r18
    2f64:	09 95       	icall
	}
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	ff 91       	pop	r31
    2f6c:	ef 91       	pop	r30
    2f6e:	bf 91       	pop	r27
    2f70:	af 91       	pop	r26
    2f72:	9f 91       	pop	r25
    2f74:	8f 91       	pop	r24
    2f76:	7f 91       	pop	r23
    2f78:	6f 91       	pop	r22
    2f7a:	5f 91       	pop	r21
    2f7c:	4f 91       	pop	r20
    2f7e:	3f 91       	pop	r19
    2f80:	2f 91       	pop	r18
    2f82:	0f 90       	pop	r0
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	0f 90       	pop	r0
    2f88:	1f 90       	pop	r1
    2f8a:	18 95       	reti

00002f8c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2f94:	83 e0       	ldi	r24, 0x03	; 3
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	62 e0       	ldi	r22, 0x02	; 2
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2fb2:	83 e0       	ldi	r24, 0x03	; 3
    2fb4:	63 e0       	ldi	r22, 0x03	; 3
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
}
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <ActivatePins1+0x6>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <ActivatePins1+0x8>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	89 83       	std	Y+1, r24	; 0x01
    2fd0:	6a 83       	std	Y+2, r22	; 0x02
    2fd2:	4b 83       	std	Y+3, r20	; 0x03
    2fd4:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	49 81       	ldd	r20, Y+1	; 0x01
    2fdc:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
    2fe4:	4a 81       	ldd	r20, Y+2	; 0x02
    2fe6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	62 e0       	ldi	r22, 0x02	; 2
    2fee:	4b 81       	ldd	r20, Y+3	; 0x03
    2ff0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	63 e0       	ldi	r22, 0x03	; 3
    2ff8:	4c 81       	ldd	r20, Y+4	; 0x04
    2ffa:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <ActivatePins2+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <ActivatePins2+0x8>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	6a 83       	std	Y+2, r22	; 0x02
    301c:	4b 83       	std	Y+3, r20	; 0x03
    301e:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	63 e0       	ldi	r22, 0x03	; 3
    3024:	4c 81       	ldd	r20, Y+4	; 0x04
    3026:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	62 e0       	ldi	r22, 0x02	; 2
    302e:	4b 81       	ldd	r20, Y+3	; 0x03
    3030:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	4a 81       	ldd	r20, Y+2	; 0x02
    303a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	49 81       	ldd	r20, Y+1	; 0x01
    3044:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	29 97       	sbiw	r28, 0x09	; 9
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    3070:	29 81       	ldd	r18, Y+1	; 0x01
    3072:	3a 81       	ldd	r19, Y+2	; 0x02
    3074:	39 87       	std	Y+9, r19	; 0x09
    3076:	28 87       	std	Y+8, r18	; 0x08
    3078:	88 85       	ldd	r24, Y+8	; 0x08
    307a:	99 85       	ldd	r25, Y+9	; 0x09
    307c:	8a 35       	cpi	r24, 0x5A	; 90
    307e:	91 05       	cpc	r25, r1
    3080:	31 f0       	breq	.+12     	; 0x308e <SelectStepAngle+0x38>
    3082:	28 85       	ldd	r18, Y+8	; 0x08
    3084:	39 85       	ldd	r19, Y+9	; 0x09
    3086:	24 3b       	cpi	r18, 0xB4	; 180
    3088:	31 05       	cpc	r19, r1
    308a:	f1 f0       	breq	.+60     	; 0x30c8 <SelectStepAngle+0x72>
    308c:	39 c0       	rjmp	.+114    	; 0x3100 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	3f 83       	std	Y+7, r19	; 0x07
    3096:	2e 83       	std	Y+6, r18	; 0x06
    3098:	8e 81       	ldd	r24, Y+6	; 0x06
    309a:	9f 81       	ldd	r25, Y+7	; 0x07
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	31 f0       	breq	.+12     	; 0x30ac <SelectStepAngle+0x56>
    30a0:	2e 81       	ldd	r18, Y+6	; 0x06
    30a2:	3f 81       	ldd	r19, Y+7	; 0x07
    30a4:	21 30       	cpi	r18, 0x01	; 1
    30a6:	31 05       	cpc	r19, r1
    30a8:	41 f0       	breq	.+16     	; 0x30ba <SelectStepAngle+0x64>
    30aa:	2a c0       	rjmp	.+84     	; 0x3100 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	21 e0       	ldi	r18, 0x01	; 1
    30b4:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <ActivatePins1>
    30b8:	23 c0       	rjmp	.+70     	; 0x3100 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	61 e0       	ldi	r22, 0x01	; 1
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	0e 94 06 18 	call	0x300c	; 0x300c <ActivatePins2>
    30c6:	1c c0       	rjmp	.+56     	; 0x3100 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	3d 83       	std	Y+5, r19	; 0x05
    30d0:	2c 83       	std	Y+4, r18	; 0x04
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	9d 81       	ldd	r25, Y+5	; 0x05
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <SelectStepAngle+0x90>
    30da:	2c 81       	ldd	r18, Y+4	; 0x04
    30dc:	3d 81       	ldd	r19, Y+5	; 0x05
    30de:	21 30       	cpi	r18, 0x01	; 1
    30e0:	31 05       	cpc	r19, r1
    30e2:	41 f0       	breq	.+16     	; 0x30f4 <SelectStepAngle+0x9e>
    30e4:	0d c0       	rjmp	.+26     	; 0x3100 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	61 e0       	ldi	r22, 0x01	; 1
    30ea:	41 e0       	ldi	r20, 0x01	; 1
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	0e 94 06 18 	call	0x300c	; 0x300c <ActivatePins2>
    30f2:	06 c0       	rjmp	.+12     	; 0x3100 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <ActivatePins1>
						break;
				}
				break;
	}
}
    3100:	29 96       	adiw	r28, 0x09	; 9
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"

#define TIMERS_u16_OCR1A_REG			*((volatile u16 *)0x4A)

void Servo_Init(){
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    311a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <TIMERS_voidTimer1Init>
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <Servo_SetAngle+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <Servo_SetAngle+0x8>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCR1AValue = (Servo_Angle * 11) + 3005;
    3134:	4b 81       	ldd	r20, Y+3	; 0x03
    3136:	5c 81       	ldd	r21, Y+4	; 0x04
    3138:	ca 01       	movw	r24, r20
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	9c 01       	movw	r18, r24
    3140:	22 0f       	add	r18, r18
    3142:	33 1f       	adc	r19, r19
    3144:	22 0f       	add	r18, r18
    3146:	33 1f       	adc	r19, r19
    3148:	82 0f       	add	r24, r18
    314a:	93 1f       	adc	r25, r19
    314c:	84 0f       	add	r24, r20
    314e:	95 1f       	adc	r25, r21
    3150:	83 54       	subi	r24, 0x43	; 67
    3152:	94 4f       	sbci	r25, 0xF4	; 244
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Local_u16OCR1AValue);
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	9a 81       	ldd	r25, Y+2	; 0x02
    315c:	0e 94 00 0a 	call	0x1400	; 0x1400 <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	e9 97       	sbiw	r28, 0x39	; 57
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	64 e0       	ldi	r22, 0x04	; 4
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a0 e8       	ldi	r26, 0x80	; 128
    319a:	bf e3       	ldi	r27, 0x3F	; 63
    319c:	8d ab       	std	Y+53, r24	; 0x35
    319e:	9e ab       	std	Y+54, r25	; 0x36
    31a0:	af ab       	std	Y+55, r26	; 0x37
    31a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	6d a9       	ldd	r22, Y+53	; 0x35
    31a6:	7e a9       	ldd	r23, Y+54	; 0x36
    31a8:	8f a9       	ldd	r24, Y+55	; 0x37
    31aa:	98 ad       	ldd	r25, Y+56	; 0x38
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	4a e7       	ldi	r20, 0x7A	; 122
    31b2:	55 e4       	ldi	r21, 0x45	; 69
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	89 ab       	std	Y+49, r24	; 0x31
    31be:	9a ab       	std	Y+50, r25	; 0x32
    31c0:	ab ab       	std	Y+51, r26	; 0x33
    31c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31c4:	69 a9       	ldd	r22, Y+49	; 0x31
    31c6:	7a a9       	ldd	r23, Y+50	; 0x32
    31c8:	8b a9       	ldd	r24, Y+51	; 0x33
    31ca:	9c a9       	ldd	r25, Y+52	; 0x34
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	5f e3       	ldi	r21, 0x3F	; 63
    31d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31d8:	88 23       	and	r24, r24
    31da:	2c f4       	brge	.+10     	; 0x31e6 <LCD_sendCommand+0x78>
		__ticks = 1;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	98 ab       	std	Y+48, r25	; 0x30
    31e2:	8f a7       	std	Y+47, r24	; 0x2f
    31e4:	3f c0       	rjmp	.+126    	; 0x3264 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    31e6:	69 a9       	ldd	r22, Y+49	; 0x31
    31e8:	7a a9       	ldd	r23, Y+50	; 0x32
    31ea:	8b a9       	ldd	r24, Y+51	; 0x33
    31ec:	9c a9       	ldd	r25, Y+52	; 0x34
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	4c f5       	brge	.+82     	; 0x3250 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3200:	7e a9       	ldd	r23, Y+54	; 0x36
    3202:	8f a9       	ldd	r24, Y+55	; 0x37
    3204:	98 ad       	ldd	r25, Y+56	; 0x38
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e2       	ldi	r20, 0x20	; 32
    320c:	51 e4       	ldi	r21, 0x41	; 65
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	98 ab       	std	Y+48, r25	; 0x30
    3224:	8f a7       	std	Y+47, r24	; 0x2f
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <LCD_sendCommand+0xd8>
    3228:	80 e9       	ldi	r24, 0x90	; 144
    322a:	91 e0       	ldi	r25, 0x01	; 1
    322c:	9e a7       	std	Y+46, r25	; 0x2e
    322e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3230:	8d a5       	ldd	r24, Y+45	; 0x2d
    3232:	9e a5       	ldd	r25, Y+46	; 0x2e
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_sendCommand+0xc6>
    3238:	9e a7       	std	Y+46, r25	; 0x2e
    323a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	8f a5       	ldd	r24, Y+47	; 0x2f
    323e:	98 a9       	ldd	r25, Y+48	; 0x30
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	98 ab       	std	Y+48, r25	; 0x30
    3244:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3246:	8f a5       	ldd	r24, Y+47	; 0x2f
    3248:	98 a9       	ldd	r25, Y+48	; 0x30
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	69 f7       	brne	.-38     	; 0x3228 <LCD_sendCommand+0xba>
    324e:	14 c0       	rjmp	.+40     	; 0x3278 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	69 a9       	ldd	r22, Y+49	; 0x31
    3252:	7a a9       	ldd	r23, Y+50	; 0x32
    3254:	8b a9       	ldd	r24, Y+51	; 0x33
    3256:	9c a9       	ldd	r25, Y+52	; 0x34
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	98 ab       	std	Y+48, r25	; 0x30
    3262:	8f a7       	std	Y+47, r24	; 0x2f
    3264:	8f a5       	ldd	r24, Y+47	; 0x2f
    3266:	98 a9       	ldd	r25, Y+48	; 0x30
    3268:	9c a7       	std	Y+44, r25	; 0x2c
    326a:	8b a7       	std	Y+43, r24	; 0x2b
    326c:	8b a5       	ldd	r24, Y+43	; 0x2b
    326e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_sendCommand+0x102>
    3274:	9c a7       	std	Y+44, r25	; 0x2c
    3276:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	65 e0       	ldi	r22, 0x05	; 5
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	41 e0       	ldi	r20, 0x01	; 1
    3282:	50 e0       	ldi	r21, 0x00	; 0
    3284:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 e8       	ldi	r26, 0x80	; 128
    328e:	bf e3       	ldi	r27, 0x3F	; 63
    3290:	8f a3       	std	Y+39, r24	; 0x27
    3292:	98 a7       	std	Y+40, r25	; 0x28
    3294:	a9 a7       	std	Y+41, r26	; 0x29
    3296:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	6f a1       	ldd	r22, Y+39	; 0x27
    329a:	78 a5       	ldd	r23, Y+40	; 0x28
    329c:	89 a5       	ldd	r24, Y+41	; 0x29
    329e:	9a a5       	ldd	r25, Y+42	; 0x2a
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a e7       	ldi	r20, 0x7A	; 122
    32a6:	55 e4       	ldi	r21, 0x45	; 69
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8b a3       	std	Y+35, r24	; 0x23
    32b2:	9c a3       	std	Y+36, r25	; 0x24
    32b4:	ad a3       	std	Y+37, r26	; 0x25
    32b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32b8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ba:	7c a1       	ldd	r23, Y+36	; 0x24
    32bc:	8d a1       	ldd	r24, Y+37	; 0x25
    32be:	9e a1       	ldd	r25, Y+38	; 0x26
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <LCD_sendCommand+0x16c>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9a a3       	std	Y+34, r25	; 0x22
    32d6:	89 a3       	std	Y+33, r24	; 0x21
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    32da:	6b a1       	ldd	r22, Y+35	; 0x23
    32dc:	7c a1       	ldd	r23, Y+36	; 0x24
    32de:	8d a1       	ldd	r24, Y+37	; 0x25
    32e0:	9e a1       	ldd	r25, Y+38	; 0x26
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	6f a1       	ldd	r22, Y+39	; 0x27
    32f4:	78 a5       	ldd	r23, Y+40	; 0x28
    32f6:	89 a5       	ldd	r24, Y+41	; 0x29
    32f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9a a3       	std	Y+34, r25	; 0x22
    3318:	89 a3       	std	Y+33, r24	; 0x21
    331a:	0f c0       	rjmp	.+30     	; 0x333a <LCD_sendCommand+0x1cc>
    331c:	80 e9       	ldi	r24, 0x90	; 144
    331e:	91 e0       	ldi	r25, 0x01	; 1
    3320:	98 a3       	std	Y+32, r25	; 0x20
    3322:	8f 8f       	std	Y+31, r24	; 0x1f
    3324:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3326:	98 a1       	ldd	r25, Y+32	; 0x20
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <LCD_sendCommand+0x1ba>
    332c:	98 a3       	std	Y+32, r25	; 0x20
    332e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	89 a1       	ldd	r24, Y+33	; 0x21
    3332:	9a a1       	ldd	r25, Y+34	; 0x22
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9a a3       	std	Y+34, r25	; 0x22
    3338:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	89 a1       	ldd	r24, Y+33	; 0x21
    333c:	9a a1       	ldd	r25, Y+34	; 0x22
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <LCD_sendCommand+0x1ae>
    3342:	14 c0       	rjmp	.+40     	; 0x336c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6b a1       	ldd	r22, Y+35	; 0x23
    3346:	7c a1       	ldd	r23, Y+36	; 0x24
    3348:	8d a1       	ldd	r24, Y+37	; 0x25
    334a:	9e a1       	ldd	r25, Y+38	; 0x26
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9a a3       	std	Y+34, r25	; 0x22
    3356:	89 a3       	std	Y+33, r24	; 0x21
    3358:	89 a1       	ldd	r24, Y+33	; 0x21
    335a:	9a a1       	ldd	r25, Y+34	; 0x22
    335c:	9e 8f       	std	Y+30, r25	; 0x1e
    335e:	8d 8f       	std	Y+29, r24	; 0x1d
    3360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3362:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_sendCommand+0x1f6>
    3368:	9e 8f       	std	Y+30, r25	; 0x1e
    336a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    336c:	89 ad       	ldd	r24, Y+57	; 0x39
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	b9 01       	movw	r22, r18
    3378:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_setPortValue>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	a0 e8       	ldi	r26, 0x80	; 128
    3382:	bf e3       	ldi	r27, 0x3F	; 63
    3384:	89 8f       	std	Y+25, r24	; 0x19
    3386:	9a 8f       	std	Y+26, r25	; 0x1a
    3388:	ab 8f       	std	Y+27, r26	; 0x1b
    338a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338c:	69 8d       	ldd	r22, Y+25	; 0x19
    338e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	4a e7       	ldi	r20, 0x7A	; 122
    339a:	55 e4       	ldi	r21, 0x45	; 69
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8d 8b       	std	Y+21, r24	; 0x15
    33a6:	9e 8b       	std	Y+22, r25	; 0x16
    33a8:	af 8b       	std	Y+23, r26	; 0x17
    33aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ac:	6d 89       	ldd	r22, Y+21	; 0x15
    33ae:	7e 89       	ldd	r23, Y+22	; 0x16
    33b0:	8f 89       	ldd	r24, Y+23	; 0x17
    33b2:	98 8d       	ldd	r25, Y+24	; 0x18
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e8       	ldi	r20, 0x80	; 128
    33ba:	5f e3       	ldi	r21, 0x3F	; 63
    33bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c0:	88 23       	and	r24, r24
    33c2:	2c f4       	brge	.+10     	; 0x33ce <LCD_sendCommand+0x260>
		__ticks = 1;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 8b       	std	Y+20, r25	; 0x14
    33ca:	8b 8b       	std	Y+19, r24	; 0x13
    33cc:	3f c0       	rjmp	.+126    	; 0x344c <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    33ce:	6d 89       	ldd	r22, Y+21	; 0x15
    33d0:	7e 89       	ldd	r23, Y+22	; 0x16
    33d2:	8f 89       	ldd	r24, Y+23	; 0x17
    33d4:	98 8d       	ldd	r25, Y+24	; 0x18
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	4c f5       	brge	.+82     	; 0x3438 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e6:	69 8d       	ldd	r22, Y+25	; 0x19
    33e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
    340e:	0f c0       	rjmp	.+30     	; 0x342e <LCD_sendCommand+0x2c0>
    3410:	80 e9       	ldi	r24, 0x90	; 144
    3412:	91 e0       	ldi	r25, 0x01	; 1
    3414:	9a 8b       	std	Y+18, r25	; 0x12
    3416:	89 8b       	std	Y+17, r24	; 0x11
    3418:	89 89       	ldd	r24, Y+17	; 0x11
    341a:	9a 89       	ldd	r25, Y+18	; 0x12
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <LCD_sendCommand+0x2ae>
    3420:	9a 8b       	std	Y+18, r25	; 0x12
    3422:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	69 f7       	brne	.-38     	; 0x3410 <LCD_sendCommand+0x2a2>
    3436:	14 c0       	rjmp	.+40     	; 0x3460 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	6d 89       	ldd	r22, Y+21	; 0x15
    343a:	7e 89       	ldd	r23, Y+22	; 0x16
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9c 8b       	std	Y+20, r25	; 0x14
    344a:	8b 8b       	std	Y+19, r24	; 0x13
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	98 8b       	std	Y+16, r25	; 0x10
    3452:	8f 87       	std	Y+15, r24	; 0x0f
    3454:	8f 85       	ldd	r24, Y+15	; 0x0f
    3456:	98 89       	ldd	r25, Y+16	; 0x10
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <LCD_sendCommand+0x2ea>
    345c:	98 8b       	std	Y+16, r25	; 0x10
    345e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	65 e0       	ldi	r22, 0x05	; 5
    3466:	70 e0       	ldi	r23, 0x00	; 0
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	a0 e8       	ldi	r26, 0x80	; 128
    3476:	bf e3       	ldi	r27, 0x3F	; 63
    3478:	8b 87       	std	Y+11, r24	; 0x0b
    347a:	9c 87       	std	Y+12, r25	; 0x0c
    347c:	ad 87       	std	Y+13, r26	; 0x0d
    347e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3480:	6b 85       	ldd	r22, Y+11	; 0x0b
    3482:	7c 85       	ldd	r23, Y+12	; 0x0c
    3484:	8d 85       	ldd	r24, Y+13	; 0x0d
    3486:	9e 85       	ldd	r25, Y+14	; 0x0e
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	4a e7       	ldi	r20, 0x7A	; 122
    348e:	55 e4       	ldi	r21, 0x45	; 69
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	8f 83       	std	Y+7, r24	; 0x07
    349a:	98 87       	std	Y+8, r25	; 0x08
    349c:	a9 87       	std	Y+9, r26	; 0x09
    349e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e8       	ldi	r20, 0x80	; 128
    34ae:	5f e3       	ldi	r21, 0x3F	; 63
    34b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b4:	88 23       	and	r24, r24
    34b6:	2c f4       	brge	.+10     	; 0x34c2 <LCD_sendCommand+0x354>
		__ticks = 1;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	3f c0       	rjmp	.+126    	; 0x3540 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    34c2:	6f 81       	ldd	r22, Y+7	; 0x07
    34c4:	78 85       	ldd	r23, Y+8	; 0x08
    34c6:	89 85       	ldd	r24, Y+9	; 0x09
    34c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	3f ef       	ldi	r19, 0xFF	; 255
    34ce:	4f e7       	ldi	r20, 0x7F	; 127
    34d0:	57 e4       	ldi	r21, 0x47	; 71
    34d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d6:	18 16       	cp	r1, r24
    34d8:	4c f5       	brge	.+82     	; 0x352c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34da:	6b 85       	ldd	r22, Y+11	; 0x0b
    34dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34de:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	0f c0       	rjmp	.+30     	; 0x3522 <LCD_sendCommand+0x3b4>
    3504:	80 e9       	ldi	r24, 0x90	; 144
    3506:	91 e0       	ldi	r25, 0x01	; 1
    3508:	9c 83       	std	Y+4, r25	; 0x04
    350a:	8b 83       	std	Y+3, r24	; 0x03
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <LCD_sendCommand+0x3a2>
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	9e 83       	std	Y+6, r25	; 0x06
    3520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3522:	8d 81       	ldd	r24, Y+5	; 0x05
    3524:	9e 81       	ldd	r25, Y+6	; 0x06
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	69 f7       	brne	.-38     	; 0x3504 <LCD_sendCommand+0x396>
    352a:	14 c0       	rjmp	.+40     	; 0x3554 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352c:	6f 81       	ldd	r22, Y+7	; 0x07
    352e:	78 85       	ldd	r23, Y+8	; 0x08
    3530:	89 85       	ldd	r24, Y+9	; 0x09
    3532:	9a 85       	ldd	r25, Y+10	; 0x0a
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <LCD_sendCommand+0x3de>
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3554:	e9 96       	adiw	r28, 0x39	; 57
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	e9 97       	sbiw	r28, 0x39	; 57
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	64 e0       	ldi	r22, 0x04	; 4
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	41 e0       	ldi	r20, 0x01	; 1
    3586:	50 e0       	ldi	r21, 0x00	; 0
    3588:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	a0 e8       	ldi	r26, 0x80	; 128
    3592:	bf e3       	ldi	r27, 0x3F	; 63
    3594:	8d ab       	std	Y+53, r24	; 0x35
    3596:	9e ab       	std	Y+54, r25	; 0x36
    3598:	af ab       	std	Y+55, r26	; 0x37
    359a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6d a9       	ldd	r22, Y+53	; 0x35
    359e:	7e a9       	ldd	r23, Y+54	; 0x36
    35a0:	8f a9       	ldd	r24, Y+55	; 0x37
    35a2:	98 ad       	ldd	r25, Y+56	; 0x38
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a e7       	ldi	r20, 0x7A	; 122
    35aa:	55 e4       	ldi	r21, 0x45	; 69
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	89 ab       	std	Y+49, r24	; 0x31
    35b6:	9a ab       	std	Y+50, r25	; 0x32
    35b8:	ab ab       	std	Y+51, r26	; 0x33
    35ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35bc:	69 a9       	ldd	r22, Y+49	; 0x31
    35be:	7a a9       	ldd	r23, Y+50	; 0x32
    35c0:	8b a9       	ldd	r24, Y+51	; 0x33
    35c2:	9c a9       	ldd	r25, Y+52	; 0x34
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <LCD_displayCharacter+0x78>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	98 ab       	std	Y+48, r25	; 0x30
    35da:	8f a7       	std	Y+47, r24	; 0x2f
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    35de:	69 a9       	ldd	r22, Y+49	; 0x31
    35e0:	7a a9       	ldd	r23, Y+50	; 0x32
    35e2:	8b a9       	ldd	r24, Y+51	; 0x33
    35e4:	9c a9       	ldd	r25, Y+52	; 0x34
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6d a9       	ldd	r22, Y+53	; 0x35
    35f8:	7e a9       	ldd	r23, Y+54	; 0x36
    35fa:	8f a9       	ldd	r24, Y+55	; 0x37
    35fc:	98 ad       	ldd	r25, Y+56	; 0x38
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	98 ab       	std	Y+48, r25	; 0x30
    361c:	8f a7       	std	Y+47, r24	; 0x2f
    361e:	0f c0       	rjmp	.+30     	; 0x363e <LCD_displayCharacter+0xd8>
    3620:	80 e9       	ldi	r24, 0x90	; 144
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	9e a7       	std	Y+46, r25	; 0x2e
    3626:	8d a7       	std	Y+45, r24	; 0x2d
    3628:	8d a5       	ldd	r24, Y+45	; 0x2d
    362a:	9e a5       	ldd	r25, Y+46	; 0x2e
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <LCD_displayCharacter+0xc6>
    3630:	9e a7       	std	Y+46, r25	; 0x2e
    3632:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8f a5       	ldd	r24, Y+47	; 0x2f
    3636:	98 a9       	ldd	r25, Y+48	; 0x30
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	98 ab       	std	Y+48, r25	; 0x30
    363c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3640:	98 a9       	ldd	r25, Y+48	; 0x30
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <LCD_displayCharacter+0xba>
    3646:	14 c0       	rjmp	.+40     	; 0x3670 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	69 a9       	ldd	r22, Y+49	; 0x31
    364a:	7a a9       	ldd	r23, Y+50	; 0x32
    364c:	8b a9       	ldd	r24, Y+51	; 0x33
    364e:	9c a9       	ldd	r25, Y+52	; 0x34
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	98 ab       	std	Y+48, r25	; 0x30
    365a:	8f a7       	std	Y+47, r24	; 0x2f
    365c:	8f a5       	ldd	r24, Y+47	; 0x2f
    365e:	98 a9       	ldd	r25, Y+48	; 0x30
    3660:	9c a7       	std	Y+44, r25	; 0x2c
    3662:	8b a7       	std	Y+43, r24	; 0x2b
    3664:	8b a5       	ldd	r24, Y+43	; 0x2b
    3666:	9c a5       	ldd	r25, Y+44	; 0x2c
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_displayCharacter+0x102>
    366c:	9c a7       	std	Y+44, r25	; 0x2c
    366e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3670:	83 e0       	ldi	r24, 0x03	; 3
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	65 e0       	ldi	r22, 0x05	; 5
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e8       	ldi	r26, 0x80	; 128
    3686:	bf e3       	ldi	r27, 0x3F	; 63
    3688:	8f a3       	std	Y+39, r24	; 0x27
    368a:	98 a7       	std	Y+40, r25	; 0x28
    368c:	a9 a7       	std	Y+41, r26	; 0x29
    368e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3690:	6f a1       	ldd	r22, Y+39	; 0x27
    3692:	78 a5       	ldd	r23, Y+40	; 0x28
    3694:	89 a5       	ldd	r24, Y+41	; 0x29
    3696:	9a a5       	ldd	r25, Y+42	; 0x2a
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	4a e7       	ldi	r20, 0x7A	; 122
    369e:	55 e4       	ldi	r21, 0x45	; 69
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	8b a3       	std	Y+35, r24	; 0x23
    36aa:	9c a3       	std	Y+36, r25	; 0x24
    36ac:	ad a3       	std	Y+37, r26	; 0x25
    36ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36b0:	6b a1       	ldd	r22, Y+35	; 0x23
    36b2:	7c a1       	ldd	r23, Y+36	; 0x24
    36b4:	8d a1       	ldd	r24, Y+37	; 0x25
    36b6:	9e a1       	ldd	r25, Y+38	; 0x26
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e8       	ldi	r20, 0x80	; 128
    36be:	5f e3       	ldi	r21, 0x3F	; 63
    36c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c4:	88 23       	and	r24, r24
    36c6:	2c f4       	brge	.+10     	; 0x36d2 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	9a a3       	std	Y+34, r25	; 0x22
    36ce:	89 a3       	std	Y+33, r24	; 0x21
    36d0:	3f c0       	rjmp	.+126    	; 0x3750 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    36d2:	6b a1       	ldd	r22, Y+35	; 0x23
    36d4:	7c a1       	ldd	r23, Y+36	; 0x24
    36d6:	8d a1       	ldd	r24, Y+37	; 0x25
    36d8:	9e a1       	ldd	r25, Y+38	; 0x26
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	3f ef       	ldi	r19, 0xFF	; 255
    36de:	4f e7       	ldi	r20, 0x7F	; 127
    36e0:	57 e4       	ldi	r21, 0x47	; 71
    36e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36e6:	18 16       	cp	r1, r24
    36e8:	4c f5       	brge	.+82     	; 0x373c <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ea:	6f a1       	ldd	r22, Y+39	; 0x27
    36ec:	78 a5       	ldd	r23, Y+40	; 0x28
    36ee:	89 a5       	ldd	r24, Y+41	; 0x29
    36f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e2       	ldi	r20, 0x20	; 32
    36f8:	51 e4       	ldi	r21, 0x41	; 65
    36fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	bc 01       	movw	r22, r24
    3704:	cd 01       	movw	r24, r26
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	9a a3       	std	Y+34, r25	; 0x22
    3710:	89 a3       	std	Y+33, r24	; 0x21
    3712:	0f c0       	rjmp	.+30     	; 0x3732 <LCD_displayCharacter+0x1cc>
    3714:	80 e9       	ldi	r24, 0x90	; 144
    3716:	91 e0       	ldi	r25, 0x01	; 1
    3718:	98 a3       	std	Y+32, r25	; 0x20
    371a:	8f 8f       	std	Y+31, r24	; 0x1f
    371c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    371e:	98 a1       	ldd	r25, Y+32	; 0x20
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <LCD_displayCharacter+0x1ba>
    3724:	98 a3       	std	Y+32, r25	; 0x20
    3726:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3728:	89 a1       	ldd	r24, Y+33	; 0x21
    372a:	9a a1       	ldd	r25, Y+34	; 0x22
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	9a a3       	std	Y+34, r25	; 0x22
    3730:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3732:	89 a1       	ldd	r24, Y+33	; 0x21
    3734:	9a a1       	ldd	r25, Y+34	; 0x22
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	69 f7       	brne	.-38     	; 0x3714 <LCD_displayCharacter+0x1ae>
    373a:	14 c0       	rjmp	.+40     	; 0x3764 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373c:	6b a1       	ldd	r22, Y+35	; 0x23
    373e:	7c a1       	ldd	r23, Y+36	; 0x24
    3740:	8d a1       	ldd	r24, Y+37	; 0x25
    3742:	9e a1       	ldd	r25, Y+38	; 0x26
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9a a3       	std	Y+34, r25	; 0x22
    374e:	89 a3       	std	Y+33, r24	; 0x21
    3750:	89 a1       	ldd	r24, Y+33	; 0x21
    3752:	9a a1       	ldd	r25, Y+34	; 0x22
    3754:	9e 8f       	std	Y+30, r25	; 0x1e
    3756:	8d 8f       	std	Y+29, r24	; 0x1d
    3758:	8d 8d       	ldd	r24, Y+29	; 0x1d
    375a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <LCD_displayCharacter+0x1f6>
    3760:	9e 8f       	std	Y+30, r25	; 0x1e
    3762:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    3764:	89 ad       	ldd	r24, Y+57	; 0x39
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	82 e0       	ldi	r24, 0x02	; 2
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	b9 01       	movw	r22, r18
    3770:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_setPortValue>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a0 e8       	ldi	r26, 0x80	; 128
    377a:	bf e3       	ldi	r27, 0x3F	; 63
    377c:	89 8f       	std	Y+25, r24	; 0x19
    377e:	9a 8f       	std	Y+26, r25	; 0x1a
    3780:	ab 8f       	std	Y+27, r26	; 0x1b
    3782:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3784:	69 8d       	ldd	r22, Y+25	; 0x19
    3786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    378a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	4a e7       	ldi	r20, 0x7A	; 122
    3792:	55 e4       	ldi	r21, 0x45	; 69
    3794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8d 8b       	std	Y+21, r24	; 0x15
    379e:	9e 8b       	std	Y+22, r25	; 0x16
    37a0:	af 8b       	std	Y+23, r26	; 0x17
    37a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37a4:	6d 89       	ldd	r22, Y+21	; 0x15
    37a6:	7e 89       	ldd	r23, Y+22	; 0x16
    37a8:	8f 89       	ldd	r24, Y+23	; 0x17
    37aa:	98 8d       	ldd	r25, Y+24	; 0x18
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e8       	ldi	r20, 0x80	; 128
    37b2:	5f e3       	ldi	r21, 0x3F	; 63
    37b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37b8:	88 23       	and	r24, r24
    37ba:	2c f4       	brge	.+10     	; 0x37c6 <LCD_displayCharacter+0x260>
		__ticks = 1;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	9c 8b       	std	Y+20, r25	; 0x14
    37c2:	8b 8b       	std	Y+19, r24	; 0x13
    37c4:	3f c0       	rjmp	.+126    	; 0x3844 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    37c6:	6d 89       	ldd	r22, Y+21	; 0x15
    37c8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	98 8d       	ldd	r25, Y+24	; 0x18
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	3f ef       	ldi	r19, 0xFF	; 255
    37d2:	4f e7       	ldi	r20, 0x7F	; 127
    37d4:	57 e4       	ldi	r21, 0x47	; 71
    37d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37da:	18 16       	cp	r1, r24
    37dc:	4c f5       	brge	.+82     	; 0x3830 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37de:	69 8d       	ldd	r22, Y+25	; 0x19
    37e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e2       	ldi	r20, 0x20	; 32
    37ec:	51 e4       	ldi	r21, 0x41	; 65
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	9c 8b       	std	Y+20, r25	; 0x14
    3804:	8b 8b       	std	Y+19, r24	; 0x13
    3806:	0f c0       	rjmp	.+30     	; 0x3826 <LCD_displayCharacter+0x2c0>
    3808:	80 e9       	ldi	r24, 0x90	; 144
    380a:	91 e0       	ldi	r25, 0x01	; 1
    380c:	9a 8b       	std	Y+18, r25	; 0x12
    380e:	89 8b       	std	Y+17, r24	; 0x11
    3810:	89 89       	ldd	r24, Y+17	; 0x11
    3812:	9a 89       	ldd	r25, Y+18	; 0x12
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	f1 f7       	brne	.-4      	; 0x3814 <LCD_displayCharacter+0x2ae>
    3818:	9a 8b       	std	Y+18, r25	; 0x12
    381a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381c:	8b 89       	ldd	r24, Y+19	; 0x13
    381e:	9c 89       	ldd	r25, Y+20	; 0x14
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	9c 8b       	std	Y+20, r25	; 0x14
    3824:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3826:	8b 89       	ldd	r24, Y+19	; 0x13
    3828:	9c 89       	ldd	r25, Y+20	; 0x14
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	69 f7       	brne	.-38     	; 0x3808 <LCD_displayCharacter+0x2a2>
    382e:	14 c0       	rjmp	.+40     	; 0x3858 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3830:	6d 89       	ldd	r22, Y+21	; 0x15
    3832:	7e 89       	ldd	r23, Y+22	; 0x16
    3834:	8f 89       	ldd	r24, Y+23	; 0x17
    3836:	98 8d       	ldd	r25, Y+24	; 0x18
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9c 8b       	std	Y+20, r25	; 0x14
    3842:	8b 8b       	std	Y+19, r24	; 0x13
    3844:	8b 89       	ldd	r24, Y+19	; 0x13
    3846:	9c 89       	ldd	r25, Y+20	; 0x14
    3848:	98 8b       	std	Y+16, r25	; 0x10
    384a:	8f 87       	std	Y+15, r24	; 0x0f
    384c:	8f 85       	ldd	r24, Y+15	; 0x0f
    384e:	98 89       	ldd	r25, Y+16	; 0x10
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <LCD_displayCharacter+0x2ea>
    3854:	98 8b       	std	Y+16, r25	; 0x10
    3856:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3858:	83 e0       	ldi	r24, 0x03	; 3
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	65 e0       	ldi	r22, 0x05	; 5
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	40 e0       	ldi	r20, 0x00	; 0
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_setPinValue>
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a0 e8       	ldi	r26, 0x80	; 128
    386e:	bf e3       	ldi	r27, 0x3F	; 63
    3870:	8b 87       	std	Y+11, r24	; 0x0b
    3872:	9c 87       	std	Y+12, r25	; 0x0c
    3874:	ad 87       	std	Y+13, r26	; 0x0d
    3876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3878:	6b 85       	ldd	r22, Y+11	; 0x0b
    387a:	7c 85       	ldd	r23, Y+12	; 0x0c
    387c:	8d 85       	ldd	r24, Y+13	; 0x0d
    387e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	4a e7       	ldi	r20, 0x7A	; 122
    3886:	55 e4       	ldi	r21, 0x45	; 69
    3888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	8f 83       	std	Y+7, r24	; 0x07
    3892:	98 87       	std	Y+8, r25	; 0x08
    3894:	a9 87       	std	Y+9, r26	; 0x09
    3896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3898:	6f 81       	ldd	r22, Y+7	; 0x07
    389a:	78 85       	ldd	r23, Y+8	; 0x08
    389c:	89 85       	ldd	r24, Y+9	; 0x09
    389e:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e8       	ldi	r20, 0x80	; 128
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ac:	88 23       	and	r24, r24
    38ae:	2c f4       	brge	.+10     	; 0x38ba <LCD_displayCharacter+0x354>
		__ticks = 1;
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9e 83       	std	Y+6, r25	; 0x06
    38b6:	8d 83       	std	Y+5, r24	; 0x05
    38b8:	3f c0       	rjmp	.+126    	; 0x3938 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    38ba:	6f 81       	ldd	r22, Y+7	; 0x07
    38bc:	78 85       	ldd	r23, Y+8	; 0x08
    38be:	89 85       	ldd	r24, Y+9	; 0x09
    38c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	3f ef       	ldi	r19, 0xFF	; 255
    38c6:	4f e7       	ldi	r20, 0x7F	; 127
    38c8:	57 e4       	ldi	r21, 0x47	; 71
    38ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ce:	18 16       	cp	r1, r24
    38d0:	4c f5       	brge	.+82     	; 0x3924 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e2       	ldi	r20, 0x20	; 32
    38e0:	51 e4       	ldi	r21, 0x41	; 65
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	bc 01       	movw	r22, r24
    38ec:	cd 01       	movw	r24, r26
    38ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
    38fa:	0f c0       	rjmp	.+30     	; 0x391a <LCD_displayCharacter+0x3b4>
    38fc:	80 e9       	ldi	r24, 0x90	; 144
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	9c 83       	std	Y+4, r25	; 0x04
    3902:	8b 83       	std	Y+3, r24	; 0x03
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	9c 81       	ldd	r25, Y+4	; 0x04
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <LCD_displayCharacter+0x3a2>
    390c:	9c 83       	std	Y+4, r25	; 0x04
    390e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	9e 81       	ldd	r25, Y+6	; 0x06
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	9e 83       	std	Y+6, r25	; 0x06
    3918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391a:	8d 81       	ldd	r24, Y+5	; 0x05
    391c:	9e 81       	ldd	r25, Y+6	; 0x06
    391e:	00 97       	sbiw	r24, 0x00	; 0
    3920:	69 f7       	brne	.-38     	; 0x38fc <LCD_displayCharacter+0x396>
    3922:	14 c0       	rjmp	.+40     	; 0x394c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3924:	6f 81       	ldd	r22, Y+7	; 0x07
    3926:	78 85       	ldd	r23, Y+8	; 0x08
    3928:	89 85       	ldd	r24, Y+9	; 0x09
    392a:	9a 85       	ldd	r25, Y+10	; 0x0a
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9e 83       	std	Y+6, r25	; 0x06
    3936:	8d 83       	std	Y+5, r24	; 0x05
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	9a 83       	std	Y+2, r25	; 0x02
    393e:	89 83       	std	Y+1, r24	; 0x01
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	9a 81       	ldd	r25, Y+2	; 0x02
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <LCD_displayCharacter+0x3de>
    3948:	9a 83       	std	Y+2, r25	; 0x02
    394a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    394c:	e9 96       	adiw	r28, 0x39	; 57
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	08 95       	ret

0000395e <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    395e:	0f 93       	push	r16
    3960:	1f 93       	push	r17
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	68 97       	sbiw	r28, 0x18	; 24
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	6d 8b       	std	Y+21, r22	; 0x15
    3978:	7e 8b       	std	Y+22, r23	; 0x16
    397a:	8f 8b       	std	Y+23, r24	; 0x17
    397c:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    397e:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    3980:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    3982:	8c 81       	ldd	r24, Y+4	; 0x04
    3984:	08 2f       	mov	r16, r24
    3986:	10 e0       	ldi	r17, 0x00	; 0
    3988:	8d 89       	ldd	r24, Y+21	; 0x15
    398a:	9e 89       	ldd	r25, Y+22	; 0x16
    398c:	af 89       	ldd	r26, Y+23	; 0x17
    398e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3990:	2a e0       	ldi	r18, 0x0A	; 10
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	50 e0       	ldi	r21, 0x00	; 0
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	0e 94 ae 31 	call	0x635c	; 0x635c <__udivmodsi4>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	28 2f       	mov	r18, r24
    39a6:	20 5d       	subi	r18, 0xD0	; 208
    39a8:	ce 01       	movw	r24, r28
    39aa:	05 96       	adiw	r24, 0x05	; 5
    39ac:	fc 01       	movw	r30, r24
    39ae:	e0 0f       	add	r30, r16
    39b0:	f1 1f       	adc	r31, r17
    39b2:	20 83       	st	Z, r18
    39b4:	8c 81       	ldd	r24, Y+4	; 0x04
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    39ba:	8d 89       	ldd	r24, Y+21	; 0x15
    39bc:	9e 89       	ldd	r25, Y+22	; 0x16
    39be:	af 89       	ldd	r26, Y+23	; 0x17
    39c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 ae 31 	call	0x635c	; 0x635c <__udivmodsi4>
    39d2:	da 01       	movw	r26, r20
    39d4:	c9 01       	movw	r24, r18
    39d6:	8d 8b       	std	Y+21, r24	; 0x15
    39d8:	9e 8b       	std	Y+22, r25	; 0x16
    39da:	af 8b       	std	Y+23, r26	; 0x17
    39dc:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    39de:	8d 89       	ldd	r24, Y+21	; 0x15
    39e0:	9e 89       	ldd	r25, Y+22	; 0x16
    39e2:	af 89       	ldd	r26, Y+23	; 0x17
    39e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	a1 05       	cpc	r26, r1
    39ea:	b1 05       	cpc	r27, r1
    39ec:	51 f6       	brne	.-108    	; 0x3982 <LCD_DisplayInteger+0x24>

    if (isNegative) {
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	88 23       	and	r24, r24
    39f2:	69 f0       	breq	.+26     	; 0x3a0e <LCD_DisplayInteger+0xb0>
        buffer[i++] = '-';
    39f4:	8c 81       	ldd	r24, Y+4	; 0x04
    39f6:	28 2f       	mov	r18, r24
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	ce 01       	movw	r24, r28
    39fc:	05 96       	adiw	r24, 0x05	; 5
    39fe:	fc 01       	movw	r30, r24
    3a00:	e2 0f       	add	r30, r18
    3a02:	f3 1f       	adc	r31, r19
    3a04:	8d e2       	ldi	r24, 0x2D	; 45
    3a06:	80 83       	st	Z, r24
    3a08:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0a:	8f 5f       	subi	r24, 0xFF	; 255
    3a0c:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3a0e:	1a 82       	std	Y+2, r1	; 0x02
    3a10:	3d c0       	rjmp	.+122    	; 0x3a8c <LCD_DisplayInteger+0x12e>
        char temp = buffer[j];
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	ce 01       	movw	r24, r28
    3a1a:	05 96       	adiw	r24, 0x05	; 5
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	e2 0f       	add	r30, r18
    3a20:	f3 1f       	adc	r31, r19
    3a22:	80 81       	ld	r24, Z
    3a24:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	48 2f       	mov	r20, r24
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	28 2f       	mov	r18, r24
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	8a 81       	ldd	r24, Y+2	; 0x02
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	b9 01       	movw	r22, r18
    3a3a:	68 1b       	sub	r22, r24
    3a3c:	79 0b       	sbc	r23, r25
    3a3e:	cb 01       	movw	r24, r22
    3a40:	9c 01       	movw	r18, r24
    3a42:	21 50       	subi	r18, 0x01	; 1
    3a44:	30 40       	sbci	r19, 0x00	; 0
    3a46:	ce 01       	movw	r24, r28
    3a48:	05 96       	adiw	r24, 0x05	; 5
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	e2 0f       	add	r30, r18
    3a4e:	f3 1f       	adc	r31, r19
    3a50:	20 81       	ld	r18, Z
    3a52:	ce 01       	movw	r24, r28
    3a54:	05 96       	adiw	r24, 0x05	; 5
    3a56:	fc 01       	movw	r30, r24
    3a58:	e4 0f       	add	r30, r20
    3a5a:	f5 1f       	adc	r31, r21
    3a5c:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	28 2f       	mov	r18, r24
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	a9 01       	movw	r20, r18
    3a6c:	48 1b       	sub	r20, r24
    3a6e:	59 0b       	sbc	r21, r25
    3a70:	ca 01       	movw	r24, r20
    3a72:	9c 01       	movw	r18, r24
    3a74:	21 50       	subi	r18, 0x01	; 1
    3a76:	30 40       	sbci	r19, 0x00	; 0
    3a78:	ce 01       	movw	r24, r28
    3a7a:	05 96       	adiw	r24, 0x05	; 5
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	e2 0f       	add	r30, r18
    3a80:	f3 1f       	adc	r31, r19
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	8f 5f       	subi	r24, 0xFF	; 255
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	98 2f       	mov	r25, r24
    3a90:	96 95       	lsr	r25
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
    3a94:	89 17       	cp	r24, r25
    3a96:	08 f4       	brcc	.+2      	; 0x3a9a <LCD_DisplayInteger+0x13c>
    3a98:	bc cf       	rjmp	.-136    	; 0x3a12 <LCD_DisplayInteger+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    3a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9c:	28 2f       	mov	r18, r24
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	05 96       	adiw	r24, 0x05	; 5
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	e2 0f       	add	r30, r18
    3aa8:	f3 1f       	adc	r31, r19
    3aaa:	10 82       	st	Z, r1

    // Write the string to LCD
    LCD_displayString(buffer);
    3aac:	ce 01       	movw	r24, r28
    3aae:	05 96       	adiw	r24, 0x05	; 5
    3ab0:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <LCD_displayString>
}
    3ab4:	68 96       	adiw	r28, 0x18	; 24
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <LCD_init>:


void LCD_init(void)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3ade:	83 e0       	ldi	r24, 0x03	; 3
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	64 e0       	ldi	r22, 0x04	; 4
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	0e 94 4e 0b 	call	0x169c	; 0x169c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3aee:	83 e0       	ldi	r24, 0x03	; 3
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	65 e0       	ldi	r22, 0x05	; 5
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	0e 94 4e 0b 	call	0x169c	; 0x169c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	6f ef       	ldi	r22, 0xFF	; 255
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_setPortDirection>
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	a0 ea       	ldi	r26, 0xA0	; 160
    3b10:	b1 e4       	ldi	r27, 0x41	; 65
    3b12:	8b 87       	std	Y+11, r24	; 0x0b
    3b14:	9c 87       	std	Y+12, r25	; 0x0c
    3b16:	ad 87       	std	Y+13, r26	; 0x0d
    3b18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	4a e7       	ldi	r20, 0x7A	; 122
    3b28:	55 e4       	ldi	r21, 0x45	; 69
    3b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	8f 83       	std	Y+7, r24	; 0x07
    3b34:	98 87       	std	Y+8, r25	; 0x08
    3b36:	a9 87       	std	Y+9, r26	; 0x09
    3b38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3c:	78 85       	ldd	r23, Y+8	; 0x08
    3b3e:	89 85       	ldd	r24, Y+9	; 0x09
    3b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e8       	ldi	r20, 0x80	; 128
    3b48:	5f e3       	ldi	r21, 0x3F	; 63
    3b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b4e:	88 23       	and	r24, r24
    3b50:	2c f4       	brge	.+10     	; 0x3b5c <LCD_init+0x92>
		__ticks = 1;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	9e 83       	std	Y+6, r25	; 0x06
    3b58:	8d 83       	std	Y+5, r24	; 0x05
    3b5a:	3f c0       	rjmp	.+126    	; 0x3bda <LCD_init+0x110>
	else if (__tmp > 65535)
    3b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5e:	78 85       	ldd	r23, Y+8	; 0x08
    3b60:	89 85       	ldd	r24, Y+9	; 0x09
    3b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	3f ef       	ldi	r19, 0xFF	; 255
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	57 e4       	ldi	r21, 0x47	; 71
    3b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b70:	18 16       	cp	r1, r24
    3b72:	4c f5       	brge	.+82     	; 0x3bc6 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e2       	ldi	r20, 0x20	; 32
    3b82:	51 e4       	ldi	r21, 0x41	; 65
    3b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	cd 01       	movw	r24, r26
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    3b9c:	0f c0       	rjmp	.+30     	; 0x3bbc <LCD_init+0xf2>
    3b9e:	80 e9       	ldi	r24, 0x90	; 144
    3ba0:	91 e0       	ldi	r25, 0x01	; 1
    3ba2:	9c 83       	std	Y+4, r25	; 0x04
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <LCD_init+0xe0>
    3bae:	9c 83       	std	Y+4, r25	; 0x04
    3bb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	9e 83       	std	Y+6, r25	; 0x06
    3bba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	69 f7       	brne	.-38     	; 0x3b9e <LCD_init+0xd4>
    3bc4:	14 c0       	rjmp	.+40     	; 0x3bee <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc8:	78 85       	ldd	r23, Y+8	; 0x08
    3bca:	89 85       	ldd	r24, Y+9	; 0x09
    3bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9e 83       	std	Y+6, r25	; 0x06
    3bd8:	8d 83       	std	Y+5, r24	; 0x05
    3bda:	8d 81       	ldd	r24, Y+5	; 0x05
    3bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bde:	9a 83       	std	Y+2, r25	; 0x02
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <LCD_init+0x11c>
    3bea:	9a 83       	std	Y+2, r25	; 0x02
    3bec:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3bee:	88 e3       	ldi	r24, 0x38	; 56
    3bf0:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3bf4:	8c e0       	ldi	r24, 0x0C	; 12
    3bf6:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
}
    3c00:	2e 96       	adiw	r28, 0x0e	; 14
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	08 95       	ret

00003c12 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	00 d0       	rcall	.+0      	; 0x3c18 <LCD_GoToXY+0x6>
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <LCD_GoToXY+0x8>
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	88 32       	cpi	r24, 0x28	; 40
    3c26:	c0 f4       	brcc	.+48     	; 0x3c58 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	3c 83       	std	Y+4, r19	; 0x04
    3c30:	2b 83       	std	Y+3, r18	; 0x03
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	9c 81       	ldd	r25, Y+4	; 0x04
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	31 f0       	breq	.+12     	; 0x3c46 <LCD_GoToXY+0x34>
    3c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c3e:	21 30       	cpi	r18, 0x01	; 1
    3c40:	31 05       	cpc	r19, r1
    3c42:	31 f0       	breq	.+12     	; 0x3c50 <LCD_GoToXY+0x3e>
    3c44:	09 c0       	rjmp	.+18     	; 0x3c58 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	80 58       	subi	r24, 0x80	; 128
    3c4a:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3c4e:	04 c0       	rjmp	.+8      	; 0x3c58 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3c50:	8a 81       	ldd	r24, Y+2	; 0x02
    3c52:	80 54       	subi	r24, 0x40	; 64
    3c54:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
			break;
		}
	}
}
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <LCD_displayString+0x6>
    3c6c:	0f 92       	push	r0
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	9b 83       	std	Y+3, r25	; 0x03
    3c74:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3c76:	19 82       	std	Y+1, r1	; 0x01
    3c78:	0e c0       	rjmp	.+28     	; 0x3c96 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	fc 01       	movw	r30, r24
    3c86:	e2 0f       	add	r30, r18
    3c88:	f3 1f       	adc	r31, r19
    3c8a:	80 81       	ld	r24, Z
    3c8c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
		i++;
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	8f 5f       	subi	r24, 0xFF	; 255
    3c94:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	e2 0f       	add	r30, r18
    3ca4:	f3 1f       	adc	r31, r19
    3ca6:	80 81       	ld	r24, Z
    3ca8:	88 23       	and	r24, r24
    3caa:	39 f7       	brne	.-50     	; 0x3c7a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	28 97       	sbiw	r28, 0x08	; 8
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	8b 83       	std	Y+3, r24	; 0x03
    3cce:	6c 83       	std	Y+4, r22	; 0x04
    3cd0:	5e 83       	std	Y+6, r21	; 0x06
    3cd2:	4d 83       	std	Y+5, r20	; 0x05
    3cd4:	38 87       	std	Y+8, r19	; 0x08
    3cd6:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3cd8:	1a 82       	std	Y+2, r1	; 0x02
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	88 23       	and	r24, r24
    3ce2:	49 f4       	brne	.+18     	; 0x3cf6 <LCD_String_xy+0x3e>
    3ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce6:	80 31       	cpi	r24, 0x10	; 16
    3ce8:	30 f4       	brcc	.+12     	; 0x3cf6 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3cea:	8c 81       	ldd	r24, Y+4	; 0x04
    3cec:	8f 70       	andi	r24, 0x0F	; 15
    3cee:	80 68       	ori	r24, 0x80	; 128
    3cf0:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3cf4:	3a c0       	rjmp	.+116    	; 0x3d6a <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	b9 f5       	brne	.+110    	; 0x3d6a <LCD_String_xy+0xb2>
    3cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfe:	80 31       	cpi	r24, 0x10	; 16
    3d00:	a0 f5       	brcc	.+104    	; 0x3d6a <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3d02:	8c 81       	ldd	r24, Y+4	; 0x04
    3d04:	8f 70       	andi	r24, 0x0F	; 15
    3d06:	80 6c       	ori	r24, 0xC0	; 192
    3d08:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3d0c:	2e c0       	rjmp	.+92     	; 0x3d6a <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d10:	28 2f       	mov	r18, r24
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	fc 01       	movw	r30, r24
    3d1a:	e2 0f       	add	r30, r18
    3d1c:	f3 1f       	adc	r31, r19
    3d1e:	80 81       	ld	r24, Z
    3d20:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
		i++;
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2c:	88 23       	and	r24, r24
    3d2e:	71 f4       	brne	.+28     	; 0x3d4c <LCD_String_xy+0x94>
    3d30:	8c 81       	ldd	r24, Y+4	; 0x04
    3d32:	83 30       	cpi	r24, 0x03	; 3
    3d34:	58 f0       	brcs	.+22     	; 0x3d4c <LCD_String_xy+0x94>
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	8b 30       	cpi	r24, 0x0B	; 11
    3d3a:	41 f4       	brne	.+16     	; 0x3d4c <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	60 e0       	ldi	r22, 0x00	; 0
    3d40:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <LCD_GoToXY>
			c++;
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	8f 5f       	subi	r24, 0xFF	; 255
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	0b c0       	rjmp	.+22     	; 0x3d62 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	41 f4       	brne	.+16     	; 0x3d62 <LCD_String_xy+0xaa>
    3d52:	8c 81       	ldd	r24, Y+4	; 0x04
    3d54:	83 30       	cpi	r24, 0x03	; 3
    3d56:	28 f0       	brcs	.+10     	; 0x3d62 <LCD_String_xy+0xaa>
    3d58:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5a:	8b 30       	cpi	r24, 0x0B	; 11
    3d5c:	11 f4       	brne	.+4      	; 0x3d62 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3d5e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <LCD_ClearScreen>
		}

		*count = c;
    3d62:	ef 81       	ldd	r30, Y+7	; 0x07
    3d64:	f8 85       	ldd	r31, Y+8	; 0x08
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	8d 81       	ldd	r24, Y+5	; 0x05
    3d72:	9e 81       	ldd	r25, Y+6	; 0x06
    3d74:	fc 01       	movw	r30, r24
    3d76:	e2 0f       	add	r30, r18
    3d78:	f3 1f       	adc	r31, r19
    3d7a:	80 81       	ld	r24, Z
    3d7c:	88 23       	and	r24, r24
    3d7e:	39 f6       	brne	.-114    	; 0x3d0e <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3d80:	28 96       	adiw	r28, 0x08	; 8
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	2e 97       	sbiw	r28, 0x0e	; 14
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	a0 e0       	ldi	r26, 0x00	; 0
    3db2:	b0 e4       	ldi	r27, 0x40	; 64
    3db4:	8b 87       	std	Y+11, r24	; 0x0b
    3db6:	9c 87       	std	Y+12, r25	; 0x0c
    3db8:	ad 87       	std	Y+13, r26	; 0x0d
    3dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	4a e7       	ldi	r20, 0x7A	; 122
    3dca:	55 e4       	ldi	r21, 0x45	; 69
    3dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	8f 83       	std	Y+7, r24	; 0x07
    3dd6:	98 87       	std	Y+8, r25	; 0x08
    3dd8:	a9 87       	std	Y+9, r26	; 0x09
    3dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dde:	78 85       	ldd	r23, Y+8	; 0x08
    3de0:	89 85       	ldd	r24, Y+9	; 0x09
    3de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e8       	ldi	r20, 0x80	; 128
    3dea:	5f e3       	ldi	r21, 0x3F	; 63
    3dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df0:	88 23       	and	r24, r24
    3df2:	2c f4       	brge	.+10     	; 0x3dfe <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	9e 83       	std	Y+6, r25	; 0x06
    3dfa:	8d 83       	std	Y+5, r24	; 0x05
    3dfc:	3f c0       	rjmp	.+126    	; 0x3e7c <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3e00:	78 85       	ldd	r23, Y+8	; 0x08
    3e02:	89 85       	ldd	r24, Y+9	; 0x09
    3e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	3f ef       	ldi	r19, 0xFF	; 255
    3e0a:	4f e7       	ldi	r20, 0x7F	; 127
    3e0c:	57 e4       	ldi	r21, 0x47	; 71
    3e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e12:	18 16       	cp	r1, r24
    3e14:	4c f5       	brge	.+82     	; 0x3e68 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e2       	ldi	r20, 0x20	; 32
    3e24:	51 e4       	ldi	r21, 0x41	; 65
    3e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	bc 01       	movw	r22, r24
    3e30:	cd 01       	movw	r24, r26
    3e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	9e 83       	std	Y+6, r25	; 0x06
    3e3c:	8d 83       	std	Y+5, r24	; 0x05
    3e3e:	0f c0       	rjmp	.+30     	; 0x3e5e <LCD_ClearScreen+0xcc>
    3e40:	80 e9       	ldi	r24, 0x90	; 144
    3e42:	91 e0       	ldi	r25, 0x01	; 1
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	8b 83       	std	Y+3, r24	; 0x03
    3e48:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <LCD_ClearScreen+0xba>
    3e50:	9c 83       	std	Y+4, r25	; 0x04
    3e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e54:	8d 81       	ldd	r24, Y+5	; 0x05
    3e56:	9e 81       	ldd	r25, Y+6	; 0x06
    3e58:	01 97       	sbiw	r24, 0x01	; 1
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	00 97       	sbiw	r24, 0x00	; 0
    3e64:	69 f7       	brne	.-38     	; 0x3e40 <LCD_ClearScreen+0xae>
    3e66:	14 c0       	rjmp	.+40     	; 0x3e90 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e68:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6a:	78 85       	ldd	r23, Y+8	; 0x08
    3e6c:	89 85       	ldd	r24, Y+9	; 0x09
    3e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	89 83       	std	Y+1, r24	; 0x01
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	9a 81       	ldd	r25, Y+2	; 0x02
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <LCD_ClearScreen+0xf6>
    3e8c:	9a 83       	std	Y+2, r25	; 0x02
    3e8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3e90:	2e 96       	adiw	r28, 0x0e	; 14
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	cf 91       	pop	r28
    3e9e:	df 91       	pop	r29
    3ea0:	08 95       	ret

00003ea2 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3ea2:	df 93       	push	r29
    3ea4:	cf 93       	push	r28
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	2e 97       	sbiw	r28, 0x0e	; 14
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3eb6:	88 e1       	ldi	r24, 0x18	; 24
    3eb8:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ec2:	b1 e4       	ldi	r27, 0x41	; 65
    3ec4:	8b 87       	std	Y+11, r24	; 0x0b
    3ec6:	9c 87       	std	Y+12, r25	; 0x0c
    3ec8:	ad 87       	std	Y+13, r26	; 0x0d
    3eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	4a e7       	ldi	r20, 0x7A	; 122
    3eda:	55 e4       	ldi	r21, 0x45	; 69
    3edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	8f 83       	std	Y+7, r24	; 0x07
    3ee6:	98 87       	std	Y+8, r25	; 0x08
    3ee8:	a9 87       	std	Y+9, r26	; 0x09
    3eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eec:	6f 81       	ldd	r22, Y+7	; 0x07
    3eee:	78 85       	ldd	r23, Y+8	; 0x08
    3ef0:	89 85       	ldd	r24, Y+9	; 0x09
    3ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	40 e8       	ldi	r20, 0x80	; 128
    3efa:	5f e3       	ldi	r21, 0x3F	; 63
    3efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f00:	88 23       	and	r24, r24
    3f02:	2c f4       	brge	.+10     	; 0x3f0e <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	9e 83       	std	Y+6, r25	; 0x06
    3f0a:	8d 83       	std	Y+5, r24	; 0x05
    3f0c:	3f c0       	rjmp	.+126    	; 0x3f8c <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f10:	78 85       	ldd	r23, Y+8	; 0x08
    3f12:	89 85       	ldd	r24, Y+9	; 0x09
    3f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	3f ef       	ldi	r19, 0xFF	; 255
    3f1a:	4f e7       	ldi	r20, 0x7F	; 127
    3f1c:	57 e4       	ldi	r21, 0x47	; 71
    3f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f22:	18 16       	cp	r1, r24
    3f24:	4c f5       	brge	.+82     	; 0x3f78 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e2       	ldi	r20, 0x20	; 32
    3f34:	51 e4       	ldi	r21, 0x41	; 65
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	9e 83       	std	Y+6, r25	; 0x06
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
    3f4e:	0f c0       	rjmp	.+30     	; 0x3f6e <LCD_ShiftingLeft+0xcc>
    3f50:	80 e9       	ldi	r24, 0x90	; 144
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	9c 83       	std	Y+4, r25	; 0x04
    3f56:	8b 83       	std	Y+3, r24	; 0x03
    3f58:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	f1 f7       	brne	.-4      	; 0x3f5c <LCD_ShiftingLeft+0xba>
    3f60:	9c 83       	std	Y+4, r25	; 0x04
    3f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	9e 81       	ldd	r25, Y+6	; 0x06
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	9e 81       	ldd	r25, Y+6	; 0x06
    3f72:	00 97       	sbiw	r24, 0x00	; 0
    3f74:	69 f7       	brne	.-38     	; 0x3f50 <LCD_ShiftingLeft+0xae>
    3f76:	14 c0       	rjmp	.+40     	; 0x3fa0 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f78:	6f 81       	ldd	r22, Y+7	; 0x07
    3f7a:	78 85       	ldd	r23, Y+8	; 0x08
    3f7c:	89 85       	ldd	r24, Y+9	; 0x09
    3f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	9e 83       	std	Y+6, r25	; 0x06
    3f8a:	8d 83       	std	Y+5, r24	; 0x05
    3f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f90:	9a 83       	std	Y+2, r25	; 0x02
    3f92:	89 83       	std	Y+1, r24	; 0x01
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <LCD_ShiftingLeft+0xf6>
    3f9c:	9a 83       	std	Y+2, r25	; 0x02
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3fa0:	2e 96       	adiw	r28, 0x0e	; 14
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	2e 97       	sbiw	r28, 0x0e	; 14
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3fc6:	8c e1       	ldi	r24, 0x1C	; 28
    3fc8:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	a0 ea       	ldi	r26, 0xA0	; 160
    3fd2:	b1 e4       	ldi	r27, 0x41	; 65
    3fd4:	8b 87       	std	Y+11, r24	; 0x0b
    3fd6:	9c 87       	std	Y+12, r25	; 0x0c
    3fd8:	ad 87       	std	Y+13, r26	; 0x0d
    3fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	4a e7       	ldi	r20, 0x7A	; 122
    3fea:	55 e4       	ldi	r21, 0x45	; 69
    3fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	8f 83       	std	Y+7, r24	; 0x07
    3ff6:	98 87       	std	Y+8, r25	; 0x08
    3ff8:	a9 87       	std	Y+9, r26	; 0x09
    3ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ffe:	78 85       	ldd	r23, Y+8	; 0x08
    4000:	89 85       	ldd	r24, Y+9	; 0x09
    4002:	9a 85       	ldd	r25, Y+10	; 0x0a
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	40 e8       	ldi	r20, 0x80	; 128
    400a:	5f e3       	ldi	r21, 0x3F	; 63
    400c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4010:	88 23       	and	r24, r24
    4012:	2c f4       	brge	.+10     	; 0x401e <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	9e 83       	std	Y+6, r25	; 0x06
    401a:	8d 83       	std	Y+5, r24	; 0x05
    401c:	3f c0       	rjmp	.+126    	; 0x409c <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    401e:	6f 81       	ldd	r22, Y+7	; 0x07
    4020:	78 85       	ldd	r23, Y+8	; 0x08
    4022:	89 85       	ldd	r24, Y+9	; 0x09
    4024:	9a 85       	ldd	r25, Y+10	; 0x0a
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	3f ef       	ldi	r19, 0xFF	; 255
    402a:	4f e7       	ldi	r20, 0x7F	; 127
    402c:	57 e4       	ldi	r21, 0x47	; 71
    402e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4032:	18 16       	cp	r1, r24
    4034:	4c f5       	brge	.+82     	; 0x4088 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4036:	6b 85       	ldd	r22, Y+11	; 0x0b
    4038:	7c 85       	ldd	r23, Y+12	; 0x0c
    403a:	8d 85       	ldd	r24, Y+13	; 0x0d
    403c:	9e 85       	ldd	r25, Y+14	; 0x0e
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e2       	ldi	r20, 0x20	; 32
    4044:	51 e4       	ldi	r21, 0x41	; 65
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	bc 01       	movw	r22, r24
    4050:	cd 01       	movw	r24, r26
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9e 83       	std	Y+6, r25	; 0x06
    405c:	8d 83       	std	Y+5, r24	; 0x05
    405e:	0f c0       	rjmp	.+30     	; 0x407e <LCD_ShiftingRight+0xcc>
    4060:	80 e9       	ldi	r24, 0x90	; 144
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	9c 83       	std	Y+4, r25	; 0x04
    4066:	8b 83       	std	Y+3, r24	; 0x03
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
    406a:	9c 81       	ldd	r25, Y+4	; 0x04
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	f1 f7       	brne	.-4      	; 0x406c <LCD_ShiftingRight+0xba>
    4070:	9c 83       	std	Y+4, r25	; 0x04
    4072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4074:	8d 81       	ldd	r24, Y+5	; 0x05
    4076:	9e 81       	ldd	r25, Y+6	; 0x06
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407e:	8d 81       	ldd	r24, Y+5	; 0x05
    4080:	9e 81       	ldd	r25, Y+6	; 0x06
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	69 f7       	brne	.-38     	; 0x4060 <LCD_ShiftingRight+0xae>
    4086:	14 c0       	rjmp	.+40     	; 0x40b0 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4088:	6f 81       	ldd	r22, Y+7	; 0x07
    408a:	78 85       	ldd	r23, Y+8	; 0x08
    408c:	89 85       	ldd	r24, Y+9	; 0x09
    408e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	9e 83       	std	Y+6, r25	; 0x06
    409a:	8d 83       	std	Y+5, r24	; 0x05
    409c:	8d 81       	ldd	r24, Y+5	; 0x05
    409e:	9e 81       	ldd	r25, Y+6	; 0x06
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	9a 81       	ldd	r25, Y+2	; 0x02
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	f1 f7       	brne	.-4      	; 0x40a8 <LCD_ShiftingRight+0xf6>
    40ac:	9a 83       	std	Y+2, r25	; 0x02
    40ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    40b0:	2e 96       	adiw	r28, 0x0e	; 14
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	cf 91       	pop	r28
    40be:	df 91       	pop	r29
    40c0:	08 95       	ret

000040c2 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    40c2:	0f 93       	push	r16
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	28 97       	sbiw	r28, 0x08	; 8
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	8b 83       	std	Y+3, r24	; 0x03
    40da:	7d 83       	std	Y+5, r23	; 0x05
    40dc:	6c 83       	std	Y+4, r22	; 0x04
    40de:	4e 83       	std	Y+6, r20	; 0x06
    40e0:	2f 83       	std	Y+7, r18	; 0x07
    40e2:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    40e4:	88 85       	ldd	r24, Y+8	; 0x08
    40e6:	0e 94 b7 18 	call	0x316e	; 0x316e <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    40ea:	1a 82       	std	Y+2, r1	; 0x02
    40ec:	19 82       	std	Y+1, r1	; 0x01
    40ee:	0f c0       	rjmp	.+30     	; 0x410e <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    40f0:	29 81       	ldd	r18, Y+1	; 0x01
    40f2:	3a 81       	ldd	r19, Y+2	; 0x02
    40f4:	8c 81       	ldd	r24, Y+4	; 0x04
    40f6:	9d 81       	ldd	r25, Y+5	; 0x05
    40f8:	fc 01       	movw	r30, r24
    40fa:	e2 0f       	add	r30, r18
    40fc:	f3 1f       	adc	r31, r19
    40fe:	80 81       	ld	r24, Z
    4100:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	9a 83       	std	Y+2, r25	; 0x02
    410c:	89 83       	std	Y+1, r24	; 0x01
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	88 30       	cpi	r24, 0x08	; 8
    4114:	91 05       	cpc	r25, r1
    4116:	64 f3       	brlt	.-40     	; 0x40f0 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    4118:	8e 81       	ldd	r24, Y+6	; 0x06
    411a:	6f 81       	ldd	r22, Y+7	; 0x07
    411c:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    4120:	8b 81       	ldd	r24, Y+3	; 0x03
    4122:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    4126:	8f 81       	ldd	r24, Y+7	; 0x07
    4128:	80 31       	cpi	r24, 0x10	; 16
    412a:	48 f0       	brcs	.+18     	; 0x413e <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    412c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    4138:	8b 81       	ldd	r24, Y+3	; 0x03
    413a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
	}
}
    413e:	28 96       	adiw	r28, 0x08	; 8
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	f8 94       	cli
    4144:	de bf       	out	0x3e, r29	; 62
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	cd bf       	out	0x3d, r28	; 61
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	0f 91       	pop	r16
    4150:	08 95       	ret

00004152 <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    4152:	df 93       	push	r29
    4154:	cf 93       	push	r28
    4156:	cd b7       	in	r28, 0x3d	; 61
    4158:	de b7       	in	r29, 0x3e	; 62
    415a:	28 97       	sbiw	r28, 0x08	; 8
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	6d 83       	std	Y+5, r22	; 0x05
    4168:	7e 83       	std	Y+6, r23	; 0x06
    416a:	8f 83       	std	Y+7, r24	; 0x07
    416c:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    416e:	6d 81       	ldd	r22, Y+5	; 0x05
    4170:	7e 81       	ldd	r23, Y+6	; 0x06
    4172:	8f 81       	ldd	r24, Y+7	; 0x07
    4174:	98 85       	ldd	r25, Y+8	; 0x08
    4176:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	9c 83       	std	Y+4, r25	; 0x04
    4180:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	aa 27       	eor	r26, r26
    4188:	97 fd       	sbrc	r25, 7
    418a:	a0 95       	com	r26
    418c:	ba 2f       	mov	r27, r26
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    4196:	9b 01       	movw	r18, r22
    4198:	ac 01       	movw	r20, r24
    419a:	6d 81       	ldd	r22, Y+5	; 0x05
    419c:	7e 81       	ldd	r23, Y+6	; 0x06
    419e:	8f 81       	ldd	r24, Y+7	; 0x07
    41a0:	98 85       	ldd	r25, Y+8	; 0x08
    41a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	bc 01       	movw	r22, r24
    41ac:	cd 01       	movw	r24, r26
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	4a e7       	ldi	r20, 0x7A	; 122
    41b4:	54 e4       	ldi	r21, 0x44	; 68
    41b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9a 83       	std	Y+2, r25	; 0x02
    41cc:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	9c 81       	ldd	r25, Y+4	; 0x04
    41d2:	84 36       	cpi	r24, 0x64	; 100
    41d4:	91 05       	cpc	r25, r1
    41d6:	54 f0       	brlt	.+20     	; 0x41ec <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	9c 81       	ldd	r25, Y+4	; 0x04
    41dc:	2a e0       	ldi	r18, 0x0A	; 10
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	b9 01       	movw	r22, r18
    41e2:	0e 94 9b 31 	call	0x6336	; 0x6336 <__divmodhi4>
    41e6:	cb 01       	movw	r24, r22
    41e8:	9c 83       	std	Y+4, r25	; 0x04
    41ea:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_DisplayInteger(integerPart);
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	9c 81       	ldd	r25, Y+4	; 0x04
    41f0:	aa 27       	eor	r26, r26
    41f2:	97 fd       	sbrc	r25, 7
    41f4:	a0 95       	com	r26
    41f6:	ba 2f       	mov	r27, r26
    41f8:	bc 01       	movw	r22, r24
    41fa:	cd 01       	movw	r24, r26
    41fc:	0e 94 af 1c 	call	0x395e	; 0x395e <LCD_DisplayInteger>
    LCD_displayCharacter('.');
    4200:	8e e2       	ldi	r24, 0x2E	; 46
    4202:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
    LCD_DisplayInteger(decimalPart);
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	9a 81       	ldd	r25, Y+2	; 0x02
    420a:	aa 27       	eor	r26, r26
    420c:	97 fd       	sbrc	r25, 7
    420e:	a0 95       	com	r26
    4210:	ba 2f       	mov	r27, r26
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 af 1c 	call	0x395e	; 0x395e <LCD_DisplayInteger>
    
}
    421a:	28 96       	adiw	r28, 0x08	; 8
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	00 d0       	rcall	.+0      	; 0x4232 <displayMinusNumbers+0x6>
    4232:	00 d0       	rcall	.+0      	; 0x4234 <displayMinusNumbers+0x8>
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	69 83       	std	Y+1, r22	; 0x01
    423a:	7a 83       	std	Y+2, r23	; 0x02
    423c:	8b 83       	std	Y+3, r24	; 0x03
    423e:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    4240:	8d e2       	ldi	r24, 0x2D	; 45
    4242:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
	number = -number;
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	ab 81       	ldd	r26, Y+3	; 0x03
    424c:	bc 81       	ldd	r27, Y+4	; 0x04
    424e:	b0 58       	subi	r27, 0x80	; 128
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	ab 83       	std	Y+3, r26	; 0x03
    4256:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    4258:	69 81       	ldd	r22, Y+1	; 0x01
    425a:	7a 81       	ldd	r23, Y+2	; 0x02
    425c:	8b 81       	ldd	r24, Y+3	; 0x03
    425e:	9c 81       	ldd	r25, Y+4	; 0x04
    4260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 af 1c 	call	0x395e	; 0x395e <LCD_DisplayInteger>
}
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <KPD_voidInit>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	00 d0       	rcall	.+0      	; 0x4284 <KPD_voidInit+0x6>
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    4288:	1a 82       	std	Y+2, r1	; 0x02
    428a:	19 82       	std	Y+1, r1	; 0x01
    428c:	31 c0       	rjmp	.+98     	; 0x42f0 <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	fc 01       	movw	r30, r24
    4294:	e5 58       	subi	r30, 0x85	; 133
    4296:	fe 4f       	sbci	r31, 0xFE	; 254
    4298:	90 81       	ld	r25, Z
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	69 2f       	mov	r22, r25
    429e:	41 e0       	ldi	r20, 0x01	; 1
    42a0:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	9a 81       	ldd	r25, Y+2	; 0x02
    42a8:	fc 01       	movw	r30, r24
    42aa:	e5 58       	subi	r30, 0x85	; 133
    42ac:	fe 4f       	sbci	r31, 0xFE	; 254
    42ae:	90 81       	ld	r25, Z
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	69 2f       	mov	r22, r25
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	9a 81       	ldd	r25, Y+2	; 0x02
    42be:	fc 01       	movw	r30, r24
    42c0:	e1 58       	subi	r30, 0x81	; 129
    42c2:	fe 4f       	sbci	r31, 0xFE	; 254
    42c4:	90 81       	ld	r25, Z
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	69 2f       	mov	r22, r25
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	fc 01       	movw	r30, r24
    42d6:	e1 58       	subi	r30, 0x81	; 129
    42d8:	fe 4f       	sbci	r31, 0xFE	; 254
    42da:	90 81       	ld	r25, Z
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	69 2f       	mov	r22, r25
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	84 30       	cpi	r24, 0x04	; 4
    42f6:	91 05       	cpc	r25, r1
    42f8:	54 f2       	brlt	.-108    	; 0x428e <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	cf 91       	pop	r28
    4300:	df 91       	pop	r29
    4302:	08 95       	ret

00004304 <KPD_u8GetKeyState>:



u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    4304:	df 93       	push	r29
    4306:	cf 93       	push	r28
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    430c:	65 97       	sbiw	r28, 0x15	; 21
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	9d 8b       	std	Y+21, r25	; 0x15
    431a:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    4320:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    4322:	8c 89       	ldd	r24, Y+20	; 0x14
    4324:	9d 89       	ldd	r25, Y+21	; 0x15
    4326:	00 97       	sbiw	r24, 0x00	; 0
    4328:	09 f4       	brne	.+2      	; 0x432c <KPD_u8GetKeyState+0x28>
    432a:	f0 c0       	rjmp	.+480    	; 0x450c <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    432c:	ec 89       	ldd	r30, Y+20	; 0x14
    432e:	fd 89       	ldd	r31, Y+21	; 0x15
    4330:	8f ef       	ldi	r24, 0xFF	; 255
    4332:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    4334:	19 8a       	std	Y+17, r1	; 0x11
    4336:	e5 c0       	rjmp	.+458    	; 0x4502 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    4338:	89 89       	ldd	r24, Y+17	; 0x11
    433a:	88 2f       	mov	r24, r24
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	fc 01       	movw	r30, r24
    4340:	e5 58       	subi	r30, 0x85	; 133
    4342:	fe 4f       	sbci	r31, 0xFE	; 254
    4344:	90 81       	ld	r25, Z
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	69 2f       	mov	r22, r25
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    4350:	18 8a       	std	Y+16, r1	; 0x10
    4352:	c1 c0       	rjmp	.+386    	; 0x44d6 <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    4354:	88 89       	ldd	r24, Y+16	; 0x10
    4356:	88 2f       	mov	r24, r24
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	fc 01       	movw	r30, r24
    435c:	e1 58       	subi	r30, 0x81	; 129
    435e:	fe 4f       	sbci	r31, 0xFE	; 254
    4360:	90 81       	ld	r25, Z
    4362:	9e 01       	movw	r18, r28
    4364:	2d 5e       	subi	r18, 0xED	; 237
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	69 2f       	mov	r22, r25
    436c:	a9 01       	movw	r20, r18
    436e:	0e 94 9b 13 	call	0x2736	; 0x2736 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    4372:	8b 89       	ldd	r24, Y+19	; 0x13
    4374:	88 23       	and	r24, r24
    4376:	09 f0       	breq	.+2      	; 0x437a <KPD_u8GetKeyState+0x76>
    4378:	ab c0       	rjmp	.+342    	; 0x44d0 <KPD_u8GetKeyState+0x1cc>
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a0 ea       	ldi	r26, 0xA0	; 160
    4380:	b1 e4       	ldi	r27, 0x41	; 65
    4382:	8b 87       	std	Y+11, r24	; 0x0b
    4384:	9c 87       	std	Y+12, r25	; 0x0c
    4386:	ad 87       	std	Y+13, r26	; 0x0d
    4388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438a:	6b 85       	ldd	r22, Y+11	; 0x0b
    438c:	7c 85       	ldd	r23, Y+12	; 0x0c
    438e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4390:	9e 85       	ldd	r25, Y+14	; 0x0e
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	4a e7       	ldi	r20, 0x7A	; 122
    4398:	55 e4       	ldi	r21, 0x45	; 69
    439a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	8f 83       	std	Y+7, r24	; 0x07
    43a4:	98 87       	std	Y+8, r25	; 0x08
    43a6:	a9 87       	std	Y+9, r26	; 0x09
    43a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43aa:	6f 81       	ldd	r22, Y+7	; 0x07
    43ac:	78 85       	ldd	r23, Y+8	; 0x08
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	40 e8       	ldi	r20, 0x80	; 128
    43b8:	5f e3       	ldi	r21, 0x3F	; 63
    43ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43be:	88 23       	and	r24, r24
    43c0:	2c f4       	brge	.+10     	; 0x43cc <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	9e 83       	std	Y+6, r25	; 0x06
    43c8:	8d 83       	std	Y+5, r24	; 0x05
    43ca:	3f c0       	rjmp	.+126    	; 0x444a <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    43cc:	6f 81       	ldd	r22, Y+7	; 0x07
    43ce:	78 85       	ldd	r23, Y+8	; 0x08
    43d0:	89 85       	ldd	r24, Y+9	; 0x09
    43d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	3f ef       	ldi	r19, 0xFF	; 255
    43d8:	4f e7       	ldi	r20, 0x7F	; 127
    43da:	57 e4       	ldi	r21, 0x47	; 71
    43dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43e0:	18 16       	cp	r1, r24
    43e2:	4c f5       	brge	.+82     	; 0x4436 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	40 e2       	ldi	r20, 0x20	; 32
    43f2:	51 e4       	ldi	r21, 0x41	; 65
    43f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	bc 01       	movw	r22, r24
    43fe:	cd 01       	movw	r24, r26
    4400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	9e 83       	std	Y+6, r25	; 0x06
    440a:	8d 83       	std	Y+5, r24	; 0x05
    440c:	0f c0       	rjmp	.+30     	; 0x442c <KPD_u8GetKeyState+0x128>
    440e:	80 e9       	ldi	r24, 0x90	; 144
    4410:	91 e0       	ldi	r25, 0x01	; 1
    4412:	9c 83       	std	Y+4, r25	; 0x04
    4414:	8b 83       	std	Y+3, r24	; 0x03
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	9c 81       	ldd	r25, Y+4	; 0x04
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	f1 f7       	brne	.-4      	; 0x441a <KPD_u8GetKeyState+0x116>
    441e:	9c 83       	std	Y+4, r25	; 0x04
    4420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4422:	8d 81       	ldd	r24, Y+5	; 0x05
    4424:	9e 81       	ldd	r25, Y+6	; 0x06
    4426:	01 97       	sbiw	r24, 0x01	; 1
    4428:	9e 83       	std	Y+6, r25	; 0x06
    442a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442c:	8d 81       	ldd	r24, Y+5	; 0x05
    442e:	9e 81       	ldd	r25, Y+6	; 0x06
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	69 f7       	brne	.-38     	; 0x440e <KPD_u8GetKeyState+0x10a>
    4434:	14 c0       	rjmp	.+40     	; 0x445e <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4436:	6f 81       	ldd	r22, Y+7	; 0x07
    4438:	78 85       	ldd	r23, Y+8	; 0x08
    443a:	89 85       	ldd	r24, Y+9	; 0x09
    443c:	9a 85       	ldd	r25, Y+10	; 0x0a
    443e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	9e 81       	ldd	r25, Y+6	; 0x06
    444e:	9a 83       	std	Y+2, r25	; 0x02
    4450:	89 83       	std	Y+1, r24	; 0x01
    4452:	89 81       	ldd	r24, Y+1	; 0x01
    4454:	9a 81       	ldd	r25, Y+2	; 0x02
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	f1 f7       	brne	.-4      	; 0x4456 <KPD_u8GetKeyState+0x152>
    445a:	9a 83       	std	Y+2, r25	; 0x02
    445c:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    445e:	88 89       	ldd	r24, Y+16	; 0x10
    4460:	88 2f       	mov	r24, r24
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	fc 01       	movw	r30, r24
    4466:	e1 58       	subi	r30, 0x81	; 129
    4468:	fe 4f       	sbci	r31, 0xFE	; 254
    446a:	90 81       	ld	r25, Z
    446c:	9e 01       	movw	r18, r28
    446e:	2d 5e       	subi	r18, 0xED	; 237
    4470:	3f 4f       	sbci	r19, 0xFF	; 255
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	69 2f       	mov	r22, r25
    4476:	a9 01       	movw	r20, r18
    4478:	0e 94 9b 13 	call	0x2736	; 0x2736 <DIO_u8GetPinValue>
    447c:	0f c0       	rjmp	.+30     	; 0x449c <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    447e:	88 89       	ldd	r24, Y+16	; 0x10
    4480:	88 2f       	mov	r24, r24
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	fc 01       	movw	r30, r24
    4486:	e1 58       	subi	r30, 0x81	; 129
    4488:	fe 4f       	sbci	r31, 0xFE	; 254
    448a:	90 81       	ld	r25, Z
    448c:	9e 01       	movw	r18, r28
    448e:	2d 5e       	subi	r18, 0xED	; 237
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	69 2f       	mov	r22, r25
    4496:	a9 01       	movw	r20, r18
    4498:	0e 94 9b 13 	call	0x2736	; 0x2736 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    449c:	8b 89       	ldd	r24, Y+19	; 0x13
    449e:	88 23       	and	r24, r24
    44a0:	71 f3       	breq	.-36     	; 0x447e <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    44a2:	89 89       	ldd	r24, Y+17	; 0x11
    44a4:	48 2f       	mov	r20, r24
    44a6:	50 e0       	ldi	r21, 0x00	; 0
    44a8:	88 89       	ldd	r24, Y+16	; 0x10
    44aa:	28 2f       	mov	r18, r24
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	ca 01       	movw	r24, r20
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	82 0f       	add	r24, r18
    44ba:	93 1f       	adc	r25, r19
    44bc:	fc 01       	movw	r30, r24
    44be:	e5 59       	subi	r30, 0x95	; 149
    44c0:	fe 4f       	sbci	r31, 0xFE	; 254
    44c2:	80 81       	ld	r24, Z
    44c4:	ec 89       	ldd	r30, Y+20	; 0x14
    44c6:	fd 89       	ldd	r31, Y+21	; 0x15
    44c8:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	8f 87       	std	Y+15, r24	; 0x0f
    44ce:	07 c0       	rjmp	.+14     	; 0x44de <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    44d0:	88 89       	ldd	r24, Y+16	; 0x10
    44d2:	8f 5f       	subi	r24, 0xFF	; 255
    44d4:	88 8b       	std	Y+16, r24	; 0x10
    44d6:	88 89       	ldd	r24, Y+16	; 0x10
    44d8:	84 30       	cpi	r24, 0x04	; 4
    44da:	08 f4       	brcc	.+2      	; 0x44de <KPD_u8GetKeyState+0x1da>
    44dc:	3b cf       	rjmp	.-394    	; 0x4354 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    44de:	89 89       	ldd	r24, Y+17	; 0x11
    44e0:	88 2f       	mov	r24, r24
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	fc 01       	movw	r30, r24
    44e6:	e5 58       	subi	r30, 0x85	; 133
    44e8:	fe 4f       	sbci	r31, 0xFE	; 254
    44ea:	90 81       	ld	r25, Z
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	69 2f       	mov	r22, r25
    44f0:	41 e0       	ldi	r20, 0x01	; 1
    44f2:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
			if(Local_u8Flag){
    44f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44f8:	88 23       	and	r24, r24
    44fa:	49 f4       	brne	.+18     	; 0x450e <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    44fc:	89 89       	ldd	r24, Y+17	; 0x11
    44fe:	8f 5f       	subi	r24, 0xFF	; 255
    4500:	89 8b       	std	Y+17, r24	; 0x11
    4502:	89 89       	ldd	r24, Y+17	; 0x11
    4504:	84 30       	cpi	r24, 0x04	; 4
    4506:	08 f4       	brcc	.+2      	; 0x450a <KPD_u8GetKeyState+0x206>
    4508:	17 cf       	rjmp	.-466    	; 0x4338 <KPD_u8GetKeyState+0x34>
    450a:	01 c0       	rjmp	.+2      	; 0x450e <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    450c:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    450e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4510:	65 96       	adiw	r28, 0x15	; 21
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	cf 91       	pop	r28
    451e:	df 91       	pop	r29
    4520:	08 95       	ret

00004522 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "DC_Motor_Config.h"
#include "DC_Motor_Private.h"

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	00 d0       	rcall	.+0      	; 0x4528 <DC_Motor_Init+0x6>
    4528:	0f 92       	push	r0
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
    452e:	8a 83       	std	Y+2, r24	; 0x02
    4530:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    4536:	8a 81       	ldd	r24, Y+2	; 0x02
    4538:	81 30       	cpi	r24, 0x01	; 1
    453a:	79 f4       	brne	.+30     	; 0x455a <DC_Motor_Init+0x38>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, DIO_u8_OUTPUT);
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	62 e0       	ldi	r22, 0x02	; 2
    4540:	41 e0       	ldi	r20, 0x01	; 1
    4542:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_u8_OUTPUT);
    4546:	83 e0       	ldi	r24, 0x03	; 3
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	41 e0       	ldi	r20, 0x01	; 1
    454c:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_u8_OUTPUT);
    4550:	83 e0       	ldi	r24, 0x03	; 3
    4552:	61 e0       	ldi	r22, 0x01	; 1
    4554:	41 e0       	ldi	r20, 0x01	; 1
    4556:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
	}

	if(Copy_u8_Motor2 == MOTOR_Connected){
    455a:	8b 81       	ldd	r24, Y+3	; 0x03
    455c:	81 30       	cpi	r24, 0x01	; 1
    455e:	81 f4       	brne	.+32     	; 0x4580 <DC_Motor_Init+0x5e>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, DIO_u8_OUTPUT);
    4560:	83 e0       	ldi	r24, 0x03	; 3
    4562:	63 e0       	ldi	r22, 0x03	; 3
    4564:	41 e0       	ldi	r20, 0x01	; 1
    4566:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_u8_OUTPUT);
    456a:	83 e0       	ldi	r24, 0x03	; 3
    456c:	66 e0       	ldi	r22, 0x06	; 6
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_u8_OUTPUT);
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	67 e0       	ldi	r22, 0x07	; 7
    4578:	41 e0       	ldi	r20, 0x01	; 1
    457a:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
    457e:	01 c0       	rjmp	.+2      	; 0x4582 <DC_Motor_Init+0x60>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4580:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4582:	89 81       	ldd	r24, Y+1	; 0x01
}
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	0f 90       	pop	r0
    458a:	cf 91       	pop	r28
    458c:	df 91       	pop	r29
    458e:	08 95       	ret

00004590 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    4590:	df 93       	push	r29
    4592:	cf 93       	push	r28
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	29 97       	sbiw	r28, 0x09	; 9
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	8a 83       	std	Y+2, r24	; 0x02
    45a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    45ac:	8a 81       	ldd	r24, Y+2	; 0x02
    45ae:	28 2f       	mov	r18, r24
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	39 87       	std	Y+9, r19	; 0x09
    45b4:	28 87       	std	Y+8, r18	; 0x08
    45b6:	88 85       	ldd	r24, Y+8	; 0x08
    45b8:	99 85       	ldd	r25, Y+9	; 0x09
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	31 f0       	breq	.+12     	; 0x45ca <DC_Motor_Rotate+0x3a>
    45be:	28 85       	ldd	r18, Y+8	; 0x08
    45c0:	39 85       	ldd	r19, Y+9	; 0x09
    45c2:	21 30       	cpi	r18, 0x01	; 1
    45c4:	31 05       	cpc	r19, r1
    45c6:	89 f1       	breq	.+98     	; 0x462a <DC_Motor_Rotate+0x9a>
    45c8:	60 c0       	rjmp	.+192    	; 0x468a <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    45ca:	8b 81       	ldd	r24, Y+3	; 0x03
    45cc:	28 2f       	mov	r18, r24
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	3f 83       	std	Y+7, r19	; 0x07
    45d2:	2e 83       	std	Y+6, r18	; 0x06
    45d4:	8e 81       	ldd	r24, Y+6	; 0x06
    45d6:	9f 81       	ldd	r25, Y+7	; 0x07
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	a9 f0       	breq	.+42     	; 0x4606 <DC_Motor_Rotate+0x76>
    45dc:	2e 81       	ldd	r18, Y+6	; 0x06
    45de:	3f 81       	ldd	r19, Y+7	; 0x07
    45e0:	21 30       	cpi	r18, 0x01	; 1
    45e2:	31 05       	cpc	r19, r1
    45e4:	01 f5       	brne	.+64     	; 0x4626 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	62 e0       	ldi	r22, 0x02	; 2
    45ea:	41 e0       	ldi	r20, 0x01	; 1
    45ec:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    45f0:	83 e0       	ldi	r24, 0x03	; 3
    45f2:	60 e0       	ldi	r22, 0x00	; 0
    45f4:	41 e0       	ldi	r20, 0x01	; 1
    45f6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    45fa:	83 e0       	ldi	r24, 0x03	; 3
    45fc:	61 e0       	ldi	r22, 0x01	; 1
    45fe:	40 e0       	ldi	r20, 0x00	; 0
    4600:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    4604:	43 c0       	rjmp	.+134    	; 0x468c <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4606:	83 e0       	ldi	r24, 0x03	; 3
    4608:	62 e0       	ldi	r22, 0x02	; 2
    460a:	41 e0       	ldi	r20, 0x01	; 1
    460c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    4610:	83 e0       	ldi	r24, 0x03	; 3
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    461a:	83 e0       	ldi	r24, 0x03	; 3
    461c:	61 e0       	ldi	r22, 0x01	; 1
    461e:	41 e0       	ldi	r20, 0x01	; 1
    4620:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    4624:	33 c0       	rjmp	.+102    	; 0x468c <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4626:	19 82       	std	Y+1, r1	; 0x01
    4628:	31 c0       	rjmp	.+98     	; 0x468c <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    462a:	8b 81       	ldd	r24, Y+3	; 0x03
    462c:	28 2f       	mov	r18, r24
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	3d 83       	std	Y+5, r19	; 0x05
    4632:	2c 83       	std	Y+4, r18	; 0x04
    4634:	8c 81       	ldd	r24, Y+4	; 0x04
    4636:	9d 81       	ldd	r25, Y+5	; 0x05
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	a9 f0       	breq	.+42     	; 0x4666 <DC_Motor_Rotate+0xd6>
    463c:	2c 81       	ldd	r18, Y+4	; 0x04
    463e:	3d 81       	ldd	r19, Y+5	; 0x05
    4640:	21 30       	cpi	r18, 0x01	; 1
    4642:	31 05       	cpc	r19, r1
    4644:	01 f5       	brne	.+64     	; 0x4686 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4646:	83 e0       	ldi	r24, 0x03	; 3
    4648:	63 e0       	ldi	r22, 0x03	; 3
    464a:	41 e0       	ldi	r20, 0x01	; 1
    464c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    4650:	83 e0       	ldi	r24, 0x03	; 3
    4652:	66 e0       	ldi	r22, 0x06	; 6
    4654:	41 e0       	ldi	r20, 0x01	; 1
    4656:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    465a:	83 e0       	ldi	r24, 0x03	; 3
    465c:	67 e0       	ldi	r22, 0x07	; 7
    465e:	40 e0       	ldi	r20, 0x00	; 0
    4660:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    4664:	13 c0       	rjmp	.+38     	; 0x468c <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	63 e0       	ldi	r22, 0x03	; 3
    466a:	41 e0       	ldi	r20, 0x01	; 1
    466c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    4670:	83 e0       	ldi	r24, 0x03	; 3
    4672:	66 e0       	ldi	r22, 0x06	; 6
    4674:	40 e0       	ldi	r20, 0x00	; 0
    4676:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    467a:	83 e0       	ldi	r24, 0x03	; 3
    467c:	67 e0       	ldi	r22, 0x07	; 7
    467e:	41 e0       	ldi	r20, 0x01	; 1
    4680:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    4684:	03 c0       	rjmp	.+6      	; 0x468c <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4686:	19 82       	std	Y+1, r1	; 0x01
    4688:	01 c0       	rjmp	.+2      	; 0x468c <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    468a:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    468c:	89 81       	ldd	r24, Y+1	; 0x01
}
    468e:	29 96       	adiw	r28, 0x09	; 9
    4690:	0f b6       	in	r0, 0x3f	; 63
    4692:	f8 94       	cli
    4694:	de bf       	out	0x3e, r29	; 62
    4696:	0f be       	out	0x3f, r0	; 63
    4698:	cd bf       	out	0x3d, r28	; 61
    469a:	cf 91       	pop	r28
    469c:	df 91       	pop	r29
    469e:	08 95       	ret

000046a0 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    46a0:	df 93       	push	r29
    46a2:	cf 93       	push	r28
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <DC_Motor_Stop+0x6>
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
    46aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    46b0:	8a 81       	ldd	r24, Y+2	; 0x02
    46b2:	88 23       	and	r24, r24
    46b4:	31 f4       	brne	.+12     	; 0x46c2 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    46b6:	83 e0       	ldi	r24, 0x03	; 3
    46b8:	62 e0       	ldi	r22, 0x02	; 2
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    46c0:	0a c0       	rjmp	.+20     	; 0x46d6 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    46c2:	8a 81       	ldd	r24, Y+2	; 0x02
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	31 f4       	brne	.+12     	; 0x46d4 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    46c8:	83 e0       	ldi	r24, 0x03	; 3
    46ca:	63 e0       	ldi	r22, 0x03	; 3
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    46d2:	01 c0       	rjmp	.+2      	; 0x46d6 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    46d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	cf 91       	pop	r28
    46de:	df 91       	pop	r29
    46e0:	08 95       	ret

000046e2 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    46e2:	df 93       	push	r29
    46e4:	cf 93       	push	r28
    46e6:	0f 92       	push	r0
    46e8:	cd b7       	in	r28, 0x3d	; 61
    46ea:	de b7       	in	r29, 0x3e	; 62
    46ec:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    46ee:	89 81       	ldd	r24, Y+1	; 0x01
    46f0:	61 e0       	ldi	r22, 0x01	; 1
    46f2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <DIO_u8SetPortDirection>
}
    46f6:	0f 90       	pop	r0
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    46fe:	af 92       	push	r10
    4700:	cf 92       	push	r12
    4702:	ef 92       	push	r14
    4704:	0f 93       	push	r16
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	cd b7       	in	r28, 0x3d	; 61
    470c:	de b7       	in	r29, 0x3e	; 62
    470e:	2a 97       	sbiw	r28, 0x0a	; 10
    4710:	0f b6       	in	r0, 0x3f	; 63
    4712:	f8 94       	cli
    4714:	de bf       	out	0x3e, r29	; 62
    4716:	0f be       	out	0x3f, r0	; 63
    4718:	cd bf       	out	0x3d, r28	; 61
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	6a 83       	std	Y+2, r22	; 0x02
    471e:	4b 83       	std	Y+3, r20	; 0x03
    4720:	2c 83       	std	Y+4, r18	; 0x04
    4722:	0d 83       	std	Y+5, r16	; 0x05
    4724:	ee 82       	std	Y+6, r14	; 0x06
    4726:	cf 82       	std	Y+7, r12	; 0x07
    4728:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	28 2f       	mov	r18, r24
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	3a 87       	std	Y+10, r19	; 0x0a
    4732:	29 87       	std	Y+9, r18	; 0x09
    4734:	89 85       	ldd	r24, Y+9	; 0x09
    4736:	9a 85       	ldd	r25, Y+10	; 0x0a
    4738:	81 30       	cpi	r24, 0x01	; 1
    473a:	91 05       	cpc	r25, r1
    473c:	09 f4       	brne	.+2      	; 0x4740 <SevenSegment_Display+0x42>
    473e:	96 c0       	rjmp	.+300    	; 0x486c <SevenSegment_Display+0x16e>
    4740:	29 85       	ldd	r18, Y+9	; 0x09
    4742:	3a 85       	ldd	r19, Y+10	; 0x0a
    4744:	22 30       	cpi	r18, 0x02	; 2
    4746:	31 05       	cpc	r19, r1
    4748:	2c f4       	brge	.+10     	; 0x4754 <SevenSegment_Display+0x56>
    474a:	89 85       	ldd	r24, Y+9	; 0x09
    474c:	9a 85       	ldd	r25, Y+10	; 0x0a
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	71 f0       	breq	.+28     	; 0x476e <SevenSegment_Display+0x70>
    4752:	08 c2       	rjmp	.+1040   	; 0x4b64 <SevenSegment_Display+0x466>
    4754:	29 85       	ldd	r18, Y+9	; 0x09
    4756:	3a 85       	ldd	r19, Y+10	; 0x0a
    4758:	22 30       	cpi	r18, 0x02	; 2
    475a:	31 05       	cpc	r19, r1
    475c:	09 f4       	brne	.+2      	; 0x4760 <SevenSegment_Display+0x62>
    475e:	05 c1       	rjmp	.+522    	; 0x496a <SevenSegment_Display+0x26c>
    4760:	89 85       	ldd	r24, Y+9	; 0x09
    4762:	9a 85       	ldd	r25, Y+10	; 0x0a
    4764:	83 30       	cpi	r24, 0x03	; 3
    4766:	91 05       	cpc	r25, r1
    4768:	09 f4       	brne	.+2      	; 0x476c <SevenSegment_Display+0x6e>
    476a:	7e c1       	rjmp	.+764    	; 0x4a68 <SevenSegment_Display+0x36a>
    476c:	fb c1       	rjmp	.+1014   	; 0x4b64 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    476e:	8a 81       	ldd	r24, Y+2	; 0x02
    4770:	81 30       	cpi	r24, 0x01	; 1
    4772:	41 f4       	brne	.+16     	; 0x4784 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4774:	ab e3       	ldi	r26, 0x3B	; 59
    4776:	b0 e0       	ldi	r27, 0x00	; 0
    4778:	eb e3       	ldi	r30, 0x3B	; 59
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	80 81       	ld	r24, Z
    477e:	81 60       	ori	r24, 0x01	; 1
    4780:	8c 93       	st	X, r24
    4782:	07 c0       	rjmp	.+14     	; 0x4792 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4784:	ab e3       	ldi	r26, 0x3B	; 59
    4786:	b0 e0       	ldi	r27, 0x00	; 0
    4788:	eb e3       	ldi	r30, 0x3B	; 59
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	80 81       	ld	r24, Z
    478e:	8e 7f       	andi	r24, 0xFE	; 254
    4790:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4792:	8b 81       	ldd	r24, Y+3	; 0x03
    4794:	81 30       	cpi	r24, 0x01	; 1
    4796:	41 f4       	brne	.+16     	; 0x47a8 <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    4798:	ab e3       	ldi	r26, 0x3B	; 59
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	eb e3       	ldi	r30, 0x3B	; 59
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 81       	ld	r24, Z
    47a2:	82 60       	ori	r24, 0x02	; 2
    47a4:	8c 93       	st	X, r24
    47a6:	07 c0       	rjmp	.+14     	; 0x47b6 <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    47a8:	ab e3       	ldi	r26, 0x3B	; 59
    47aa:	b0 e0       	ldi	r27, 0x00	; 0
    47ac:	eb e3       	ldi	r30, 0x3B	; 59
    47ae:	f0 e0       	ldi	r31, 0x00	; 0
    47b0:	80 81       	ld	r24, Z
    47b2:	8d 7f       	andi	r24, 0xFD	; 253
    47b4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    47b6:	8c 81       	ldd	r24, Y+4	; 0x04
    47b8:	81 30       	cpi	r24, 0x01	; 1
    47ba:	41 f4       	brne	.+16     	; 0x47cc <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    47bc:	ab e3       	ldi	r26, 0x3B	; 59
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	eb e3       	ldi	r30, 0x3B	; 59
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	84 60       	ori	r24, 0x04	; 4
    47c8:	8c 93       	st	X, r24
    47ca:	07 c0       	rjmp	.+14     	; 0x47da <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    47cc:	ab e3       	ldi	r26, 0x3B	; 59
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	eb e3       	ldi	r30, 0x3B	; 59
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	80 81       	ld	r24, Z
    47d6:	8b 7f       	andi	r24, 0xFB	; 251
    47d8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    47da:	8d 81       	ldd	r24, Y+5	; 0x05
    47dc:	81 30       	cpi	r24, 0x01	; 1
    47de:	41 f4       	brne	.+16     	; 0x47f0 <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    47e0:	ab e3       	ldi	r26, 0x3B	; 59
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	eb e3       	ldi	r30, 0x3B	; 59
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	80 81       	ld	r24, Z
    47ea:	88 60       	ori	r24, 0x08	; 8
    47ec:	8c 93       	st	X, r24
    47ee:	07 c0       	rjmp	.+14     	; 0x47fe <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    47f0:	ab e3       	ldi	r26, 0x3B	; 59
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	eb e3       	ldi	r30, 0x3B	; 59
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	87 7f       	andi	r24, 0xF7	; 247
    47fc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    47fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	41 f4       	brne	.+16     	; 0x4814 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4804:	ab e3       	ldi	r26, 0x3B	; 59
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	eb e3       	ldi	r30, 0x3B	; 59
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	80 61       	ori	r24, 0x10	; 16
    4810:	8c 93       	st	X, r24
    4812:	07 c0       	rjmp	.+14     	; 0x4822 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4814:	ab e3       	ldi	r26, 0x3B	; 59
    4816:	b0 e0       	ldi	r27, 0x00	; 0
    4818:	eb e3       	ldi	r30, 0x3B	; 59
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	80 81       	ld	r24, Z
    481e:	8f 7e       	andi	r24, 0xEF	; 239
    4820:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4822:	8f 81       	ldd	r24, Y+7	; 0x07
    4824:	81 30       	cpi	r24, 0x01	; 1
    4826:	41 f4       	brne	.+16     	; 0x4838 <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4828:	ab e3       	ldi	r26, 0x3B	; 59
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	eb e3       	ldi	r30, 0x3B	; 59
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	80 81       	ld	r24, Z
    4832:	80 62       	ori	r24, 0x20	; 32
    4834:	8c 93       	st	X, r24
    4836:	07 c0       	rjmp	.+14     	; 0x4846 <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4838:	ab e3       	ldi	r26, 0x3B	; 59
    483a:	b0 e0       	ldi	r27, 0x00	; 0
    483c:	eb e3       	ldi	r30, 0x3B	; 59
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	80 81       	ld	r24, Z
    4842:	8f 7d       	andi	r24, 0xDF	; 223
    4844:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4846:	88 85       	ldd	r24, Y+8	; 0x08
    4848:	81 30       	cpi	r24, 0x01	; 1
    484a:	41 f4       	brne	.+16     	; 0x485c <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    484c:	ab e3       	ldi	r26, 0x3B	; 59
    484e:	b0 e0       	ldi	r27, 0x00	; 0
    4850:	eb e3       	ldi	r30, 0x3B	; 59
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	80 81       	ld	r24, Z
    4856:	80 64       	ori	r24, 0x40	; 64
    4858:	8c 93       	st	X, r24
    485a:	84 c1       	rjmp	.+776    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    485c:	ab e3       	ldi	r26, 0x3B	; 59
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	eb e3       	ldi	r30, 0x3B	; 59
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	80 81       	ld	r24, Z
    4866:	8f 7b       	andi	r24, 0xBF	; 191
    4868:	8c 93       	st	X, r24
    486a:	7c c1       	rjmp	.+760    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    486c:	8a 81       	ldd	r24, Y+2	; 0x02
    486e:	81 30       	cpi	r24, 0x01	; 1
    4870:	41 f4       	brne	.+16     	; 0x4882 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4872:	a8 e3       	ldi	r26, 0x38	; 56
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	e8 e3       	ldi	r30, 0x38	; 56
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	81 60       	ori	r24, 0x01	; 1
    487e:	8c 93       	st	X, r24
    4880:	07 c0       	rjmp	.+14     	; 0x4890 <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4882:	a8 e3       	ldi	r26, 0x38	; 56
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e8 e3       	ldi	r30, 0x38	; 56
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	8e 7f       	andi	r24, 0xFE	; 254
    488e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4890:	8b 81       	ldd	r24, Y+3	; 0x03
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	41 f4       	brne	.+16     	; 0x48a6 <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    4896:	a8 e3       	ldi	r26, 0x38	; 56
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e8 e3       	ldi	r30, 0x38	; 56
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	82 60       	ori	r24, 0x02	; 2
    48a2:	8c 93       	st	X, r24
    48a4:	07 c0       	rjmp	.+14     	; 0x48b4 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    48a6:	a8 e3       	ldi	r26, 0x38	; 56
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	e8 e3       	ldi	r30, 0x38	; 56
    48ac:	f0 e0       	ldi	r31, 0x00	; 0
    48ae:	80 81       	ld	r24, Z
    48b0:	8d 7f       	andi	r24, 0xFD	; 253
    48b2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    48b4:	8c 81       	ldd	r24, Y+4	; 0x04
    48b6:	81 30       	cpi	r24, 0x01	; 1
    48b8:	41 f4       	brne	.+16     	; 0x48ca <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    48ba:	a8 e3       	ldi	r26, 0x38	; 56
    48bc:	b0 e0       	ldi	r27, 0x00	; 0
    48be:	e8 e3       	ldi	r30, 0x38	; 56
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	80 81       	ld	r24, Z
    48c4:	84 60       	ori	r24, 0x04	; 4
    48c6:	8c 93       	st	X, r24
    48c8:	07 c0       	rjmp	.+14     	; 0x48d8 <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    48ca:	a8 e3       	ldi	r26, 0x38	; 56
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	e8 e3       	ldi	r30, 0x38	; 56
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	8b 7f       	andi	r24, 0xFB	; 251
    48d6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	81 30       	cpi	r24, 0x01	; 1
    48dc:	41 f4       	brne	.+16     	; 0x48ee <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    48de:	a8 e3       	ldi	r26, 0x38	; 56
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	e8 e3       	ldi	r30, 0x38	; 56
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	88 60       	ori	r24, 0x08	; 8
    48ea:	8c 93       	st	X, r24
    48ec:	07 c0       	rjmp	.+14     	; 0x48fc <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    48ee:	a8 e3       	ldi	r26, 0x38	; 56
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	e8 e3       	ldi	r30, 0x38	; 56
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
    48f8:	87 7f       	andi	r24, 0xF7	; 247
    48fa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    48fc:	8e 81       	ldd	r24, Y+6	; 0x06
    48fe:	81 30       	cpi	r24, 0x01	; 1
    4900:	41 f4       	brne	.+16     	; 0x4912 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4902:	a8 e3       	ldi	r26, 0x38	; 56
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	e8 e3       	ldi	r30, 0x38	; 56
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	80 61       	ori	r24, 0x10	; 16
    490e:	8c 93       	st	X, r24
    4910:	07 c0       	rjmp	.+14     	; 0x4920 <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4912:	a8 e3       	ldi	r26, 0x38	; 56
    4914:	b0 e0       	ldi	r27, 0x00	; 0
    4916:	e8 e3       	ldi	r30, 0x38	; 56
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	80 81       	ld	r24, Z
    491c:	8f 7e       	andi	r24, 0xEF	; 239
    491e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4920:	8f 81       	ldd	r24, Y+7	; 0x07
    4922:	81 30       	cpi	r24, 0x01	; 1
    4924:	41 f4       	brne	.+16     	; 0x4936 <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4926:	a8 e3       	ldi	r26, 0x38	; 56
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	e8 e3       	ldi	r30, 0x38	; 56
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	80 81       	ld	r24, Z
    4930:	80 62       	ori	r24, 0x20	; 32
    4932:	8c 93       	st	X, r24
    4934:	07 c0       	rjmp	.+14     	; 0x4944 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4936:	a8 e3       	ldi	r26, 0x38	; 56
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	e8 e3       	ldi	r30, 0x38	; 56
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	8f 7d       	andi	r24, 0xDF	; 223
    4942:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4944:	88 85       	ldd	r24, Y+8	; 0x08
    4946:	81 30       	cpi	r24, 0x01	; 1
    4948:	41 f4       	brne	.+16     	; 0x495a <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    494a:	a8 e3       	ldi	r26, 0x38	; 56
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	e8 e3       	ldi	r30, 0x38	; 56
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	80 64       	ori	r24, 0x40	; 64
    4956:	8c 93       	st	X, r24
    4958:	05 c1       	rjmp	.+522    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    495a:	a8 e3       	ldi	r26, 0x38	; 56
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	e8 e3       	ldi	r30, 0x38	; 56
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	8f 7b       	andi	r24, 0xBF	; 191
    4966:	8c 93       	st	X, r24
    4968:	fd c0       	rjmp	.+506    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	41 f4       	brne	.+16     	; 0x4980 <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4970:	a5 e3       	ldi	r26, 0x35	; 53
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	e5 e3       	ldi	r30, 0x35	; 53
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	81 60       	ori	r24, 0x01	; 1
    497c:	8c 93       	st	X, r24
    497e:	07 c0       	rjmp	.+14     	; 0x498e <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4980:	a5 e3       	ldi	r26, 0x35	; 53
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	e5 e3       	ldi	r30, 0x35	; 53
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	8e 7f       	andi	r24, 0xFE	; 254
    498c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    498e:	8b 81       	ldd	r24, Y+3	; 0x03
    4990:	81 30       	cpi	r24, 0x01	; 1
    4992:	41 f4       	brne	.+16     	; 0x49a4 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    4994:	a5 e3       	ldi	r26, 0x35	; 53
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e5 e3       	ldi	r30, 0x35	; 53
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	80 81       	ld	r24, Z
    499e:	82 60       	ori	r24, 0x02	; 2
    49a0:	8c 93       	st	X, r24
    49a2:	07 c0       	rjmp	.+14     	; 0x49b2 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    49a4:	a5 e3       	ldi	r26, 0x35	; 53
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	e5 e3       	ldi	r30, 0x35	; 53
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	8d 7f       	andi	r24, 0xFD	; 253
    49b0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    49b2:	8c 81       	ldd	r24, Y+4	; 0x04
    49b4:	81 30       	cpi	r24, 0x01	; 1
    49b6:	41 f4       	brne	.+16     	; 0x49c8 <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    49b8:	a5 e3       	ldi	r26, 0x35	; 53
    49ba:	b0 e0       	ldi	r27, 0x00	; 0
    49bc:	e5 e3       	ldi	r30, 0x35	; 53
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	80 81       	ld	r24, Z
    49c2:	84 60       	ori	r24, 0x04	; 4
    49c4:	8c 93       	st	X, r24
    49c6:	07 c0       	rjmp	.+14     	; 0x49d6 <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    49c8:	a5 e3       	ldi	r26, 0x35	; 53
    49ca:	b0 e0       	ldi	r27, 0x00	; 0
    49cc:	e5 e3       	ldi	r30, 0x35	; 53
    49ce:	f0 e0       	ldi	r31, 0x00	; 0
    49d0:	80 81       	ld	r24, Z
    49d2:	8b 7f       	andi	r24, 0xFB	; 251
    49d4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    49d6:	8d 81       	ldd	r24, Y+5	; 0x05
    49d8:	81 30       	cpi	r24, 0x01	; 1
    49da:	41 f4       	brne	.+16     	; 0x49ec <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    49dc:	a5 e3       	ldi	r26, 0x35	; 53
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	e5 e3       	ldi	r30, 0x35	; 53
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	80 81       	ld	r24, Z
    49e6:	88 60       	ori	r24, 0x08	; 8
    49e8:	8c 93       	st	X, r24
    49ea:	07 c0       	rjmp	.+14     	; 0x49fa <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    49ec:	a5 e3       	ldi	r26, 0x35	; 53
    49ee:	b0 e0       	ldi	r27, 0x00	; 0
    49f0:	e5 e3       	ldi	r30, 0x35	; 53
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	80 81       	ld	r24, Z
    49f6:	87 7f       	andi	r24, 0xF7	; 247
    49f8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    49fa:	8e 81       	ldd	r24, Y+6	; 0x06
    49fc:	81 30       	cpi	r24, 0x01	; 1
    49fe:	41 f4       	brne	.+16     	; 0x4a10 <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a00:	a5 e3       	ldi	r26, 0x35	; 53
    4a02:	b0 e0       	ldi	r27, 0x00	; 0
    4a04:	e5 e3       	ldi	r30, 0x35	; 53
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	80 81       	ld	r24, Z
    4a0a:	80 61       	ori	r24, 0x10	; 16
    4a0c:	8c 93       	st	X, r24
    4a0e:	07 c0       	rjmp	.+14     	; 0x4a1e <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4a10:	a5 e3       	ldi	r26, 0x35	; 53
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	e5 e3       	ldi	r30, 0x35	; 53
    4a16:	f0 e0       	ldi	r31, 0x00	; 0
    4a18:	80 81       	ld	r24, Z
    4a1a:	8f 7e       	andi	r24, 0xEF	; 239
    4a1c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4a1e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a20:	81 30       	cpi	r24, 0x01	; 1
    4a22:	41 f4       	brne	.+16     	; 0x4a34 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4a24:	a5 e3       	ldi	r26, 0x35	; 53
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e5 e3       	ldi	r30, 0x35	; 53
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 81       	ld	r24, Z
    4a2e:	80 62       	ori	r24, 0x20	; 32
    4a30:	8c 93       	st	X, r24
    4a32:	07 c0       	rjmp	.+14     	; 0x4a42 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4a34:	a5 e3       	ldi	r26, 0x35	; 53
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	e5 e3       	ldi	r30, 0x35	; 53
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	8f 7d       	andi	r24, 0xDF	; 223
    4a40:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4a42:	88 85       	ldd	r24, Y+8	; 0x08
    4a44:	81 30       	cpi	r24, 0x01	; 1
    4a46:	41 f4       	brne	.+16     	; 0x4a58 <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4a48:	a5 e3       	ldi	r26, 0x35	; 53
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	e5 e3       	ldi	r30, 0x35	; 53
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	80 64       	ori	r24, 0x40	; 64
    4a54:	8c 93       	st	X, r24
    4a56:	86 c0       	rjmp	.+268    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4a58:	a5 e3       	ldi	r26, 0x35	; 53
    4a5a:	b0 e0       	ldi	r27, 0x00	; 0
    4a5c:	e5 e3       	ldi	r30, 0x35	; 53
    4a5e:	f0 e0       	ldi	r31, 0x00	; 0
    4a60:	80 81       	ld	r24, Z
    4a62:	8f 7b       	andi	r24, 0xBF	; 191
    4a64:	8c 93       	st	X, r24
    4a66:	7e c0       	rjmp	.+252    	; 0x4b64 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	81 30       	cpi	r24, 0x01	; 1
    4a6c:	41 f4       	brne	.+16     	; 0x4a7e <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4a6e:	a2 e3       	ldi	r26, 0x32	; 50
    4a70:	b0 e0       	ldi	r27, 0x00	; 0
    4a72:	e2 e3       	ldi	r30, 0x32	; 50
    4a74:	f0 e0       	ldi	r31, 0x00	; 0
    4a76:	80 81       	ld	r24, Z
    4a78:	81 60       	ori	r24, 0x01	; 1
    4a7a:	8c 93       	st	X, r24
    4a7c:	07 c0       	rjmp	.+14     	; 0x4a8c <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4a7e:	a2 e3       	ldi	r26, 0x32	; 50
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	e2 e3       	ldi	r30, 0x32	; 50
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	80 81       	ld	r24, Z
    4a88:	8e 7f       	andi	r24, 0xFE	; 254
    4a8a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8e:	81 30       	cpi	r24, 0x01	; 1
    4a90:	41 f4       	brne	.+16     	; 0x4aa2 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4a92:	a2 e3       	ldi	r26, 0x32	; 50
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	e2 e3       	ldi	r30, 0x32	; 50
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	82 60       	ori	r24, 0x02	; 2
    4a9e:	8c 93       	st	X, r24
    4aa0:	07 c0       	rjmp	.+14     	; 0x4ab0 <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4aa2:	a2 e3       	ldi	r26, 0x32	; 50
    4aa4:	b0 e0       	ldi	r27, 0x00	; 0
    4aa6:	e2 e3       	ldi	r30, 0x32	; 50
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	80 81       	ld	r24, Z
    4aac:	8d 7f       	andi	r24, 0xFD	; 253
    4aae:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab2:	81 30       	cpi	r24, 0x01	; 1
    4ab4:	41 f4       	brne	.+16     	; 0x4ac6 <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4ab6:	a2 e3       	ldi	r26, 0x32	; 50
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	e2 e3       	ldi	r30, 0x32	; 50
    4abc:	f0 e0       	ldi	r31, 0x00	; 0
    4abe:	80 81       	ld	r24, Z
    4ac0:	84 60       	ori	r24, 0x04	; 4
    4ac2:	8c 93       	st	X, r24
    4ac4:	07 c0       	rjmp	.+14     	; 0x4ad4 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4ac6:	a2 e3       	ldi	r26, 0x32	; 50
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	e2 e3       	ldi	r30, 0x32	; 50
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	80 81       	ld	r24, Z
    4ad0:	8b 7f       	andi	r24, 0xFB	; 251
    4ad2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    4ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad6:	81 30       	cpi	r24, 0x01	; 1
    4ad8:	41 f4       	brne	.+16     	; 0x4aea <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4ada:	a2 e3       	ldi	r26, 0x32	; 50
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e2 e3       	ldi	r30, 0x32	; 50
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	88 60       	ori	r24, 0x08	; 8
    4ae6:	8c 93       	st	X, r24
    4ae8:	07 c0       	rjmp	.+14     	; 0x4af8 <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    4aea:	a2 e3       	ldi	r26, 0x32	; 50
    4aec:	b0 e0       	ldi	r27, 0x00	; 0
    4aee:	e2 e3       	ldi	r30, 0x32	; 50
    4af0:	f0 e0       	ldi	r31, 0x00	; 0
    4af2:	80 81       	ld	r24, Z
    4af4:	87 7f       	andi	r24, 0xF7	; 247
    4af6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4af8:	8e 81       	ldd	r24, Y+6	; 0x06
    4afa:	81 30       	cpi	r24, 0x01	; 1
    4afc:	41 f4       	brne	.+16     	; 0x4b0e <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4afe:	a2 e3       	ldi	r26, 0x32	; 50
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	e2 e3       	ldi	r30, 0x32	; 50
    4b04:	f0 e0       	ldi	r31, 0x00	; 0
    4b06:	80 81       	ld	r24, Z
    4b08:	80 61       	ori	r24, 0x10	; 16
    4b0a:	8c 93       	st	X, r24
    4b0c:	07 c0       	rjmp	.+14     	; 0x4b1c <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4b0e:	a2 e3       	ldi	r26, 0x32	; 50
    4b10:	b0 e0       	ldi	r27, 0x00	; 0
    4b12:	e2 e3       	ldi	r30, 0x32	; 50
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	80 81       	ld	r24, Z
    4b18:	8f 7e       	andi	r24, 0xEF	; 239
    4b1a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b1e:	81 30       	cpi	r24, 0x01	; 1
    4b20:	41 f4       	brne	.+16     	; 0x4b32 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4b22:	a2 e3       	ldi	r26, 0x32	; 50
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e2 e3       	ldi	r30, 0x32	; 50
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	80 62       	ori	r24, 0x20	; 32
    4b2e:	8c 93       	st	X, r24
    4b30:	07 c0       	rjmp	.+14     	; 0x4b40 <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4b32:	a2 e3       	ldi	r26, 0x32	; 50
    4b34:	b0 e0       	ldi	r27, 0x00	; 0
    4b36:	e2 e3       	ldi	r30, 0x32	; 50
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	80 81       	ld	r24, Z
    4b3c:	8f 7d       	andi	r24, 0xDF	; 223
    4b3e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4b40:	88 85       	ldd	r24, Y+8	; 0x08
    4b42:	81 30       	cpi	r24, 0x01	; 1
    4b44:	41 f4       	brne	.+16     	; 0x4b56 <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4b46:	a2 e3       	ldi	r26, 0x32	; 50
    4b48:	b0 e0       	ldi	r27, 0x00	; 0
    4b4a:	e2 e3       	ldi	r30, 0x32	; 50
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	80 64       	ori	r24, 0x40	; 64
    4b52:	8c 93       	st	X, r24
    4b54:	07 c0       	rjmp	.+14     	; 0x4b64 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4b56:	a2 e3       	ldi	r26, 0x32	; 50
    4b58:	b0 e0       	ldi	r27, 0x00	; 0
    4b5a:	e2 e3       	ldi	r30, 0x32	; 50
    4b5c:	f0 e0       	ldi	r31, 0x00	; 0
    4b5e:	80 81       	ld	r24, Z
    4b60:	8f 7b       	andi	r24, 0xBF	; 191
    4b62:	8c 93       	st	X, r24
		}
		break;
	}
}
    4b64:	2a 96       	adiw	r28, 0x0a	; 10
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	0f 91       	pop	r16
    4b76:	ef 90       	pop	r14
    4b78:	cf 90       	pop	r12
    4b7a:	af 90       	pop	r10
    4b7c:	08 95       	ret

00004b7e <SevenSegment_From0To9>:

void SevenSegment_From0To9(u8 Copy_u8PortId){
    4b7e:	af 92       	push	r10
    4b80:	cf 92       	push	r12
    4b82:	ef 92       	push	r14
    4b84:	0f 93       	push	r16
    4b86:	1f 93       	push	r17
    4b88:	df 93       	push	r29
    4b8a:	cf 93       	push	r28
    4b8c:	cd b7       	in	r28, 0x3d	; 61
    4b8e:	de b7       	in	r29, 0x3e	; 62
    4b90:	cd 58       	subi	r28, 0x8D	; 141
    4b92:	d0 40       	sbci	r29, 0x00	; 0
    4b94:	0f b6       	in	r0, 0x3f	; 63
    4b96:	f8 94       	cli
    4b98:	de bf       	out	0x3e, r29	; 62
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	cd bf       	out	0x3d, r28	; 61
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	e3 57       	subi	r30, 0x73	; 115
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 0); // 0
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	e3 57       	subi	r30, 0x73	; 115
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	80 81       	ld	r24, Z
    4bae:	61 e0       	ldi	r22, 0x01	; 1
    4bb0:	41 e0       	ldi	r20, 0x01	; 1
    4bb2:	21 e0       	ldi	r18, 0x01	; 1
    4bb4:	01 e0       	ldi	r16, 0x01	; 1
    4bb6:	ee 24       	eor	r14, r14
    4bb8:	e3 94       	inc	r14
    4bba:	cc 24       	eor	r12, r12
    4bbc:	c3 94       	inc	r12
    4bbe:	aa 24       	eor	r10, r10
    4bc0:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	e7 57       	subi	r30, 0x77	; 119
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	a8 e4       	ldi	r26, 0x48	; 72
    4bd0:	b2 e4       	ldi	r27, 0x42	; 66
    4bd2:	80 83       	st	Z, r24
    4bd4:	91 83       	std	Z+1, r25	; 0x01
    4bd6:	a2 83       	std	Z+2, r26	; 0x02
    4bd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bda:	8e 01       	movw	r16, r28
    4bdc:	0b 57       	subi	r16, 0x7B	; 123
    4bde:	1f 4f       	sbci	r17, 0xFF	; 255
    4be0:	fe 01       	movw	r30, r28
    4be2:	e7 57       	subi	r30, 0x77	; 119
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	60 81       	ld	r22, Z
    4be8:	71 81       	ldd	r23, Z+1	; 0x01
    4bea:	82 81       	ldd	r24, Z+2	; 0x02
    4bec:	93 81       	ldd	r25, Z+3	; 0x03
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	4a e7       	ldi	r20, 0x7A	; 122
    4bf4:	55 e4       	ldi	r21, 0x45	; 69
    4bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	f8 01       	movw	r30, r16
    4c00:	80 83       	st	Z, r24
    4c02:	91 83       	std	Z+1, r25	; 0x01
    4c04:	a2 83       	std	Z+2, r26	; 0x02
    4c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c08:	fe 01       	movw	r30, r28
    4c0a:	eb 57       	subi	r30, 0x7B	; 123
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	60 81       	ld	r22, Z
    4c10:	71 81       	ldd	r23, Z+1	; 0x01
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	93 81       	ldd	r25, Z+3	; 0x03
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e8       	ldi	r20, 0x80	; 128
    4c1c:	5f e3       	ldi	r21, 0x3F	; 63
    4c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c22:	88 23       	and	r24, r24
    4c24:	44 f4       	brge	.+16     	; 0x4c36 <SevenSegment_From0To9+0xb8>
		__ticks = 1;
    4c26:	fe 01       	movw	r30, r28
    4c28:	ed 57       	subi	r30, 0x7D	; 125
    4c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	91 83       	std	Z+1, r25	; 0x01
    4c32:	80 83       	st	Z, r24
    4c34:	64 c0       	rjmp	.+200    	; 0x4cfe <SevenSegment_From0To9+0x180>
	else if (__tmp > 65535)
    4c36:	fe 01       	movw	r30, r28
    4c38:	eb 57       	subi	r30, 0x7B	; 123
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	60 81       	ld	r22, Z
    4c3e:	71 81       	ldd	r23, Z+1	; 0x01
    4c40:	82 81       	ldd	r24, Z+2	; 0x02
    4c42:	93 81       	ldd	r25, Z+3	; 0x03
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	3f ef       	ldi	r19, 0xFF	; 255
    4c48:	4f e7       	ldi	r20, 0x7F	; 127
    4c4a:	57 e4       	ldi	r21, 0x47	; 71
    4c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c50:	18 16       	cp	r1, r24
    4c52:	0c f0       	brlt	.+2      	; 0x4c56 <SevenSegment_From0To9+0xd8>
    4c54:	43 c0       	rjmp	.+134    	; 0x4cdc <SevenSegment_From0To9+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c56:	fe 01       	movw	r30, r28
    4c58:	e7 57       	subi	r30, 0x77	; 119
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	60 81       	ld	r22, Z
    4c5e:	71 81       	ldd	r23, Z+1	; 0x01
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	93 81       	ldd	r25, Z+3	; 0x03
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	40 e2       	ldi	r20, 0x20	; 32
    4c6a:	51 e4       	ldi	r21, 0x41	; 65
    4c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	8e 01       	movw	r16, r28
    4c76:	0d 57       	subi	r16, 0x7D	; 125
    4c78:	1f 4f       	sbci	r17, 0xFF	; 255
    4c7a:	bc 01       	movw	r22, r24
    4c7c:	cd 01       	movw	r24, r26
    4c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	f8 01       	movw	r30, r16
    4c88:	91 83       	std	Z+1, r25	; 0x01
    4c8a:	80 83       	st	Z, r24
    4c8c:	1f c0       	rjmp	.+62     	; 0x4ccc <SevenSegment_From0To9+0x14e>
    4c8e:	fe 01       	movw	r30, r28
    4c90:	ef 57       	subi	r30, 0x7F	; 127
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 e9       	ldi	r24, 0x90	; 144
    4c96:	91 e0       	ldi	r25, 0x01	; 1
    4c98:	91 83       	std	Z+1, r25	; 0x01
    4c9a:	80 83       	st	Z, r24
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	ef 57       	subi	r30, 0x7F	; 127
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	80 81       	ld	r24, Z
    4ca4:	91 81       	ldd	r25, Z+1	; 0x01
    4ca6:	01 97       	sbiw	r24, 0x01	; 1
    4ca8:	f1 f7       	brne	.-4      	; 0x4ca6 <SevenSegment_From0To9+0x128>
    4caa:	fe 01       	movw	r30, r28
    4cac:	ef 57       	subi	r30, 0x7F	; 127
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cb4:	de 01       	movw	r26, r28
    4cb6:	ad 57       	subi	r26, 0x7D	; 125
    4cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    4cba:	fe 01       	movw	r30, r28
    4cbc:	ed 57       	subi	r30, 0x7D	; 125
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	80 81       	ld	r24, Z
    4cc2:	91 81       	ldd	r25, Z+1	; 0x01
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	11 96       	adiw	r26, 0x01	; 1
    4cc8:	9c 93       	st	X, r25
    4cca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ed 57       	subi	r30, 0x7D	; 125
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	80 81       	ld	r24, Z
    4cd4:	91 81       	ldd	r25, Z+1	; 0x01
    4cd6:	00 97       	sbiw	r24, 0x00	; 0
    4cd8:	d1 f6       	brne	.-76     	; 0x4c8e <SevenSegment_From0To9+0x110>
    4cda:	27 c0       	rjmp	.+78     	; 0x4d2a <SevenSegment_From0To9+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cdc:	8e 01       	movw	r16, r28
    4cde:	0d 57       	subi	r16, 0x7D	; 125
    4ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	eb 57       	subi	r30, 0x7B	; 123
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	60 81       	ld	r22, Z
    4cea:	71 81       	ldd	r23, Z+1	; 0x01
    4cec:	82 81       	ldd	r24, Z+2	; 0x02
    4cee:	93 81       	ldd	r25, Z+3	; 0x03
    4cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	f8 01       	movw	r30, r16
    4cfa:	91 83       	std	Z+1, r25	; 0x01
    4cfc:	80 83       	st	Z, r24
    4cfe:	de 01       	movw	r26, r28
    4d00:	a1 58       	subi	r26, 0x81	; 129
    4d02:	bf 4f       	sbci	r27, 0xFF	; 255
    4d04:	fe 01       	movw	r30, r28
    4d06:	ed 57       	subi	r30, 0x7D	; 125
    4d08:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0a:	80 81       	ld	r24, Z
    4d0c:	91 81       	ldd	r25, Z+1	; 0x01
    4d0e:	8d 93       	st	X+, r24
    4d10:	9c 93       	st	X, r25
    4d12:	fe 01       	movw	r30, r28
    4d14:	e1 58       	subi	r30, 0x81	; 129
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	80 81       	ld	r24, Z
    4d1a:	91 81       	ldd	r25, Z+1	; 0x01
    4d1c:	01 97       	sbiw	r24, 0x01	; 1
    4d1e:	f1 f7       	brne	.-4      	; 0x4d1c <SevenSegment_From0To9+0x19e>
    4d20:	fe 01       	movw	r30, r28
    4d22:	e1 58       	subi	r30, 0x81	; 129
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 0, 0); // 1
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e3 57       	subi	r30, 0x73	; 115
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	80 81       	ld	r24, Z
    4d32:	60 e0       	ldi	r22, 0x00	; 0
    4d34:	41 e0       	ldi	r20, 0x01	; 1
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	00 e0       	ldi	r16, 0x00	; 0
    4d3a:	ee 24       	eor	r14, r14
    4d3c:	cc 24       	eor	r12, r12
    4d3e:	aa 24       	eor	r10, r10
    4d40:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    4d44:	fe 01       	movw	r30, r28
    4d46:	e5 58       	subi	r30, 0x85	; 133
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	a8 e4       	ldi	r26, 0x48	; 72
    4d50:	b2 e4       	ldi	r27, 0x42	; 66
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5a:	8e 01       	movw	r16, r28
    4d5c:	09 58       	subi	r16, 0x89	; 137
    4d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d60:	fe 01       	movw	r30, r28
    4d62:	e5 58       	subi	r30, 0x85	; 133
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	60 81       	ld	r22, Z
    4d68:	71 81       	ldd	r23, Z+1	; 0x01
    4d6a:	82 81       	ldd	r24, Z+2	; 0x02
    4d6c:	93 81       	ldd	r25, Z+3	; 0x03
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	4a e7       	ldi	r20, 0x7A	; 122
    4d74:	55 e4       	ldi	r21, 0x45	; 69
    4d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	f8 01       	movw	r30, r16
    4d80:	80 83       	st	Z, r24
    4d82:	91 83       	std	Z+1, r25	; 0x01
    4d84:	a2 83       	std	Z+2, r26	; 0x02
    4d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e9 58       	subi	r30, 0x89	; 137
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e8       	ldi	r20, 0x80	; 128
    4d9c:	5f e3       	ldi	r21, 0x3F	; 63
    4d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4da2:	88 23       	and	r24, r24
    4da4:	44 f4       	brge	.+16     	; 0x4db6 <SevenSegment_From0To9+0x238>
		__ticks = 1;
    4da6:	fe 01       	movw	r30, r28
    4da8:	eb 58       	subi	r30, 0x8B	; 139
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	91 83       	std	Z+1, r25	; 0x01
    4db2:	80 83       	st	Z, r24
    4db4:	64 c0       	rjmp	.+200    	; 0x4e7e <SevenSegment_From0To9+0x300>
	else if (__tmp > 65535)
    4db6:	fe 01       	movw	r30, r28
    4db8:	e9 58       	subi	r30, 0x89	; 137
    4dba:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbc:	60 81       	ld	r22, Z
    4dbe:	71 81       	ldd	r23, Z+1	; 0x01
    4dc0:	82 81       	ldd	r24, Z+2	; 0x02
    4dc2:	93 81       	ldd	r25, Z+3	; 0x03
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	3f ef       	ldi	r19, 0xFF	; 255
    4dc8:	4f e7       	ldi	r20, 0x7F	; 127
    4dca:	57 e4       	ldi	r21, 0x47	; 71
    4dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dd0:	18 16       	cp	r1, r24
    4dd2:	0c f0       	brlt	.+2      	; 0x4dd6 <SevenSegment_From0To9+0x258>
    4dd4:	43 c0       	rjmp	.+134    	; 0x4e5c <SevenSegment_From0To9+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	e5 58       	subi	r30, 0x85	; 133
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	60 81       	ld	r22, Z
    4dde:	71 81       	ldd	r23, Z+1	; 0x01
    4de0:	82 81       	ldd	r24, Z+2	; 0x02
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	40 e2       	ldi	r20, 0x20	; 32
    4dea:	51 e4       	ldi	r21, 0x41	; 65
    4dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	8e 01       	movw	r16, r28
    4df6:	0b 58       	subi	r16, 0x8B	; 139
    4df8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfa:	bc 01       	movw	r22, r24
    4dfc:	cd 01       	movw	r24, r26
    4dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	f8 01       	movw	r30, r16
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	80 83       	st	Z, r24
    4e0c:	1f c0       	rjmp	.+62     	; 0x4e4c <SevenSegment_From0To9+0x2ce>
    4e0e:	fe 01       	movw	r30, r28
    4e10:	ed 58       	subi	r30, 0x8D	; 141
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	80 e9       	ldi	r24, 0x90	; 144
    4e16:	91 e0       	ldi	r25, 0x01	; 1
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	ed 58       	subi	r30, 0x8D	; 141
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	80 81       	ld	r24, Z
    4e24:	91 81       	ldd	r25, Z+1	; 0x01
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	f1 f7       	brne	.-4      	; 0x4e26 <SevenSegment_From0To9+0x2a8>
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	ed 58       	subi	r30, 0x8D	; 141
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e34:	de 01       	movw	r26, r28
    4e36:	ab 58       	subi	r26, 0x8B	; 139
    4e38:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	eb 58       	subi	r30, 0x8B	; 139
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 81       	ld	r24, Z
    4e42:	91 81       	ldd	r25, Z+1	; 0x01
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	11 96       	adiw	r26, 0x01	; 1
    4e48:	9c 93       	st	X, r25
    4e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	eb 58       	subi	r30, 0x8B	; 139
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	d1 f6       	brne	.-76     	; 0x4e0e <SevenSegment_From0To9+0x290>
    4e5a:	27 c0       	rjmp	.+78     	; 0x4eaa <SevenSegment_From0To9+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5c:	8e 01       	movw	r16, r28
    4e5e:	0b 58       	subi	r16, 0x8B	; 139
    4e60:	1f 4f       	sbci	r17, 0xFF	; 255
    4e62:	fe 01       	movw	r30, r28
    4e64:	e9 58       	subi	r30, 0x89	; 137
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	60 81       	ld	r22, Z
    4e6a:	71 81       	ldd	r23, Z+1	; 0x01
    4e6c:	82 81       	ldd	r24, Z+2	; 0x02
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	f8 01       	movw	r30, r16
    4e7a:	91 83       	std	Z+1, r25	; 0x01
    4e7c:	80 83       	st	Z, r24
    4e7e:	de 01       	movw	r26, r28
    4e80:	af 58       	subi	r26, 0x8F	; 143
    4e82:	bf 4f       	sbci	r27, 0xFF	; 255
    4e84:	fe 01       	movw	r30, r28
    4e86:	eb 58       	subi	r30, 0x8B	; 139
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	80 81       	ld	r24, Z
    4e8c:	91 81       	ldd	r25, Z+1	; 0x01
    4e8e:	8d 93       	st	X+, r24
    4e90:	9c 93       	st	X, r25
    4e92:	fe 01       	movw	r30, r28
    4e94:	ef 58       	subi	r30, 0x8F	; 143
    4e96:	ff 4f       	sbci	r31, 0xFF	; 255
    4e98:	80 81       	ld	r24, Z
    4e9a:	91 81       	ldd	r25, Z+1	; 0x01
    4e9c:	01 97       	sbiw	r24, 0x01	; 1
    4e9e:	f1 f7       	brne	.-4      	; 0x4e9c <SevenSegment_From0To9+0x31e>
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	ef 58       	subi	r30, 0x8F	; 143
    4ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea6:	91 83       	std	Z+1, r25	; 0x01
    4ea8:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 0, 1, 1, 0, 1); // 2
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e3 57       	subi	r30, 0x73	; 115
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	80 81       	ld	r24, Z
    4eb2:	61 e0       	ldi	r22, 0x01	; 1
    4eb4:	41 e0       	ldi	r20, 0x01	; 1
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	01 e0       	ldi	r16, 0x01	; 1
    4eba:	ee 24       	eor	r14, r14
    4ebc:	e3 94       	inc	r14
    4ebe:	cc 24       	eor	r12, r12
    4ec0:	aa 24       	eor	r10, r10
    4ec2:	a3 94       	inc	r10
    4ec4:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e3 59       	subi	r30, 0x93	; 147
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	a8 e4       	ldi	r26, 0x48	; 72
    4ed4:	b2 e4       	ldi	r27, 0x42	; 66
    4ed6:	80 83       	st	Z, r24
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	a2 83       	std	Z+2, r26	; 0x02
    4edc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ede:	8e 01       	movw	r16, r28
    4ee0:	07 59       	subi	r16, 0x97	; 151
    4ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e3 59       	subi	r30, 0x93	; 147
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	60 81       	ld	r22, Z
    4eec:	71 81       	ldd	r23, Z+1	; 0x01
    4eee:	82 81       	ldd	r24, Z+2	; 0x02
    4ef0:	93 81       	ldd	r25, Z+3	; 0x03
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	4a e7       	ldi	r20, 0x7A	; 122
    4ef8:	55 e4       	ldi	r21, 0x45	; 69
    4efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	f8 01       	movw	r30, r16
    4f04:	80 83       	st	Z, r24
    4f06:	91 83       	std	Z+1, r25	; 0x01
    4f08:	a2 83       	std	Z+2, r26	; 0x02
    4f0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	e7 59       	subi	r30, 0x97	; 151
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e8       	ldi	r20, 0x80	; 128
    4f20:	5f e3       	ldi	r21, 0x3F	; 63
    4f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f26:	88 23       	and	r24, r24
    4f28:	44 f4       	brge	.+16     	; 0x4f3a <SevenSegment_From0To9+0x3bc>
		__ticks = 1;
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e9 59       	subi	r30, 0x99	; 153
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	91 83       	std	Z+1, r25	; 0x01
    4f36:	80 83       	st	Z, r24
    4f38:	64 c0       	rjmp	.+200    	; 0x5002 <SevenSegment_From0To9+0x484>
	else if (__tmp > 65535)
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e7 59       	subi	r30, 0x97	; 151
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	60 81       	ld	r22, Z
    4f42:	71 81       	ldd	r23, Z+1	; 0x01
    4f44:	82 81       	ldd	r24, Z+2	; 0x02
    4f46:	93 81       	ldd	r25, Z+3	; 0x03
    4f48:	20 e0       	ldi	r18, 0x00	; 0
    4f4a:	3f ef       	ldi	r19, 0xFF	; 255
    4f4c:	4f e7       	ldi	r20, 0x7F	; 127
    4f4e:	57 e4       	ldi	r21, 0x47	; 71
    4f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f54:	18 16       	cp	r1, r24
    4f56:	0c f0       	brlt	.+2      	; 0x4f5a <SevenSegment_From0To9+0x3dc>
    4f58:	43 c0       	rjmp	.+134    	; 0x4fe0 <SevenSegment_From0To9+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	e3 59       	subi	r30, 0x93	; 147
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	60 81       	ld	r22, Z
    4f62:	71 81       	ldd	r23, Z+1	; 0x01
    4f64:	82 81       	ldd	r24, Z+2	; 0x02
    4f66:	93 81       	ldd	r25, Z+3	; 0x03
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	40 e2       	ldi	r20, 0x20	; 32
    4f6e:	51 e4       	ldi	r21, 0x41	; 65
    4f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f74:	dc 01       	movw	r26, r24
    4f76:	cb 01       	movw	r24, r22
    4f78:	8e 01       	movw	r16, r28
    4f7a:	09 59       	subi	r16, 0x99	; 153
    4f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f7e:	bc 01       	movw	r22, r24
    4f80:	cd 01       	movw	r24, r26
    4f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	91 83       	std	Z+1, r25	; 0x01
    4f8e:	80 83       	st	Z, r24
    4f90:	1f c0       	rjmp	.+62     	; 0x4fd0 <SevenSegment_From0To9+0x452>
    4f92:	fe 01       	movw	r30, r28
    4f94:	eb 59       	subi	r30, 0x9B	; 155
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	80 e9       	ldi	r24, 0x90	; 144
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	91 83       	std	Z+1, r25	; 0x01
    4f9e:	80 83       	st	Z, r24
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	eb 59       	subi	r30, 0x9B	; 155
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	80 81       	ld	r24, Z
    4fa8:	91 81       	ldd	r25, Z+1	; 0x01
    4faa:	01 97       	sbiw	r24, 0x01	; 1
    4fac:	f1 f7       	brne	.-4      	; 0x4faa <SevenSegment_From0To9+0x42c>
    4fae:	fe 01       	movw	r30, r28
    4fb0:	eb 59       	subi	r30, 0x9B	; 155
    4fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb4:	91 83       	std	Z+1, r25	; 0x01
    4fb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb8:	de 01       	movw	r26, r28
    4fba:	a9 59       	subi	r26, 0x99	; 153
    4fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	e9 59       	subi	r30, 0x99	; 153
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	80 81       	ld	r24, Z
    4fc6:	91 81       	ldd	r25, Z+1	; 0x01
    4fc8:	01 97       	sbiw	r24, 0x01	; 1
    4fca:	11 96       	adiw	r26, 0x01	; 1
    4fcc:	9c 93       	st	X, r25
    4fce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e9 59       	subi	r30, 0x99	; 153
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	80 81       	ld	r24, Z
    4fd8:	91 81       	ldd	r25, Z+1	; 0x01
    4fda:	00 97       	sbiw	r24, 0x00	; 0
    4fdc:	d1 f6       	brne	.-76     	; 0x4f92 <SevenSegment_From0To9+0x414>
    4fde:	27 c0       	rjmp	.+78     	; 0x502e <SevenSegment_From0To9+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe0:	8e 01       	movw	r16, r28
    4fe2:	09 59       	subi	r16, 0x99	; 153
    4fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e7 59       	subi	r30, 0x97	; 151
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	60 81       	ld	r22, Z
    4fee:	71 81       	ldd	r23, Z+1	; 0x01
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	93 81       	ldd	r25, Z+3	; 0x03
    4ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	f8 01       	movw	r30, r16
    4ffe:	91 83       	std	Z+1, r25	; 0x01
    5000:	80 83       	st	Z, r24
    5002:	de 01       	movw	r26, r28
    5004:	ad 59       	subi	r26, 0x9D	; 157
    5006:	bf 4f       	sbci	r27, 0xFF	; 255
    5008:	fe 01       	movw	r30, r28
    500a:	e9 59       	subi	r30, 0x99	; 153
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	80 81       	ld	r24, Z
    5010:	91 81       	ldd	r25, Z+1	; 0x01
    5012:	8d 93       	st	X+, r24
    5014:	9c 93       	st	X, r25
    5016:	fe 01       	movw	r30, r28
    5018:	ed 59       	subi	r30, 0x9D	; 157
    501a:	ff 4f       	sbci	r31, 0xFF	; 255
    501c:	80 81       	ld	r24, Z
    501e:	91 81       	ldd	r25, Z+1	; 0x01
    5020:	01 97       	sbiw	r24, 0x01	; 1
    5022:	f1 f7       	brne	.-4      	; 0x5020 <SevenSegment_From0To9+0x4a2>
    5024:	fe 01       	movw	r30, r28
    5026:	ed 59       	subi	r30, 0x9D	; 157
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	91 83       	std	Z+1, r25	; 0x01
    502c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 0, 1); // 3
    502e:	fe 01       	movw	r30, r28
    5030:	e3 57       	subi	r30, 0x73	; 115
    5032:	ff 4f       	sbci	r31, 0xFF	; 255
    5034:	80 81       	ld	r24, Z
    5036:	61 e0       	ldi	r22, 0x01	; 1
    5038:	41 e0       	ldi	r20, 0x01	; 1
    503a:	21 e0       	ldi	r18, 0x01	; 1
    503c:	01 e0       	ldi	r16, 0x01	; 1
    503e:	ee 24       	eor	r14, r14
    5040:	cc 24       	eor	r12, r12
    5042:	aa 24       	eor	r10, r10
    5044:	a3 94       	inc	r10
    5046:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    504a:	fe 01       	movw	r30, r28
    504c:	e1 5a       	subi	r30, 0xA1	; 161
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	80 e0       	ldi	r24, 0x00	; 0
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	a8 e4       	ldi	r26, 0x48	; 72
    5056:	b2 e4       	ldi	r27, 0x42	; 66
    5058:	80 83       	st	Z, r24
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	a2 83       	std	Z+2, r26	; 0x02
    505e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5060:	8e 01       	movw	r16, r28
    5062:	05 5a       	subi	r16, 0xA5	; 165
    5064:	1f 4f       	sbci	r17, 0xFF	; 255
    5066:	fe 01       	movw	r30, r28
    5068:	e1 5a       	subi	r30, 0xA1	; 161
    506a:	ff 4f       	sbci	r31, 0xFF	; 255
    506c:	60 81       	ld	r22, Z
    506e:	71 81       	ldd	r23, Z+1	; 0x01
    5070:	82 81       	ldd	r24, Z+2	; 0x02
    5072:	93 81       	ldd	r25, Z+3	; 0x03
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	4a e7       	ldi	r20, 0x7A	; 122
    507a:	55 e4       	ldi	r21, 0x45	; 69
    507c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	f8 01       	movw	r30, r16
    5086:	80 83       	st	Z, r24
    5088:	91 83       	std	Z+1, r25	; 0x01
    508a:	a2 83       	std	Z+2, r26	; 0x02
    508c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    508e:	fe 01       	movw	r30, r28
    5090:	e5 5a       	subi	r30, 0xA5	; 165
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	60 81       	ld	r22, Z
    5096:	71 81       	ldd	r23, Z+1	; 0x01
    5098:	82 81       	ldd	r24, Z+2	; 0x02
    509a:	93 81       	ldd	r25, Z+3	; 0x03
    509c:	20 e0       	ldi	r18, 0x00	; 0
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	40 e8       	ldi	r20, 0x80	; 128
    50a2:	5f e3       	ldi	r21, 0x3F	; 63
    50a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50a8:	88 23       	and	r24, r24
    50aa:	44 f4       	brge	.+16     	; 0x50bc <SevenSegment_From0To9+0x53e>
		__ticks = 1;
    50ac:	fe 01       	movw	r30, r28
    50ae:	e7 5a       	subi	r30, 0xA7	; 167
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	91 83       	std	Z+1, r25	; 0x01
    50b8:	80 83       	st	Z, r24
    50ba:	64 c0       	rjmp	.+200    	; 0x5184 <SevenSegment_From0To9+0x606>
	else if (__tmp > 65535)
    50bc:	fe 01       	movw	r30, r28
    50be:	e5 5a       	subi	r30, 0xA5	; 165
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	60 81       	ld	r22, Z
    50c4:	71 81       	ldd	r23, Z+1	; 0x01
    50c6:	82 81       	ldd	r24, Z+2	; 0x02
    50c8:	93 81       	ldd	r25, Z+3	; 0x03
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	3f ef       	ldi	r19, 0xFF	; 255
    50ce:	4f e7       	ldi	r20, 0x7F	; 127
    50d0:	57 e4       	ldi	r21, 0x47	; 71
    50d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50d6:	18 16       	cp	r1, r24
    50d8:	0c f0       	brlt	.+2      	; 0x50dc <SevenSegment_From0To9+0x55e>
    50da:	43 c0       	rjmp	.+134    	; 0x5162 <SevenSegment_From0To9+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50dc:	fe 01       	movw	r30, r28
    50de:	e1 5a       	subi	r30, 0xA1	; 161
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	60 81       	ld	r22, Z
    50e4:	71 81       	ldd	r23, Z+1	; 0x01
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	40 e2       	ldi	r20, 0x20	; 32
    50f0:	51 e4       	ldi	r21, 0x41	; 65
    50f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50f6:	dc 01       	movw	r26, r24
    50f8:	cb 01       	movw	r24, r22
    50fa:	8e 01       	movw	r16, r28
    50fc:	07 5a       	subi	r16, 0xA7	; 167
    50fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5100:	bc 01       	movw	r22, r24
    5102:	cd 01       	movw	r24, r26
    5104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5108:	dc 01       	movw	r26, r24
    510a:	cb 01       	movw	r24, r22
    510c:	f8 01       	movw	r30, r16
    510e:	91 83       	std	Z+1, r25	; 0x01
    5110:	80 83       	st	Z, r24
    5112:	1f c0       	rjmp	.+62     	; 0x5152 <SevenSegment_From0To9+0x5d4>
    5114:	fe 01       	movw	r30, r28
    5116:	e9 5a       	subi	r30, 0xA9	; 169
    5118:	ff 4f       	sbci	r31, 0xFF	; 255
    511a:	80 e9       	ldi	r24, 0x90	; 144
    511c:	91 e0       	ldi	r25, 0x01	; 1
    511e:	91 83       	std	Z+1, r25	; 0x01
    5120:	80 83       	st	Z, r24
    5122:	fe 01       	movw	r30, r28
    5124:	e9 5a       	subi	r30, 0xA9	; 169
    5126:	ff 4f       	sbci	r31, 0xFF	; 255
    5128:	80 81       	ld	r24, Z
    512a:	91 81       	ldd	r25, Z+1	; 0x01
    512c:	01 97       	sbiw	r24, 0x01	; 1
    512e:	f1 f7       	brne	.-4      	; 0x512c <SevenSegment_From0To9+0x5ae>
    5130:	fe 01       	movw	r30, r28
    5132:	e9 5a       	subi	r30, 0xA9	; 169
    5134:	ff 4f       	sbci	r31, 0xFF	; 255
    5136:	91 83       	std	Z+1, r25	; 0x01
    5138:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    513a:	de 01       	movw	r26, r28
    513c:	a7 5a       	subi	r26, 0xA7	; 167
    513e:	bf 4f       	sbci	r27, 0xFF	; 255
    5140:	fe 01       	movw	r30, r28
    5142:	e7 5a       	subi	r30, 0xA7	; 167
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	80 81       	ld	r24, Z
    5148:	91 81       	ldd	r25, Z+1	; 0x01
    514a:	01 97       	sbiw	r24, 0x01	; 1
    514c:	11 96       	adiw	r26, 0x01	; 1
    514e:	9c 93       	st	X, r25
    5150:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5152:	fe 01       	movw	r30, r28
    5154:	e7 5a       	subi	r30, 0xA7	; 167
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	80 81       	ld	r24, Z
    515a:	91 81       	ldd	r25, Z+1	; 0x01
    515c:	00 97       	sbiw	r24, 0x00	; 0
    515e:	d1 f6       	brne	.-76     	; 0x5114 <SevenSegment_From0To9+0x596>
    5160:	27 c0       	rjmp	.+78     	; 0x51b0 <SevenSegment_From0To9+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5162:	8e 01       	movw	r16, r28
    5164:	07 5a       	subi	r16, 0xA7	; 167
    5166:	1f 4f       	sbci	r17, 0xFF	; 255
    5168:	fe 01       	movw	r30, r28
    516a:	e5 5a       	subi	r30, 0xA5	; 165
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	93 81       	ldd	r25, Z+3	; 0x03
    5176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517a:	dc 01       	movw	r26, r24
    517c:	cb 01       	movw	r24, r22
    517e:	f8 01       	movw	r30, r16
    5180:	91 83       	std	Z+1, r25	; 0x01
    5182:	80 83       	st	Z, r24
    5184:	de 01       	movw	r26, r28
    5186:	ab 5a       	subi	r26, 0xAB	; 171
    5188:	bf 4f       	sbci	r27, 0xFF	; 255
    518a:	fe 01       	movw	r30, r28
    518c:	e7 5a       	subi	r30, 0xA7	; 167
    518e:	ff 4f       	sbci	r31, 0xFF	; 255
    5190:	80 81       	ld	r24, Z
    5192:	91 81       	ldd	r25, Z+1	; 0x01
    5194:	8d 93       	st	X+, r24
    5196:	9c 93       	st	X, r25
    5198:	fe 01       	movw	r30, r28
    519a:	eb 5a       	subi	r30, 0xAB	; 171
    519c:	ff 4f       	sbci	r31, 0xFF	; 255
    519e:	80 81       	ld	r24, Z
    51a0:	91 81       	ldd	r25, Z+1	; 0x01
    51a2:	01 97       	sbiw	r24, 0x01	; 1
    51a4:	f1 f7       	brne	.-4      	; 0x51a2 <SevenSegment_From0To9+0x624>
    51a6:	fe 01       	movw	r30, r28
    51a8:	eb 5a       	subi	r30, 0xAB	; 171
    51aa:	ff 4f       	sbci	r31, 0xFF	; 255
    51ac:	91 83       	std	Z+1, r25	; 0x01
    51ae:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 1, 1); // 4
    51b0:	fe 01       	movw	r30, r28
    51b2:	e3 57       	subi	r30, 0x73	; 115
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	80 81       	ld	r24, Z
    51b8:	60 e0       	ldi	r22, 0x00	; 0
    51ba:	41 e0       	ldi	r20, 0x01	; 1
    51bc:	21 e0       	ldi	r18, 0x01	; 1
    51be:	00 e0       	ldi	r16, 0x00	; 0
    51c0:	ee 24       	eor	r14, r14
    51c2:	cc 24       	eor	r12, r12
    51c4:	c3 94       	inc	r12
    51c6:	aa 24       	eor	r10, r10
    51c8:	a3 94       	inc	r10
    51ca:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    51ce:	fe 01       	movw	r30, r28
    51d0:	ef 5a       	subi	r30, 0xAF	; 175
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	80 e0       	ldi	r24, 0x00	; 0
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	a8 e4       	ldi	r26, 0x48	; 72
    51da:	b2 e4       	ldi	r27, 0x42	; 66
    51dc:	80 83       	st	Z, r24
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	a2 83       	std	Z+2, r26	; 0x02
    51e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51e4:	8e 01       	movw	r16, r28
    51e6:	03 5b       	subi	r16, 0xB3	; 179
    51e8:	1f 4f       	sbci	r17, 0xFF	; 255
    51ea:	fe 01       	movw	r30, r28
    51ec:	ef 5a       	subi	r30, 0xAF	; 175
    51ee:	ff 4f       	sbci	r31, 0xFF	; 255
    51f0:	60 81       	ld	r22, Z
    51f2:	71 81       	ldd	r23, Z+1	; 0x01
    51f4:	82 81       	ldd	r24, Z+2	; 0x02
    51f6:	93 81       	ldd	r25, Z+3	; 0x03
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	4a e7       	ldi	r20, 0x7A	; 122
    51fe:	55 e4       	ldi	r21, 0x45	; 69
    5200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	f8 01       	movw	r30, r16
    520a:	80 83       	st	Z, r24
    520c:	91 83       	std	Z+1, r25	; 0x01
    520e:	a2 83       	std	Z+2, r26	; 0x02
    5210:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5212:	fe 01       	movw	r30, r28
    5214:	e3 5b       	subi	r30, 0xB3	; 179
    5216:	ff 4f       	sbci	r31, 0xFF	; 255
    5218:	60 81       	ld	r22, Z
    521a:	71 81       	ldd	r23, Z+1	; 0x01
    521c:	82 81       	ldd	r24, Z+2	; 0x02
    521e:	93 81       	ldd	r25, Z+3	; 0x03
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e8       	ldi	r20, 0x80	; 128
    5226:	5f e3       	ldi	r21, 0x3F	; 63
    5228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    522c:	88 23       	and	r24, r24
    522e:	44 f4       	brge	.+16     	; 0x5240 <SevenSegment_From0To9+0x6c2>
		__ticks = 1;
    5230:	fe 01       	movw	r30, r28
    5232:	e5 5b       	subi	r30, 0xB5	; 181
    5234:	ff 4f       	sbci	r31, 0xFF	; 255
    5236:	81 e0       	ldi	r24, 0x01	; 1
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	80 83       	st	Z, r24
    523e:	64 c0       	rjmp	.+200    	; 0x5308 <SevenSegment_From0To9+0x78a>
	else if (__tmp > 65535)
    5240:	fe 01       	movw	r30, r28
    5242:	e3 5b       	subi	r30, 0xB3	; 179
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	60 81       	ld	r22, Z
    5248:	71 81       	ldd	r23, Z+1	; 0x01
    524a:	82 81       	ldd	r24, Z+2	; 0x02
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	3f ef       	ldi	r19, 0xFF	; 255
    5252:	4f e7       	ldi	r20, 0x7F	; 127
    5254:	57 e4       	ldi	r21, 0x47	; 71
    5256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    525a:	18 16       	cp	r1, r24
    525c:	0c f0       	brlt	.+2      	; 0x5260 <SevenSegment_From0To9+0x6e2>
    525e:	43 c0       	rjmp	.+134    	; 0x52e6 <SevenSegment_From0To9+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5260:	fe 01       	movw	r30, r28
    5262:	ef 5a       	subi	r30, 0xAF	; 175
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	60 81       	ld	r22, Z
    5268:	71 81       	ldd	r23, Z+1	; 0x01
    526a:	82 81       	ldd	r24, Z+2	; 0x02
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e2       	ldi	r20, 0x20	; 32
    5274:	51 e4       	ldi	r21, 0x41	; 65
    5276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    527a:	dc 01       	movw	r26, r24
    527c:	cb 01       	movw	r24, r22
    527e:	8e 01       	movw	r16, r28
    5280:	05 5b       	subi	r16, 0xB5	; 181
    5282:	1f 4f       	sbci	r17, 0xFF	; 255
    5284:	bc 01       	movw	r22, r24
    5286:	cd 01       	movw	r24, r26
    5288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	f8 01       	movw	r30, r16
    5292:	91 83       	std	Z+1, r25	; 0x01
    5294:	80 83       	st	Z, r24
    5296:	1f c0       	rjmp	.+62     	; 0x52d6 <SevenSegment_From0To9+0x758>
    5298:	fe 01       	movw	r30, r28
    529a:	e7 5b       	subi	r30, 0xB7	; 183
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	80 e9       	ldi	r24, 0x90	; 144
    52a0:	91 e0       	ldi	r25, 0x01	; 1
    52a2:	91 83       	std	Z+1, r25	; 0x01
    52a4:	80 83       	st	Z, r24
    52a6:	fe 01       	movw	r30, r28
    52a8:	e7 5b       	subi	r30, 0xB7	; 183
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 81       	ld	r24, Z
    52ae:	91 81       	ldd	r25, Z+1	; 0x01
    52b0:	01 97       	sbiw	r24, 0x01	; 1
    52b2:	f1 f7       	brne	.-4      	; 0x52b0 <SevenSegment_From0To9+0x732>
    52b4:	fe 01       	movw	r30, r28
    52b6:	e7 5b       	subi	r30, 0xB7	; 183
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	91 83       	std	Z+1, r25	; 0x01
    52bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52be:	de 01       	movw	r26, r28
    52c0:	a5 5b       	subi	r26, 0xB5	; 181
    52c2:	bf 4f       	sbci	r27, 0xFF	; 255
    52c4:	fe 01       	movw	r30, r28
    52c6:	e5 5b       	subi	r30, 0xB5	; 181
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	80 81       	ld	r24, Z
    52cc:	91 81       	ldd	r25, Z+1	; 0x01
    52ce:	01 97       	sbiw	r24, 0x01	; 1
    52d0:	11 96       	adiw	r26, 0x01	; 1
    52d2:	9c 93       	st	X, r25
    52d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d6:	fe 01       	movw	r30, r28
    52d8:	e5 5b       	subi	r30, 0xB5	; 181
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	80 81       	ld	r24, Z
    52de:	91 81       	ldd	r25, Z+1	; 0x01
    52e0:	00 97       	sbiw	r24, 0x00	; 0
    52e2:	d1 f6       	brne	.-76     	; 0x5298 <SevenSegment_From0To9+0x71a>
    52e4:	27 c0       	rjmp	.+78     	; 0x5334 <SevenSegment_From0To9+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e6:	8e 01       	movw	r16, r28
    52e8:	05 5b       	subi	r16, 0xB5	; 181
    52ea:	1f 4f       	sbci	r17, 0xFF	; 255
    52ec:	fe 01       	movw	r30, r28
    52ee:	e3 5b       	subi	r30, 0xB3	; 179
    52f0:	ff 4f       	sbci	r31, 0xFF	; 255
    52f2:	60 81       	ld	r22, Z
    52f4:	71 81       	ldd	r23, Z+1	; 0x01
    52f6:	82 81       	ldd	r24, Z+2	; 0x02
    52f8:	93 81       	ldd	r25, Z+3	; 0x03
    52fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	f8 01       	movw	r30, r16
    5304:	91 83       	std	Z+1, r25	; 0x01
    5306:	80 83       	st	Z, r24
    5308:	de 01       	movw	r26, r28
    530a:	a9 5b       	subi	r26, 0xB9	; 185
    530c:	bf 4f       	sbci	r27, 0xFF	; 255
    530e:	fe 01       	movw	r30, r28
    5310:	e5 5b       	subi	r30, 0xB5	; 181
    5312:	ff 4f       	sbci	r31, 0xFF	; 255
    5314:	80 81       	ld	r24, Z
    5316:	91 81       	ldd	r25, Z+1	; 0x01
    5318:	8d 93       	st	X+, r24
    531a:	9c 93       	st	X, r25
    531c:	fe 01       	movw	r30, r28
    531e:	e9 5b       	subi	r30, 0xB9	; 185
    5320:	ff 4f       	sbci	r31, 0xFF	; 255
    5322:	80 81       	ld	r24, Z
    5324:	91 81       	ldd	r25, Z+1	; 0x01
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	f1 f7       	brne	.-4      	; 0x5326 <SevenSegment_From0To9+0x7a8>
    532a:	fe 01       	movw	r30, r28
    532c:	e9 5b       	subi	r30, 0xB9	; 185
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	91 83       	std	Z+1, r25	; 0x01
    5332:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 0, 1, 1); // 5
    5334:	fe 01       	movw	r30, r28
    5336:	e3 57       	subi	r30, 0x73	; 115
    5338:	ff 4f       	sbci	r31, 0xFF	; 255
    533a:	80 81       	ld	r24, Z
    533c:	61 e0       	ldi	r22, 0x01	; 1
    533e:	40 e0       	ldi	r20, 0x00	; 0
    5340:	21 e0       	ldi	r18, 0x01	; 1
    5342:	01 e0       	ldi	r16, 0x01	; 1
    5344:	ee 24       	eor	r14, r14
    5346:	cc 24       	eor	r12, r12
    5348:	c3 94       	inc	r12
    534a:	aa 24       	eor	r10, r10
    534c:	a3 94       	inc	r10
    534e:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5352:	fe 01       	movw	r30, r28
    5354:	ed 5b       	subi	r30, 0xBD	; 189
    5356:	ff 4f       	sbci	r31, 0xFF	; 255
    5358:	80 e0       	ldi	r24, 0x00	; 0
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	a8 e4       	ldi	r26, 0x48	; 72
    535e:	b2 e4       	ldi	r27, 0x42	; 66
    5360:	80 83       	st	Z, r24
    5362:	91 83       	std	Z+1, r25	; 0x01
    5364:	a2 83       	std	Z+2, r26	; 0x02
    5366:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5368:	8e 01       	movw	r16, r28
    536a:	01 5c       	subi	r16, 0xC1	; 193
    536c:	1f 4f       	sbci	r17, 0xFF	; 255
    536e:	fe 01       	movw	r30, r28
    5370:	ed 5b       	subi	r30, 0xBD	; 189
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	60 81       	ld	r22, Z
    5376:	71 81       	ldd	r23, Z+1	; 0x01
    5378:	82 81       	ldd	r24, Z+2	; 0x02
    537a:	93 81       	ldd	r25, Z+3	; 0x03
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	4a e7       	ldi	r20, 0x7A	; 122
    5382:	55 e4       	ldi	r21, 0x45	; 69
    5384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	f8 01       	movw	r30, r16
    538e:	80 83       	st	Z, r24
    5390:	91 83       	std	Z+1, r25	; 0x01
    5392:	a2 83       	std	Z+2, r26	; 0x02
    5394:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5396:	fe 01       	movw	r30, r28
    5398:	ff 96       	adiw	r30, 0x3f	; 63
    539a:	60 81       	ld	r22, Z
    539c:	71 81       	ldd	r23, Z+1	; 0x01
    539e:	82 81       	ldd	r24, Z+2	; 0x02
    53a0:	93 81       	ldd	r25, Z+3	; 0x03
    53a2:	20 e0       	ldi	r18, 0x00	; 0
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	40 e8       	ldi	r20, 0x80	; 128
    53a8:	5f e3       	ldi	r21, 0x3F	; 63
    53aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53ae:	88 23       	and	r24, r24
    53b0:	2c f4       	brge	.+10     	; 0x53bc <SevenSegment_From0To9+0x83e>
		__ticks = 1;
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	9e af       	std	Y+62, r25	; 0x3e
    53b8:	8d af       	std	Y+61, r24	; 0x3d
    53ba:	46 c0       	rjmp	.+140    	; 0x5448 <SevenSegment_From0To9+0x8ca>
	else if (__tmp > 65535)
    53bc:	fe 01       	movw	r30, r28
    53be:	ff 96       	adiw	r30, 0x3f	; 63
    53c0:	60 81       	ld	r22, Z
    53c2:	71 81       	ldd	r23, Z+1	; 0x01
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	3f ef       	ldi	r19, 0xFF	; 255
    53cc:	4f e7       	ldi	r20, 0x7F	; 127
    53ce:	57 e4       	ldi	r21, 0x47	; 71
    53d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53d4:	18 16       	cp	r1, r24
    53d6:	64 f5       	brge	.+88     	; 0x5430 <SevenSegment_From0To9+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d8:	fe 01       	movw	r30, r28
    53da:	ed 5b       	subi	r30, 0xBD	; 189
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	60 81       	ld	r22, Z
    53e0:	71 81       	ldd	r23, Z+1	; 0x01
    53e2:	82 81       	ldd	r24, Z+2	; 0x02
    53e4:	93 81       	ldd	r25, Z+3	; 0x03
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e2       	ldi	r20, 0x20	; 32
    53ec:	51 e4       	ldi	r21, 0x41	; 65
    53ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	bc 01       	movw	r22, r24
    53f8:	cd 01       	movw	r24, r26
    53fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	9e af       	std	Y+62, r25	; 0x3e
    5404:	8d af       	std	Y+61, r24	; 0x3d
    5406:	0f c0       	rjmp	.+30     	; 0x5426 <SevenSegment_From0To9+0x8a8>
    5408:	80 e9       	ldi	r24, 0x90	; 144
    540a:	91 e0       	ldi	r25, 0x01	; 1
    540c:	9c af       	std	Y+60, r25	; 0x3c
    540e:	8b af       	std	Y+59, r24	; 0x3b
    5410:	8b ad       	ldd	r24, Y+59	; 0x3b
    5412:	9c ad       	ldd	r25, Y+60	; 0x3c
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <SevenSegment_From0To9+0x896>
    5418:	9c af       	std	Y+60, r25	; 0x3c
    541a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    541c:	8d ad       	ldd	r24, Y+61	; 0x3d
    541e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	9e af       	std	Y+62, r25	; 0x3e
    5424:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5426:	8d ad       	ldd	r24, Y+61	; 0x3d
    5428:	9e ad       	ldd	r25, Y+62	; 0x3e
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	69 f7       	brne	.-38     	; 0x5408 <SevenSegment_From0To9+0x88a>
    542e:	16 c0       	rjmp	.+44     	; 0x545c <SevenSegment_From0To9+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5430:	fe 01       	movw	r30, r28
    5432:	ff 96       	adiw	r30, 0x3f	; 63
    5434:	60 81       	ld	r22, Z
    5436:	71 81       	ldd	r23, Z+1	; 0x01
    5438:	82 81       	ldd	r24, Z+2	; 0x02
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	9e af       	std	Y+62, r25	; 0x3e
    5446:	8d af       	std	Y+61, r24	; 0x3d
    5448:	8d ad       	ldd	r24, Y+61	; 0x3d
    544a:	9e ad       	ldd	r25, Y+62	; 0x3e
    544c:	9a af       	std	Y+58, r25	; 0x3a
    544e:	89 af       	std	Y+57, r24	; 0x39
    5450:	89 ad       	ldd	r24, Y+57	; 0x39
    5452:	9a ad       	ldd	r25, Y+58	; 0x3a
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	f1 f7       	brne	.-4      	; 0x5454 <SevenSegment_From0To9+0x8d6>
    5458:	9a af       	std	Y+58, r25	; 0x3a
    545a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 1); // 6
    545c:	fe 01       	movw	r30, r28
    545e:	e3 57       	subi	r30, 0x73	; 115
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	80 81       	ld	r24, Z
    5464:	61 e0       	ldi	r22, 0x01	; 1
    5466:	40 e0       	ldi	r20, 0x00	; 0
    5468:	21 e0       	ldi	r18, 0x01	; 1
    546a:	01 e0       	ldi	r16, 0x01	; 1
    546c:	ee 24       	eor	r14, r14
    546e:	e3 94       	inc	r14
    5470:	cc 24       	eor	r12, r12
    5472:	c3 94       	inc	r12
    5474:	aa 24       	eor	r10, r10
    5476:	a3 94       	inc	r10
    5478:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    547c:	80 e0       	ldi	r24, 0x00	; 0
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	a8 e4       	ldi	r26, 0x48	; 72
    5482:	b2 e4       	ldi	r27, 0x42	; 66
    5484:	8d ab       	std	Y+53, r24	; 0x35
    5486:	9e ab       	std	Y+54, r25	; 0x36
    5488:	af ab       	std	Y+55, r26	; 0x37
    548a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548c:	6d a9       	ldd	r22, Y+53	; 0x35
    548e:	7e a9       	ldd	r23, Y+54	; 0x36
    5490:	8f a9       	ldd	r24, Y+55	; 0x37
    5492:	98 ad       	ldd	r25, Y+56	; 0x38
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	4a e7       	ldi	r20, 0x7A	; 122
    549a:	55 e4       	ldi	r21, 0x45	; 69
    549c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	89 ab       	std	Y+49, r24	; 0x31
    54a6:	9a ab       	std	Y+50, r25	; 0x32
    54a8:	ab ab       	std	Y+51, r26	; 0x33
    54aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    54ac:	69 a9       	ldd	r22, Y+49	; 0x31
    54ae:	7a a9       	ldd	r23, Y+50	; 0x32
    54b0:	8b a9       	ldd	r24, Y+51	; 0x33
    54b2:	9c a9       	ldd	r25, Y+52	; 0x34
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	40 e8       	ldi	r20, 0x80	; 128
    54ba:	5f e3       	ldi	r21, 0x3F	; 63
    54bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54c0:	88 23       	and	r24, r24
    54c2:	2c f4       	brge	.+10     	; 0x54ce <SevenSegment_From0To9+0x950>
		__ticks = 1;
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	98 ab       	std	Y+48, r25	; 0x30
    54ca:	8f a7       	std	Y+47, r24	; 0x2f
    54cc:	3f c0       	rjmp	.+126    	; 0x554c <SevenSegment_From0To9+0x9ce>
	else if (__tmp > 65535)
    54ce:	69 a9       	ldd	r22, Y+49	; 0x31
    54d0:	7a a9       	ldd	r23, Y+50	; 0x32
    54d2:	8b a9       	ldd	r24, Y+51	; 0x33
    54d4:	9c a9       	ldd	r25, Y+52	; 0x34
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	3f ef       	ldi	r19, 0xFF	; 255
    54da:	4f e7       	ldi	r20, 0x7F	; 127
    54dc:	57 e4       	ldi	r21, 0x47	; 71
    54de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54e2:	18 16       	cp	r1, r24
    54e4:	4c f5       	brge	.+82     	; 0x5538 <SevenSegment_From0To9+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e6:	6d a9       	ldd	r22, Y+53	; 0x35
    54e8:	7e a9       	ldd	r23, Y+54	; 0x36
    54ea:	8f a9       	ldd	r24, Y+55	; 0x37
    54ec:	98 ad       	ldd	r25, Y+56	; 0x38
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	40 e2       	ldi	r20, 0x20	; 32
    54f4:	51 e4       	ldi	r21, 0x41	; 65
    54f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54fa:	dc 01       	movw	r26, r24
    54fc:	cb 01       	movw	r24, r22
    54fe:	bc 01       	movw	r22, r24
    5500:	cd 01       	movw	r24, r26
    5502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5506:	dc 01       	movw	r26, r24
    5508:	cb 01       	movw	r24, r22
    550a:	98 ab       	std	Y+48, r25	; 0x30
    550c:	8f a7       	std	Y+47, r24	; 0x2f
    550e:	0f c0       	rjmp	.+30     	; 0x552e <SevenSegment_From0To9+0x9b0>
    5510:	80 e9       	ldi	r24, 0x90	; 144
    5512:	91 e0       	ldi	r25, 0x01	; 1
    5514:	9e a7       	std	Y+46, r25	; 0x2e
    5516:	8d a7       	std	Y+45, r24	; 0x2d
    5518:	8d a5       	ldd	r24, Y+45	; 0x2d
    551a:	9e a5       	ldd	r25, Y+46	; 0x2e
    551c:	01 97       	sbiw	r24, 0x01	; 1
    551e:	f1 f7       	brne	.-4      	; 0x551c <SevenSegment_From0To9+0x99e>
    5520:	9e a7       	std	Y+46, r25	; 0x2e
    5522:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5524:	8f a5       	ldd	r24, Y+47	; 0x2f
    5526:	98 a9       	ldd	r25, Y+48	; 0x30
    5528:	01 97       	sbiw	r24, 0x01	; 1
    552a:	98 ab       	std	Y+48, r25	; 0x30
    552c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    552e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5530:	98 a9       	ldd	r25, Y+48	; 0x30
    5532:	00 97       	sbiw	r24, 0x00	; 0
    5534:	69 f7       	brne	.-38     	; 0x5510 <SevenSegment_From0To9+0x992>
    5536:	14 c0       	rjmp	.+40     	; 0x5560 <SevenSegment_From0To9+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5538:	69 a9       	ldd	r22, Y+49	; 0x31
    553a:	7a a9       	ldd	r23, Y+50	; 0x32
    553c:	8b a9       	ldd	r24, Y+51	; 0x33
    553e:	9c a9       	ldd	r25, Y+52	; 0x34
    5540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	98 ab       	std	Y+48, r25	; 0x30
    554a:	8f a7       	std	Y+47, r24	; 0x2f
    554c:	8f a5       	ldd	r24, Y+47	; 0x2f
    554e:	98 a9       	ldd	r25, Y+48	; 0x30
    5550:	9c a7       	std	Y+44, r25	; 0x2c
    5552:	8b a7       	std	Y+43, r24	; 0x2b
    5554:	8b a5       	ldd	r24, Y+43	; 0x2b
    5556:	9c a5       	ldd	r25, Y+44	; 0x2c
    5558:	01 97       	sbiw	r24, 0x01	; 1
    555a:	f1 f7       	brne	.-4      	; 0x5558 <SevenSegment_From0To9+0x9da>
    555c:	9c a7       	std	Y+44, r25	; 0x2c
    555e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 0, 0, 0); // 7
    5560:	fe 01       	movw	r30, r28
    5562:	e3 57       	subi	r30, 0x73	; 115
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	80 81       	ld	r24, Z
    5568:	61 e0       	ldi	r22, 0x01	; 1
    556a:	41 e0       	ldi	r20, 0x01	; 1
    556c:	21 e0       	ldi	r18, 0x01	; 1
    556e:	00 e0       	ldi	r16, 0x00	; 0
    5570:	ee 24       	eor	r14, r14
    5572:	cc 24       	eor	r12, r12
    5574:	aa 24       	eor	r10, r10
    5576:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	a8 e4       	ldi	r26, 0x48	; 72
    5580:	b2 e4       	ldi	r27, 0x42	; 66
    5582:	8f a3       	std	Y+39, r24	; 0x27
    5584:	98 a7       	std	Y+40, r25	; 0x28
    5586:	a9 a7       	std	Y+41, r26	; 0x29
    5588:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    558a:	6f a1       	ldd	r22, Y+39	; 0x27
    558c:	78 a5       	ldd	r23, Y+40	; 0x28
    558e:	89 a5       	ldd	r24, Y+41	; 0x29
    5590:	9a a5       	ldd	r25, Y+42	; 0x2a
    5592:	20 e0       	ldi	r18, 0x00	; 0
    5594:	30 e0       	ldi	r19, 0x00	; 0
    5596:	4a e7       	ldi	r20, 0x7A	; 122
    5598:	55 e4       	ldi	r21, 0x45	; 69
    559a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    559e:	dc 01       	movw	r26, r24
    55a0:	cb 01       	movw	r24, r22
    55a2:	8b a3       	std	Y+35, r24	; 0x23
    55a4:	9c a3       	std	Y+36, r25	; 0x24
    55a6:	ad a3       	std	Y+37, r26	; 0x25
    55a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    55aa:	6b a1       	ldd	r22, Y+35	; 0x23
    55ac:	7c a1       	ldd	r23, Y+36	; 0x24
    55ae:	8d a1       	ldd	r24, Y+37	; 0x25
    55b0:	9e a1       	ldd	r25, Y+38	; 0x26
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e8       	ldi	r20, 0x80	; 128
    55b8:	5f e3       	ldi	r21, 0x3F	; 63
    55ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55be:	88 23       	and	r24, r24
    55c0:	2c f4       	brge	.+10     	; 0x55cc <SevenSegment_From0To9+0xa4e>
		__ticks = 1;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	9a a3       	std	Y+34, r25	; 0x22
    55c8:	89 a3       	std	Y+33, r24	; 0x21
    55ca:	3f c0       	rjmp	.+126    	; 0x564a <SevenSegment_From0To9+0xacc>
	else if (__tmp > 65535)
    55cc:	6b a1       	ldd	r22, Y+35	; 0x23
    55ce:	7c a1       	ldd	r23, Y+36	; 0x24
    55d0:	8d a1       	ldd	r24, Y+37	; 0x25
    55d2:	9e a1       	ldd	r25, Y+38	; 0x26
    55d4:	20 e0       	ldi	r18, 0x00	; 0
    55d6:	3f ef       	ldi	r19, 0xFF	; 255
    55d8:	4f e7       	ldi	r20, 0x7F	; 127
    55da:	57 e4       	ldi	r21, 0x47	; 71
    55dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55e0:	18 16       	cp	r1, r24
    55e2:	4c f5       	brge	.+82     	; 0x5636 <SevenSegment_From0To9+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55e4:	6f a1       	ldd	r22, Y+39	; 0x27
    55e6:	78 a5       	ldd	r23, Y+40	; 0x28
    55e8:	89 a5       	ldd	r24, Y+41	; 0x29
    55ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    55ec:	20 e0       	ldi	r18, 0x00	; 0
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	40 e2       	ldi	r20, 0x20	; 32
    55f2:	51 e4       	ldi	r21, 0x41	; 65
    55f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	bc 01       	movw	r22, r24
    55fe:	cd 01       	movw	r24, r26
    5600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	9a a3       	std	Y+34, r25	; 0x22
    560a:	89 a3       	std	Y+33, r24	; 0x21
    560c:	0f c0       	rjmp	.+30     	; 0x562c <SevenSegment_From0To9+0xaae>
    560e:	80 e9       	ldi	r24, 0x90	; 144
    5610:	91 e0       	ldi	r25, 0x01	; 1
    5612:	98 a3       	std	Y+32, r25	; 0x20
    5614:	8f 8f       	std	Y+31, r24	; 0x1f
    5616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5618:	98 a1       	ldd	r25, Y+32	; 0x20
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	f1 f7       	brne	.-4      	; 0x561a <SevenSegment_From0To9+0xa9c>
    561e:	98 a3       	std	Y+32, r25	; 0x20
    5620:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5622:	89 a1       	ldd	r24, Y+33	; 0x21
    5624:	9a a1       	ldd	r25, Y+34	; 0x22
    5626:	01 97       	sbiw	r24, 0x01	; 1
    5628:	9a a3       	std	Y+34, r25	; 0x22
    562a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    562c:	89 a1       	ldd	r24, Y+33	; 0x21
    562e:	9a a1       	ldd	r25, Y+34	; 0x22
    5630:	00 97       	sbiw	r24, 0x00	; 0
    5632:	69 f7       	brne	.-38     	; 0x560e <SevenSegment_From0To9+0xa90>
    5634:	14 c0       	rjmp	.+40     	; 0x565e <SevenSegment_From0To9+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5636:	6b a1       	ldd	r22, Y+35	; 0x23
    5638:	7c a1       	ldd	r23, Y+36	; 0x24
    563a:	8d a1       	ldd	r24, Y+37	; 0x25
    563c:	9e a1       	ldd	r25, Y+38	; 0x26
    563e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	9a a3       	std	Y+34, r25	; 0x22
    5648:	89 a3       	std	Y+33, r24	; 0x21
    564a:	89 a1       	ldd	r24, Y+33	; 0x21
    564c:	9a a1       	ldd	r25, Y+34	; 0x22
    564e:	9e 8f       	std	Y+30, r25	; 0x1e
    5650:	8d 8f       	std	Y+29, r24	; 0x1d
    5652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5654:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	f1 f7       	brne	.-4      	; 0x5656 <SevenSegment_From0To9+0xad8>
    565a:	9e 8f       	std	Y+30, r25	; 0x1e
    565c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 1); // 8
    565e:	fe 01       	movw	r30, r28
    5660:	e3 57       	subi	r30, 0x73	; 115
    5662:	ff 4f       	sbci	r31, 0xFF	; 255
    5664:	80 81       	ld	r24, Z
    5666:	61 e0       	ldi	r22, 0x01	; 1
    5668:	41 e0       	ldi	r20, 0x01	; 1
    566a:	21 e0       	ldi	r18, 0x01	; 1
    566c:	01 e0       	ldi	r16, 0x01	; 1
    566e:	ee 24       	eor	r14, r14
    5670:	e3 94       	inc	r14
    5672:	cc 24       	eor	r12, r12
    5674:	c3 94       	inc	r12
    5676:	aa 24       	eor	r10, r10
    5678:	a3 94       	inc	r10
    567a:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	a8 e4       	ldi	r26, 0x48	; 72
    5684:	b2 e4       	ldi	r27, 0x42	; 66
    5686:	89 8f       	std	Y+25, r24	; 0x19
    5688:	9a 8f       	std	Y+26, r25	; 0x1a
    568a:	ab 8f       	std	Y+27, r26	; 0x1b
    568c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    568e:	69 8d       	ldd	r22, Y+25	; 0x19
    5690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5696:	20 e0       	ldi	r18, 0x00	; 0
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	4a e7       	ldi	r20, 0x7A	; 122
    569c:	55 e4       	ldi	r21, 0x45	; 69
    569e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a2:	dc 01       	movw	r26, r24
    56a4:	cb 01       	movw	r24, r22
    56a6:	8d 8b       	std	Y+21, r24	; 0x15
    56a8:	9e 8b       	std	Y+22, r25	; 0x16
    56aa:	af 8b       	std	Y+23, r26	; 0x17
    56ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56ae:	6d 89       	ldd	r22, Y+21	; 0x15
    56b0:	7e 89       	ldd	r23, Y+22	; 0x16
    56b2:	8f 89       	ldd	r24, Y+23	; 0x17
    56b4:	98 8d       	ldd	r25, Y+24	; 0x18
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e8       	ldi	r20, 0x80	; 128
    56bc:	5f e3       	ldi	r21, 0x3F	; 63
    56be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56c2:	88 23       	and	r24, r24
    56c4:	2c f4       	brge	.+10     	; 0x56d0 <SevenSegment_From0To9+0xb52>
		__ticks = 1;
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	9c 8b       	std	Y+20, r25	; 0x14
    56cc:	8b 8b       	std	Y+19, r24	; 0x13
    56ce:	3f c0       	rjmp	.+126    	; 0x574e <SevenSegment_From0To9+0xbd0>
	else if (__tmp > 65535)
    56d0:	6d 89       	ldd	r22, Y+21	; 0x15
    56d2:	7e 89       	ldd	r23, Y+22	; 0x16
    56d4:	8f 89       	ldd	r24, Y+23	; 0x17
    56d6:	98 8d       	ldd	r25, Y+24	; 0x18
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	3f ef       	ldi	r19, 0xFF	; 255
    56dc:	4f e7       	ldi	r20, 0x7F	; 127
    56de:	57 e4       	ldi	r21, 0x47	; 71
    56e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56e4:	18 16       	cp	r1, r24
    56e6:	4c f5       	brge	.+82     	; 0x573a <SevenSegment_From0To9+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56e8:	69 8d       	ldd	r22, Y+25	; 0x19
    56ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	40 e2       	ldi	r20, 0x20	; 32
    56f6:	51 e4       	ldi	r21, 0x41	; 65
    56f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	bc 01       	movw	r22, r24
    5702:	cd 01       	movw	r24, r26
    5704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	9c 8b       	std	Y+20, r25	; 0x14
    570e:	8b 8b       	std	Y+19, r24	; 0x13
    5710:	0f c0       	rjmp	.+30     	; 0x5730 <SevenSegment_From0To9+0xbb2>
    5712:	80 e9       	ldi	r24, 0x90	; 144
    5714:	91 e0       	ldi	r25, 0x01	; 1
    5716:	9a 8b       	std	Y+18, r25	; 0x12
    5718:	89 8b       	std	Y+17, r24	; 0x11
    571a:	89 89       	ldd	r24, Y+17	; 0x11
    571c:	9a 89       	ldd	r25, Y+18	; 0x12
    571e:	01 97       	sbiw	r24, 0x01	; 1
    5720:	f1 f7       	brne	.-4      	; 0x571e <SevenSegment_From0To9+0xba0>
    5722:	9a 8b       	std	Y+18, r25	; 0x12
    5724:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5726:	8b 89       	ldd	r24, Y+19	; 0x13
    5728:	9c 89       	ldd	r25, Y+20	; 0x14
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	9c 8b       	std	Y+20, r25	; 0x14
    572e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5730:	8b 89       	ldd	r24, Y+19	; 0x13
    5732:	9c 89       	ldd	r25, Y+20	; 0x14
    5734:	00 97       	sbiw	r24, 0x00	; 0
    5736:	69 f7       	brne	.-38     	; 0x5712 <SevenSegment_From0To9+0xb94>
    5738:	14 c0       	rjmp	.+40     	; 0x5762 <SevenSegment_From0To9+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573a:	6d 89       	ldd	r22, Y+21	; 0x15
    573c:	7e 89       	ldd	r23, Y+22	; 0x16
    573e:	8f 89       	ldd	r24, Y+23	; 0x17
    5740:	98 8d       	ldd	r25, Y+24	; 0x18
    5742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5746:	dc 01       	movw	r26, r24
    5748:	cb 01       	movw	r24, r22
    574a:	9c 8b       	std	Y+20, r25	; 0x14
    574c:	8b 8b       	std	Y+19, r24	; 0x13
    574e:	8b 89       	ldd	r24, Y+19	; 0x13
    5750:	9c 89       	ldd	r25, Y+20	; 0x14
    5752:	98 8b       	std	Y+16, r25	; 0x10
    5754:	8f 87       	std	Y+15, r24	; 0x0f
    5756:	8f 85       	ldd	r24, Y+15	; 0x0f
    5758:	98 89       	ldd	r25, Y+16	; 0x10
    575a:	01 97       	sbiw	r24, 0x01	; 1
    575c:	f1 f7       	brne	.-4      	; 0x575a <SevenSegment_From0To9+0xbdc>
    575e:	98 8b       	std	Y+16, r25	; 0x10
    5760:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 1, 1); // 9
    5762:	fe 01       	movw	r30, r28
    5764:	e3 57       	subi	r30, 0x73	; 115
    5766:	ff 4f       	sbci	r31, 0xFF	; 255
    5768:	80 81       	ld	r24, Z
    576a:	61 e0       	ldi	r22, 0x01	; 1
    576c:	41 e0       	ldi	r20, 0x01	; 1
    576e:	21 e0       	ldi	r18, 0x01	; 1
    5770:	01 e0       	ldi	r16, 0x01	; 1
    5772:	ee 24       	eor	r14, r14
    5774:	cc 24       	eor	r12, r12
    5776:	c3 94       	inc	r12
    5778:	aa 24       	eor	r10, r10
    577a:	a3 94       	inc	r10
    577c:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5780:	80 e0       	ldi	r24, 0x00	; 0
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	a8 e4       	ldi	r26, 0x48	; 72
    5786:	b2 e4       	ldi	r27, 0x42	; 66
    5788:	8b 87       	std	Y+11, r24	; 0x0b
    578a:	9c 87       	std	Y+12, r25	; 0x0c
    578c:	ad 87       	std	Y+13, r26	; 0x0d
    578e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5790:	6b 85       	ldd	r22, Y+11	; 0x0b
    5792:	7c 85       	ldd	r23, Y+12	; 0x0c
    5794:	8d 85       	ldd	r24, Y+13	; 0x0d
    5796:	9e 85       	ldd	r25, Y+14	; 0x0e
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	4a e7       	ldi	r20, 0x7A	; 122
    579e:	55 e4       	ldi	r21, 0x45	; 69
    57a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	8f 83       	std	Y+7, r24	; 0x07
    57aa:	98 87       	std	Y+8, r25	; 0x08
    57ac:	a9 87       	std	Y+9, r26	; 0x09
    57ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57b0:	6f 81       	ldd	r22, Y+7	; 0x07
    57b2:	78 85       	ldd	r23, Y+8	; 0x08
    57b4:	89 85       	ldd	r24, Y+9	; 0x09
    57b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	40 e8       	ldi	r20, 0x80	; 128
    57be:	5f e3       	ldi	r21, 0x3F	; 63
    57c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    57c4:	88 23       	and	r24, r24
    57c6:	2c f4       	brge	.+10     	; 0x57d2 <SevenSegment_From0To9+0xc54>
		__ticks = 1;
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	9e 83       	std	Y+6, r25	; 0x06
    57ce:	8d 83       	std	Y+5, r24	; 0x05
    57d0:	3f c0       	rjmp	.+126    	; 0x5850 <SevenSegment_From0To9+0xcd2>
	else if (__tmp > 65535)
    57d2:	6f 81       	ldd	r22, Y+7	; 0x07
    57d4:	78 85       	ldd	r23, Y+8	; 0x08
    57d6:	89 85       	ldd	r24, Y+9	; 0x09
    57d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	3f ef       	ldi	r19, 0xFF	; 255
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	57 e4       	ldi	r21, 0x47	; 71
    57e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    57e6:	18 16       	cp	r1, r24
    57e8:	4c f5       	brge	.+82     	; 0x583c <SevenSegment_From0To9+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    57ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    57ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    57f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	40 e2       	ldi	r20, 0x20	; 32
    57f8:	51 e4       	ldi	r21, 0x41	; 65
    57fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	bc 01       	movw	r22, r24
    5804:	cd 01       	movw	r24, r26
    5806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    580a:	dc 01       	movw	r26, r24
    580c:	cb 01       	movw	r24, r22
    580e:	9e 83       	std	Y+6, r25	; 0x06
    5810:	8d 83       	std	Y+5, r24	; 0x05
    5812:	0f c0       	rjmp	.+30     	; 0x5832 <SevenSegment_From0To9+0xcb4>
    5814:	80 e9       	ldi	r24, 0x90	; 144
    5816:	91 e0       	ldi	r25, 0x01	; 1
    5818:	9c 83       	std	Y+4, r25	; 0x04
    581a:	8b 83       	std	Y+3, r24	; 0x03
    581c:	8b 81       	ldd	r24, Y+3	; 0x03
    581e:	9c 81       	ldd	r25, Y+4	; 0x04
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <SevenSegment_From0To9+0xca2>
    5824:	9c 83       	std	Y+4, r25	; 0x04
    5826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5828:	8d 81       	ldd	r24, Y+5	; 0x05
    582a:	9e 81       	ldd	r25, Y+6	; 0x06
    582c:	01 97       	sbiw	r24, 0x01	; 1
    582e:	9e 83       	std	Y+6, r25	; 0x06
    5830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5832:	8d 81       	ldd	r24, Y+5	; 0x05
    5834:	9e 81       	ldd	r25, Y+6	; 0x06
    5836:	00 97       	sbiw	r24, 0x00	; 0
    5838:	69 f7       	brne	.-38     	; 0x5814 <SevenSegment_From0To9+0xc96>
    583a:	b5 c9       	rjmp	.-3222   	; 0x4ba6 <SevenSegment_From0To9+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583c:	6f 81       	ldd	r22, Y+7	; 0x07
    583e:	78 85       	ldd	r23, Y+8	; 0x08
    5840:	89 85       	ldd	r24, Y+9	; 0x09
    5842:	9a 85       	ldd	r25, Y+10	; 0x0a
    5844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5848:	dc 01       	movw	r26, r24
    584a:	cb 01       	movw	r24, r22
    584c:	9e 83       	std	Y+6, r25	; 0x06
    584e:	8d 83       	std	Y+5, r24	; 0x05
    5850:	8d 81       	ldd	r24, Y+5	; 0x05
    5852:	9e 81       	ldd	r25, Y+6	; 0x06
    5854:	9a 83       	std	Y+2, r25	; 0x02
    5856:	89 83       	std	Y+1, r24	; 0x01
    5858:	89 81       	ldd	r24, Y+1	; 0x01
    585a:	9a 81       	ldd	r25, Y+2	; 0x02
    585c:	01 97       	sbiw	r24, 0x01	; 1
    585e:	f1 f7       	brne	.-4      	; 0x585c <SevenSegment_From0To9+0xcde>
    5860:	9a 83       	std	Y+2, r25	; 0x02
    5862:	89 83       	std	Y+1, r24	; 0x01
    5864:	a0 c9       	rjmp	.-3264   	; 0x4ba6 <SevenSegment_From0To9+0x28>

00005866 <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(u8 Copy_u8PortId){
    5866:	af 92       	push	r10
    5868:	cf 92       	push	r12
    586a:	ef 92       	push	r14
    586c:	0f 93       	push	r16
    586e:	1f 93       	push	r17
    5870:	df 93       	push	r29
    5872:	cf 93       	push	r28
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	c1 57       	subi	r28, 0x71	; 113
    587a:	d0 40       	sbci	r29, 0x00	; 0
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	de bf       	out	0x3e, r29	; 62
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	fe 01       	movw	r30, r28
    5888:	ef 58       	subi	r30, 0x8F	; 143
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 1, 1, 1); // A
    588e:	fe 01       	movw	r30, r28
    5890:	ef 58       	subi	r30, 0x8F	; 143
    5892:	ff 4f       	sbci	r31, 0xFF	; 255
    5894:	80 81       	ld	r24, Z
    5896:	61 e0       	ldi	r22, 0x01	; 1
    5898:	41 e0       	ldi	r20, 0x01	; 1
    589a:	21 e0       	ldi	r18, 0x01	; 1
    589c:	00 e0       	ldi	r16, 0x00	; 0
    589e:	ee 24       	eor	r14, r14
    58a0:	e3 94       	inc	r14
    58a2:	cc 24       	eor	r12, r12
    58a4:	c3 94       	inc	r12
    58a6:	aa 24       	eor	r10, r10
    58a8:	a3 94       	inc	r10
    58aa:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    58ae:	fe 01       	movw	r30, r28
    58b0:	e3 59       	subi	r30, 0x93	; 147
    58b2:	ff 4f       	sbci	r31, 0xFF	; 255
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	a8 e4       	ldi	r26, 0x48	; 72
    58ba:	b2 e4       	ldi	r27, 0x42	; 66
    58bc:	80 83       	st	Z, r24
    58be:	91 83       	std	Z+1, r25	; 0x01
    58c0:	a2 83       	std	Z+2, r26	; 0x02
    58c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58c4:	8e 01       	movw	r16, r28
    58c6:	07 59       	subi	r16, 0x97	; 151
    58c8:	1f 4f       	sbci	r17, 0xFF	; 255
    58ca:	fe 01       	movw	r30, r28
    58cc:	e3 59       	subi	r30, 0x93	; 147
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	60 81       	ld	r22, Z
    58d2:	71 81       	ldd	r23, Z+1	; 0x01
    58d4:	82 81       	ldd	r24, Z+2	; 0x02
    58d6:	93 81       	ldd	r25, Z+3	; 0x03
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	4a e7       	ldi	r20, 0x7A	; 122
    58de:	55 e4       	ldi	r21, 0x45	; 69
    58e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	f8 01       	movw	r30, r16
    58ea:	80 83       	st	Z, r24
    58ec:	91 83       	std	Z+1, r25	; 0x01
    58ee:	a2 83       	std	Z+2, r26	; 0x02
    58f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58f2:	fe 01       	movw	r30, r28
    58f4:	e7 59       	subi	r30, 0x97	; 151
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	60 81       	ld	r22, Z
    58fa:	71 81       	ldd	r23, Z+1	; 0x01
    58fc:	82 81       	ldd	r24, Z+2	; 0x02
    58fe:	93 81       	ldd	r25, Z+3	; 0x03
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	40 e8       	ldi	r20, 0x80	; 128
    5906:	5f e3       	ldi	r21, 0x3F	; 63
    5908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    590c:	88 23       	and	r24, r24
    590e:	44 f4       	brge	.+16     	; 0x5920 <SevenSegment_FromAToH+0xba>
		__ticks = 1;
    5910:	fe 01       	movw	r30, r28
    5912:	e9 59       	subi	r30, 0x99	; 153
    5914:	ff 4f       	sbci	r31, 0xFF	; 255
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	91 83       	std	Z+1, r25	; 0x01
    591c:	80 83       	st	Z, r24
    591e:	64 c0       	rjmp	.+200    	; 0x59e8 <SevenSegment_FromAToH+0x182>
	else if (__tmp > 65535)
    5920:	fe 01       	movw	r30, r28
    5922:	e7 59       	subi	r30, 0x97	; 151
    5924:	ff 4f       	sbci	r31, 0xFF	; 255
    5926:	60 81       	ld	r22, Z
    5928:	71 81       	ldd	r23, Z+1	; 0x01
    592a:	82 81       	ldd	r24, Z+2	; 0x02
    592c:	93 81       	ldd	r25, Z+3	; 0x03
    592e:	20 e0       	ldi	r18, 0x00	; 0
    5930:	3f ef       	ldi	r19, 0xFF	; 255
    5932:	4f e7       	ldi	r20, 0x7F	; 127
    5934:	57 e4       	ldi	r21, 0x47	; 71
    5936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    593a:	18 16       	cp	r1, r24
    593c:	0c f0       	brlt	.+2      	; 0x5940 <SevenSegment_FromAToH+0xda>
    593e:	43 c0       	rjmp	.+134    	; 0x59c6 <SevenSegment_FromAToH+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5940:	fe 01       	movw	r30, r28
    5942:	e3 59       	subi	r30, 0x93	; 147
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	60 81       	ld	r22, Z
    5948:	71 81       	ldd	r23, Z+1	; 0x01
    594a:	82 81       	ldd	r24, Z+2	; 0x02
    594c:	93 81       	ldd	r25, Z+3	; 0x03
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	40 e2       	ldi	r20, 0x20	; 32
    5954:	51 e4       	ldi	r21, 0x41	; 65
    5956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	8e 01       	movw	r16, r28
    5960:	09 59       	subi	r16, 0x99	; 153
    5962:	1f 4f       	sbci	r17, 0xFF	; 255
    5964:	bc 01       	movw	r22, r24
    5966:	cd 01       	movw	r24, r26
    5968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	f8 01       	movw	r30, r16
    5972:	91 83       	std	Z+1, r25	; 0x01
    5974:	80 83       	st	Z, r24
    5976:	1f c0       	rjmp	.+62     	; 0x59b6 <SevenSegment_FromAToH+0x150>
    5978:	fe 01       	movw	r30, r28
    597a:	eb 59       	subi	r30, 0x9B	; 155
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 e9       	ldi	r24, 0x90	; 144
    5980:	91 e0       	ldi	r25, 0x01	; 1
    5982:	91 83       	std	Z+1, r25	; 0x01
    5984:	80 83       	st	Z, r24
    5986:	fe 01       	movw	r30, r28
    5988:	eb 59       	subi	r30, 0x9B	; 155
    598a:	ff 4f       	sbci	r31, 0xFF	; 255
    598c:	80 81       	ld	r24, Z
    598e:	91 81       	ldd	r25, Z+1	; 0x01
    5990:	01 97       	sbiw	r24, 0x01	; 1
    5992:	f1 f7       	brne	.-4      	; 0x5990 <SevenSegment_FromAToH+0x12a>
    5994:	fe 01       	movw	r30, r28
    5996:	eb 59       	subi	r30, 0x9B	; 155
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	91 83       	std	Z+1, r25	; 0x01
    599c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    599e:	de 01       	movw	r26, r28
    59a0:	a9 59       	subi	r26, 0x99	; 153
    59a2:	bf 4f       	sbci	r27, 0xFF	; 255
    59a4:	fe 01       	movw	r30, r28
    59a6:	e9 59       	subi	r30, 0x99	; 153
    59a8:	ff 4f       	sbci	r31, 0xFF	; 255
    59aa:	80 81       	ld	r24, Z
    59ac:	91 81       	ldd	r25, Z+1	; 0x01
    59ae:	01 97       	sbiw	r24, 0x01	; 1
    59b0:	11 96       	adiw	r26, 0x01	; 1
    59b2:	9c 93       	st	X, r25
    59b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b6:	fe 01       	movw	r30, r28
    59b8:	e9 59       	subi	r30, 0x99	; 153
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	80 81       	ld	r24, Z
    59be:	91 81       	ldd	r25, Z+1	; 0x01
    59c0:	00 97       	sbiw	r24, 0x00	; 0
    59c2:	d1 f6       	brne	.-76     	; 0x5978 <SevenSegment_FromAToH+0x112>
    59c4:	27 c0       	rjmp	.+78     	; 0x5a14 <SevenSegment_FromAToH+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c6:	8e 01       	movw	r16, r28
    59c8:	09 59       	subi	r16, 0x99	; 153
    59ca:	1f 4f       	sbci	r17, 0xFF	; 255
    59cc:	fe 01       	movw	r30, r28
    59ce:	e7 59       	subi	r30, 0x97	; 151
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	60 81       	ld	r22, Z
    59d4:	71 81       	ldd	r23, Z+1	; 0x01
    59d6:	82 81       	ldd	r24, Z+2	; 0x02
    59d8:	93 81       	ldd	r25, Z+3	; 0x03
    59da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	f8 01       	movw	r30, r16
    59e4:	91 83       	std	Z+1, r25	; 0x01
    59e6:	80 83       	st	Z, r24
    59e8:	de 01       	movw	r26, r28
    59ea:	ad 59       	subi	r26, 0x9D	; 157
    59ec:	bf 4f       	sbci	r27, 0xFF	; 255
    59ee:	fe 01       	movw	r30, r28
    59f0:	e9 59       	subi	r30, 0x99	; 153
    59f2:	ff 4f       	sbci	r31, 0xFF	; 255
    59f4:	80 81       	ld	r24, Z
    59f6:	91 81       	ldd	r25, Z+1	; 0x01
    59f8:	8d 93       	st	X+, r24
    59fa:	9c 93       	st	X, r25
    59fc:	fe 01       	movw	r30, r28
    59fe:	ed 59       	subi	r30, 0x9D	; 157
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	80 81       	ld	r24, Z
    5a04:	91 81       	ldd	r25, Z+1	; 0x01
    5a06:	01 97       	sbiw	r24, 0x01	; 1
    5a08:	f1 f7       	brne	.-4      	; 0x5a06 <SevenSegment_FromAToH+0x1a0>
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	ed 59       	subi	r30, 0x9D	; 157
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	91 83       	std	Z+1, r25	; 0x01
    5a12:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 0, 1, 1, 1, 1, 1); // B
    5a14:	fe 01       	movw	r30, r28
    5a16:	ef 58       	subi	r30, 0x8F	; 143
    5a18:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1a:	80 81       	ld	r24, Z
    5a1c:	60 e0       	ldi	r22, 0x00	; 0
    5a1e:	40 e0       	ldi	r20, 0x00	; 0
    5a20:	21 e0       	ldi	r18, 0x01	; 1
    5a22:	01 e0       	ldi	r16, 0x01	; 1
    5a24:	ee 24       	eor	r14, r14
    5a26:	e3 94       	inc	r14
    5a28:	cc 24       	eor	r12, r12
    5a2a:	c3 94       	inc	r12
    5a2c:	aa 24       	eor	r10, r10
    5a2e:	a3 94       	inc	r10
    5a30:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5a34:	fe 01       	movw	r30, r28
    5a36:	e1 5a       	subi	r30, 0xA1	; 161
    5a38:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	a8 e4       	ldi	r26, 0x48	; 72
    5a40:	b2 e4       	ldi	r27, 0x42	; 66
    5a42:	80 83       	st	Z, r24
    5a44:	91 83       	std	Z+1, r25	; 0x01
    5a46:	a2 83       	std	Z+2, r26	; 0x02
    5a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a4a:	8e 01       	movw	r16, r28
    5a4c:	05 5a       	subi	r16, 0xA5	; 165
    5a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a50:	fe 01       	movw	r30, r28
    5a52:	e1 5a       	subi	r30, 0xA1	; 161
    5a54:	ff 4f       	sbci	r31, 0xFF	; 255
    5a56:	60 81       	ld	r22, Z
    5a58:	71 81       	ldd	r23, Z+1	; 0x01
    5a5a:	82 81       	ldd	r24, Z+2	; 0x02
    5a5c:	93 81       	ldd	r25, Z+3	; 0x03
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	4a e7       	ldi	r20, 0x7A	; 122
    5a64:	55 e4       	ldi	r21, 0x45	; 69
    5a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	f8 01       	movw	r30, r16
    5a70:	80 83       	st	Z, r24
    5a72:	91 83       	std	Z+1, r25	; 0x01
    5a74:	a2 83       	std	Z+2, r26	; 0x02
    5a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a78:	fe 01       	movw	r30, r28
    5a7a:	e5 5a       	subi	r30, 0xA5	; 165
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	60 81       	ld	r22, Z
    5a80:	71 81       	ldd	r23, Z+1	; 0x01
    5a82:	82 81       	ldd	r24, Z+2	; 0x02
    5a84:	93 81       	ldd	r25, Z+3	; 0x03
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e0       	ldi	r19, 0x00	; 0
    5a8a:	40 e8       	ldi	r20, 0x80	; 128
    5a8c:	5f e3       	ldi	r21, 0x3F	; 63
    5a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a92:	88 23       	and	r24, r24
    5a94:	44 f4       	brge	.+16     	; 0x5aa6 <SevenSegment_FromAToH+0x240>
		__ticks = 1;
    5a96:	fe 01       	movw	r30, r28
    5a98:	e7 5a       	subi	r30, 0xA7	; 167
    5a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	91 83       	std	Z+1, r25	; 0x01
    5aa2:	80 83       	st	Z, r24
    5aa4:	64 c0       	rjmp	.+200    	; 0x5b6e <SevenSegment_FromAToH+0x308>
	else if (__tmp > 65535)
    5aa6:	fe 01       	movw	r30, r28
    5aa8:	e5 5a       	subi	r30, 0xA5	; 165
    5aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    5aac:	60 81       	ld	r22, Z
    5aae:	71 81       	ldd	r23, Z+1	; 0x01
    5ab0:	82 81       	ldd	r24, Z+2	; 0x02
    5ab2:	93 81       	ldd	r25, Z+3	; 0x03
    5ab4:	20 e0       	ldi	r18, 0x00	; 0
    5ab6:	3f ef       	ldi	r19, 0xFF	; 255
    5ab8:	4f e7       	ldi	r20, 0x7F	; 127
    5aba:	57 e4       	ldi	r21, 0x47	; 71
    5abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ac0:	18 16       	cp	r1, r24
    5ac2:	0c f0       	brlt	.+2      	; 0x5ac6 <SevenSegment_FromAToH+0x260>
    5ac4:	43 c0       	rjmp	.+134    	; 0x5b4c <SevenSegment_FromAToH+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ac6:	fe 01       	movw	r30, r28
    5ac8:	e1 5a       	subi	r30, 0xA1	; 161
    5aca:	ff 4f       	sbci	r31, 0xFF	; 255
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	40 e2       	ldi	r20, 0x20	; 32
    5ada:	51 e4       	ldi	r21, 0x41	; 65
    5adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	8e 01       	movw	r16, r28
    5ae6:	07 5a       	subi	r16, 0xA7	; 167
    5ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aea:	bc 01       	movw	r22, r24
    5aec:	cd 01       	movw	r24, r26
    5aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af2:	dc 01       	movw	r26, r24
    5af4:	cb 01       	movw	r24, r22
    5af6:	f8 01       	movw	r30, r16
    5af8:	91 83       	std	Z+1, r25	; 0x01
    5afa:	80 83       	st	Z, r24
    5afc:	1f c0       	rjmp	.+62     	; 0x5b3c <SevenSegment_FromAToH+0x2d6>
    5afe:	fe 01       	movw	r30, r28
    5b00:	e9 5a       	subi	r30, 0xA9	; 169
    5b02:	ff 4f       	sbci	r31, 0xFF	; 255
    5b04:	80 e9       	ldi	r24, 0x90	; 144
    5b06:	91 e0       	ldi	r25, 0x01	; 1
    5b08:	91 83       	std	Z+1, r25	; 0x01
    5b0a:	80 83       	st	Z, r24
    5b0c:	fe 01       	movw	r30, r28
    5b0e:	e9 5a       	subi	r30, 0xA9	; 169
    5b10:	ff 4f       	sbci	r31, 0xFF	; 255
    5b12:	80 81       	ld	r24, Z
    5b14:	91 81       	ldd	r25, Z+1	; 0x01
    5b16:	01 97       	sbiw	r24, 0x01	; 1
    5b18:	f1 f7       	brne	.-4      	; 0x5b16 <SevenSegment_FromAToH+0x2b0>
    5b1a:	fe 01       	movw	r30, r28
    5b1c:	e9 5a       	subi	r30, 0xA9	; 169
    5b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b20:	91 83       	std	Z+1, r25	; 0x01
    5b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b24:	de 01       	movw	r26, r28
    5b26:	a7 5a       	subi	r26, 0xA7	; 167
    5b28:	bf 4f       	sbci	r27, 0xFF	; 255
    5b2a:	fe 01       	movw	r30, r28
    5b2c:	e7 5a       	subi	r30, 0xA7	; 167
    5b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b30:	80 81       	ld	r24, Z
    5b32:	91 81       	ldd	r25, Z+1	; 0x01
    5b34:	01 97       	sbiw	r24, 0x01	; 1
    5b36:	11 96       	adiw	r26, 0x01	; 1
    5b38:	9c 93       	st	X, r25
    5b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	e7 5a       	subi	r30, 0xA7	; 167
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	80 81       	ld	r24, Z
    5b44:	91 81       	ldd	r25, Z+1	; 0x01
    5b46:	00 97       	sbiw	r24, 0x00	; 0
    5b48:	d1 f6       	brne	.-76     	; 0x5afe <SevenSegment_FromAToH+0x298>
    5b4a:	27 c0       	rjmp	.+78     	; 0x5b9a <SevenSegment_FromAToH+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4c:	8e 01       	movw	r16, r28
    5b4e:	07 5a       	subi	r16, 0xA7	; 167
    5b50:	1f 4f       	sbci	r17, 0xFF	; 255
    5b52:	fe 01       	movw	r30, r28
    5b54:	e5 5a       	subi	r30, 0xA5	; 165
    5b56:	ff 4f       	sbci	r31, 0xFF	; 255
    5b58:	60 81       	ld	r22, Z
    5b5a:	71 81       	ldd	r23, Z+1	; 0x01
    5b5c:	82 81       	ldd	r24, Z+2	; 0x02
    5b5e:	93 81       	ldd	r25, Z+3	; 0x03
    5b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b64:	dc 01       	movw	r26, r24
    5b66:	cb 01       	movw	r24, r22
    5b68:	f8 01       	movw	r30, r16
    5b6a:	91 83       	std	Z+1, r25	; 0x01
    5b6c:	80 83       	st	Z, r24
    5b6e:	de 01       	movw	r26, r28
    5b70:	ab 5a       	subi	r26, 0xAB	; 171
    5b72:	bf 4f       	sbci	r27, 0xFF	; 255
    5b74:	fe 01       	movw	r30, r28
    5b76:	e7 5a       	subi	r30, 0xA7	; 167
    5b78:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7a:	80 81       	ld	r24, Z
    5b7c:	91 81       	ldd	r25, Z+1	; 0x01
    5b7e:	8d 93       	st	X+, r24
    5b80:	9c 93       	st	X, r25
    5b82:	fe 01       	movw	r30, r28
    5b84:	eb 5a       	subi	r30, 0xAB	; 171
    5b86:	ff 4f       	sbci	r31, 0xFF	; 255
    5b88:	80 81       	ld	r24, Z
    5b8a:	91 81       	ldd	r25, Z+1	; 0x01
    5b8c:	01 97       	sbiw	r24, 0x01	; 1
    5b8e:	f1 f7       	brne	.-4      	; 0x5b8c <SevenSegment_FromAToH+0x326>
    5b90:	fe 01       	movw	r30, r28
    5b92:	eb 5a       	subi	r30, 0xAB	; 171
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	91 83       	std	Z+1, r25	; 0x01
    5b98:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 0); // C
    5b9a:	fe 01       	movw	r30, r28
    5b9c:	ef 58       	subi	r30, 0x8F	; 143
    5b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba0:	80 81       	ld	r24, Z
    5ba2:	61 e0       	ldi	r22, 0x01	; 1
    5ba4:	40 e0       	ldi	r20, 0x00	; 0
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	01 e0       	ldi	r16, 0x01	; 1
    5baa:	ee 24       	eor	r14, r14
    5bac:	e3 94       	inc	r14
    5bae:	cc 24       	eor	r12, r12
    5bb0:	c3 94       	inc	r12
    5bb2:	aa 24       	eor	r10, r10
    5bb4:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5bb8:	fe 01       	movw	r30, r28
    5bba:	ef 5a       	subi	r30, 0xAF	; 175
    5bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	a8 e4       	ldi	r26, 0x48	; 72
    5bc4:	b2 e4       	ldi	r27, 0x42	; 66
    5bc6:	80 83       	st	Z, r24
    5bc8:	91 83       	std	Z+1, r25	; 0x01
    5bca:	a2 83       	std	Z+2, r26	; 0x02
    5bcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bce:	8e 01       	movw	r16, r28
    5bd0:	03 5b       	subi	r16, 0xB3	; 179
    5bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	ef 5a       	subi	r30, 0xAF	; 175
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	60 81       	ld	r22, Z
    5bdc:	71 81       	ldd	r23, Z+1	; 0x01
    5bde:	82 81       	ldd	r24, Z+2	; 0x02
    5be0:	93 81       	ldd	r25, Z+3	; 0x03
    5be2:	20 e0       	ldi	r18, 0x00	; 0
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	4a e7       	ldi	r20, 0x7A	; 122
    5be8:	55 e4       	ldi	r21, 0x45	; 69
    5bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bee:	dc 01       	movw	r26, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	f8 01       	movw	r30, r16
    5bf4:	80 83       	st	Z, r24
    5bf6:	91 83       	std	Z+1, r25	; 0x01
    5bf8:	a2 83       	std	Z+2, r26	; 0x02
    5bfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bfc:	fe 01       	movw	r30, r28
    5bfe:	e3 5b       	subi	r30, 0xB3	; 179
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	60 81       	ld	r22, Z
    5c04:	71 81       	ldd	r23, Z+1	; 0x01
    5c06:	82 81       	ldd	r24, Z+2	; 0x02
    5c08:	93 81       	ldd	r25, Z+3	; 0x03
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e8       	ldi	r20, 0x80	; 128
    5c10:	5f e3       	ldi	r21, 0x3F	; 63
    5c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c16:	88 23       	and	r24, r24
    5c18:	44 f4       	brge	.+16     	; 0x5c2a <SevenSegment_FromAToH+0x3c4>
		__ticks = 1;
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	e5 5b       	subi	r30, 0xB5	; 181
    5c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	91 83       	std	Z+1, r25	; 0x01
    5c26:	80 83       	st	Z, r24
    5c28:	64 c0       	rjmp	.+200    	; 0x5cf2 <SevenSegment_FromAToH+0x48c>
	else if (__tmp > 65535)
    5c2a:	fe 01       	movw	r30, r28
    5c2c:	e3 5b       	subi	r30, 0xB3	; 179
    5c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c30:	60 81       	ld	r22, Z
    5c32:	71 81       	ldd	r23, Z+1	; 0x01
    5c34:	82 81       	ldd	r24, Z+2	; 0x02
    5c36:	93 81       	ldd	r25, Z+3	; 0x03
    5c38:	20 e0       	ldi	r18, 0x00	; 0
    5c3a:	3f ef       	ldi	r19, 0xFF	; 255
    5c3c:	4f e7       	ldi	r20, 0x7F	; 127
    5c3e:	57 e4       	ldi	r21, 0x47	; 71
    5c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c44:	18 16       	cp	r1, r24
    5c46:	0c f0       	brlt	.+2      	; 0x5c4a <SevenSegment_FromAToH+0x3e4>
    5c48:	43 c0       	rjmp	.+134    	; 0x5cd0 <SevenSegment_FromAToH+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c4a:	fe 01       	movw	r30, r28
    5c4c:	ef 5a       	subi	r30, 0xAF	; 175
    5c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c50:	60 81       	ld	r22, Z
    5c52:	71 81       	ldd	r23, Z+1	; 0x01
    5c54:	82 81       	ldd	r24, Z+2	; 0x02
    5c56:	93 81       	ldd	r25, Z+3	; 0x03
    5c58:	20 e0       	ldi	r18, 0x00	; 0
    5c5a:	30 e0       	ldi	r19, 0x00	; 0
    5c5c:	40 e2       	ldi	r20, 0x20	; 32
    5c5e:	51 e4       	ldi	r21, 0x41	; 65
    5c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	8e 01       	movw	r16, r28
    5c6a:	05 5b       	subi	r16, 0xB5	; 181
    5c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c6e:	bc 01       	movw	r22, r24
    5c70:	cd 01       	movw	r24, r26
    5c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c76:	dc 01       	movw	r26, r24
    5c78:	cb 01       	movw	r24, r22
    5c7a:	f8 01       	movw	r30, r16
    5c7c:	91 83       	std	Z+1, r25	; 0x01
    5c7e:	80 83       	st	Z, r24
    5c80:	1f c0       	rjmp	.+62     	; 0x5cc0 <SevenSegment_FromAToH+0x45a>
    5c82:	fe 01       	movw	r30, r28
    5c84:	e7 5b       	subi	r30, 0xB7	; 183
    5c86:	ff 4f       	sbci	r31, 0xFF	; 255
    5c88:	80 e9       	ldi	r24, 0x90	; 144
    5c8a:	91 e0       	ldi	r25, 0x01	; 1
    5c8c:	91 83       	std	Z+1, r25	; 0x01
    5c8e:	80 83       	st	Z, r24
    5c90:	fe 01       	movw	r30, r28
    5c92:	e7 5b       	subi	r30, 0xB7	; 183
    5c94:	ff 4f       	sbci	r31, 0xFF	; 255
    5c96:	80 81       	ld	r24, Z
    5c98:	91 81       	ldd	r25, Z+1	; 0x01
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	f1 f7       	brne	.-4      	; 0x5c9a <SevenSegment_FromAToH+0x434>
    5c9e:	fe 01       	movw	r30, r28
    5ca0:	e7 5b       	subi	r30, 0xB7	; 183
    5ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca4:	91 83       	std	Z+1, r25	; 0x01
    5ca6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ca8:	de 01       	movw	r26, r28
    5caa:	a5 5b       	subi	r26, 0xB5	; 181
    5cac:	bf 4f       	sbci	r27, 0xFF	; 255
    5cae:	fe 01       	movw	r30, r28
    5cb0:	e5 5b       	subi	r30, 0xB5	; 181
    5cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb4:	80 81       	ld	r24, Z
    5cb6:	91 81       	ldd	r25, Z+1	; 0x01
    5cb8:	01 97       	sbiw	r24, 0x01	; 1
    5cba:	11 96       	adiw	r26, 0x01	; 1
    5cbc:	9c 93       	st	X, r25
    5cbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc0:	fe 01       	movw	r30, r28
    5cc2:	e5 5b       	subi	r30, 0xB5	; 181
    5cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc6:	80 81       	ld	r24, Z
    5cc8:	91 81       	ldd	r25, Z+1	; 0x01
    5cca:	00 97       	sbiw	r24, 0x00	; 0
    5ccc:	d1 f6       	brne	.-76     	; 0x5c82 <SevenSegment_FromAToH+0x41c>
    5cce:	27 c0       	rjmp	.+78     	; 0x5d1e <SevenSegment_FromAToH+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cd0:	8e 01       	movw	r16, r28
    5cd2:	05 5b       	subi	r16, 0xB5	; 181
    5cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	e3 5b       	subi	r30, 0xB3	; 179
    5cda:	ff 4f       	sbci	r31, 0xFF	; 255
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	82 81       	ldd	r24, Z+2	; 0x02
    5ce2:	93 81       	ldd	r25, Z+3	; 0x03
    5ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce8:	dc 01       	movw	r26, r24
    5cea:	cb 01       	movw	r24, r22
    5cec:	f8 01       	movw	r30, r16
    5cee:	91 83       	std	Z+1, r25	; 0x01
    5cf0:	80 83       	st	Z, r24
    5cf2:	de 01       	movw	r26, r28
    5cf4:	a9 5b       	subi	r26, 0xB9	; 185
    5cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	e5 5b       	subi	r30, 0xB5	; 181
    5cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfe:	80 81       	ld	r24, Z
    5d00:	91 81       	ldd	r25, Z+1	; 0x01
    5d02:	8d 93       	st	X+, r24
    5d04:	9c 93       	st	X, r25
    5d06:	fe 01       	movw	r30, r28
    5d08:	e9 5b       	subi	r30, 0xB9	; 185
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	80 81       	ld	r24, Z
    5d0e:	91 81       	ldd	r25, Z+1	; 0x01
    5d10:	01 97       	sbiw	r24, 0x01	; 1
    5d12:	f1 f7       	brne	.-4      	; 0x5d10 <SevenSegment_FromAToH+0x4aa>
    5d14:	fe 01       	movw	r30, r28
    5d16:	e9 5b       	subi	r30, 0xB9	; 185
    5d18:	ff 4f       	sbci	r31, 0xFF	; 255
    5d1a:	91 83       	std	Z+1, r25	; 0x01
    5d1c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 1, 1, 0, 1); // D
    5d1e:	fe 01       	movw	r30, r28
    5d20:	ef 58       	subi	r30, 0x8F	; 143
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	80 81       	ld	r24, Z
    5d26:	60 e0       	ldi	r22, 0x00	; 0
    5d28:	41 e0       	ldi	r20, 0x01	; 1
    5d2a:	21 e0       	ldi	r18, 0x01	; 1
    5d2c:	01 e0       	ldi	r16, 0x01	; 1
    5d2e:	ee 24       	eor	r14, r14
    5d30:	e3 94       	inc	r14
    5d32:	cc 24       	eor	r12, r12
    5d34:	aa 24       	eor	r10, r10
    5d36:	a3 94       	inc	r10
    5d38:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	ed 5b       	subi	r30, 0xBD	; 189
    5d40:	ff 4f       	sbci	r31, 0xFF	; 255
    5d42:	80 e0       	ldi	r24, 0x00	; 0
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	a8 e4       	ldi	r26, 0x48	; 72
    5d48:	b2 e4       	ldi	r27, 0x42	; 66
    5d4a:	80 83       	st	Z, r24
    5d4c:	91 83       	std	Z+1, r25	; 0x01
    5d4e:	a2 83       	std	Z+2, r26	; 0x02
    5d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d52:	8e 01       	movw	r16, r28
    5d54:	01 5c       	subi	r16, 0xC1	; 193
    5d56:	1f 4f       	sbci	r17, 0xFF	; 255
    5d58:	fe 01       	movw	r30, r28
    5d5a:	ed 5b       	subi	r30, 0xBD	; 189
    5d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5e:	60 81       	ld	r22, Z
    5d60:	71 81       	ldd	r23, Z+1	; 0x01
    5d62:	82 81       	ldd	r24, Z+2	; 0x02
    5d64:	93 81       	ldd	r25, Z+3	; 0x03
    5d66:	20 e0       	ldi	r18, 0x00	; 0
    5d68:	30 e0       	ldi	r19, 0x00	; 0
    5d6a:	4a e7       	ldi	r20, 0x7A	; 122
    5d6c:	55 e4       	ldi	r21, 0x45	; 69
    5d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d72:	dc 01       	movw	r26, r24
    5d74:	cb 01       	movw	r24, r22
    5d76:	f8 01       	movw	r30, r16
    5d78:	80 83       	st	Z, r24
    5d7a:	91 83       	std	Z+1, r25	; 0x01
    5d7c:	a2 83       	std	Z+2, r26	; 0x02
    5d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d80:	fe 01       	movw	r30, r28
    5d82:	ff 96       	adiw	r30, 0x3f	; 63
    5d84:	60 81       	ld	r22, Z
    5d86:	71 81       	ldd	r23, Z+1	; 0x01
    5d88:	82 81       	ldd	r24, Z+2	; 0x02
    5d8a:	93 81       	ldd	r25, Z+3	; 0x03
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	40 e8       	ldi	r20, 0x80	; 128
    5d92:	5f e3       	ldi	r21, 0x3F	; 63
    5d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d98:	88 23       	and	r24, r24
    5d9a:	2c f4       	brge	.+10     	; 0x5da6 <SevenSegment_FromAToH+0x540>
		__ticks = 1;
    5d9c:	81 e0       	ldi	r24, 0x01	; 1
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	9e af       	std	Y+62, r25	; 0x3e
    5da2:	8d af       	std	Y+61, r24	; 0x3d
    5da4:	46 c0       	rjmp	.+140    	; 0x5e32 <SevenSegment_FromAToH+0x5cc>
	else if (__tmp > 65535)
    5da6:	fe 01       	movw	r30, r28
    5da8:	ff 96       	adiw	r30, 0x3f	; 63
    5daa:	60 81       	ld	r22, Z
    5dac:	71 81       	ldd	r23, Z+1	; 0x01
    5dae:	82 81       	ldd	r24, Z+2	; 0x02
    5db0:	93 81       	ldd	r25, Z+3	; 0x03
    5db2:	20 e0       	ldi	r18, 0x00	; 0
    5db4:	3f ef       	ldi	r19, 0xFF	; 255
    5db6:	4f e7       	ldi	r20, 0x7F	; 127
    5db8:	57 e4       	ldi	r21, 0x47	; 71
    5dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5dbe:	18 16       	cp	r1, r24
    5dc0:	64 f5       	brge	.+88     	; 0x5e1a <SevenSegment_FromAToH+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	ed 5b       	subi	r30, 0xBD	; 189
    5dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc8:	60 81       	ld	r22, Z
    5dca:	71 81       	ldd	r23, Z+1	; 0x01
    5dcc:	82 81       	ldd	r24, Z+2	; 0x02
    5dce:	93 81       	ldd	r25, Z+3	; 0x03
    5dd0:	20 e0       	ldi	r18, 0x00	; 0
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	40 e2       	ldi	r20, 0x20	; 32
    5dd6:	51 e4       	ldi	r21, 0x41	; 65
    5dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ddc:	dc 01       	movw	r26, r24
    5dde:	cb 01       	movw	r24, r22
    5de0:	bc 01       	movw	r22, r24
    5de2:	cd 01       	movw	r24, r26
    5de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5de8:	dc 01       	movw	r26, r24
    5dea:	cb 01       	movw	r24, r22
    5dec:	9e af       	std	Y+62, r25	; 0x3e
    5dee:	8d af       	std	Y+61, r24	; 0x3d
    5df0:	0f c0       	rjmp	.+30     	; 0x5e10 <SevenSegment_FromAToH+0x5aa>
    5df2:	80 e9       	ldi	r24, 0x90	; 144
    5df4:	91 e0       	ldi	r25, 0x01	; 1
    5df6:	9c af       	std	Y+60, r25	; 0x3c
    5df8:	8b af       	std	Y+59, r24	; 0x3b
    5dfa:	8b ad       	ldd	r24, Y+59	; 0x3b
    5dfc:	9c ad       	ldd	r25, Y+60	; 0x3c
    5dfe:	01 97       	sbiw	r24, 0x01	; 1
    5e00:	f1 f7       	brne	.-4      	; 0x5dfe <SevenSegment_FromAToH+0x598>
    5e02:	9c af       	std	Y+60, r25	; 0x3c
    5e04:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e06:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e08:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e0a:	01 97       	sbiw	r24, 0x01	; 1
    5e0c:	9e af       	std	Y+62, r25	; 0x3e
    5e0e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e10:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e12:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e14:	00 97       	sbiw	r24, 0x00	; 0
    5e16:	69 f7       	brne	.-38     	; 0x5df2 <SevenSegment_FromAToH+0x58c>
    5e18:	16 c0       	rjmp	.+44     	; 0x5e46 <SevenSegment_FromAToH+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e1a:	fe 01       	movw	r30, r28
    5e1c:	ff 96       	adiw	r30, 0x3f	; 63
    5e1e:	60 81       	ld	r22, Z
    5e20:	71 81       	ldd	r23, Z+1	; 0x01
    5e22:	82 81       	ldd	r24, Z+2	; 0x02
    5e24:	93 81       	ldd	r25, Z+3	; 0x03
    5e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2a:	dc 01       	movw	r26, r24
    5e2c:	cb 01       	movw	r24, r22
    5e2e:	9e af       	std	Y+62, r25	; 0x3e
    5e30:	8d af       	std	Y+61, r24	; 0x3d
    5e32:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e34:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e36:	9a af       	std	Y+58, r25	; 0x3a
    5e38:	89 af       	std	Y+57, r24	; 0x39
    5e3a:	89 ad       	ldd	r24, Y+57	; 0x39
    5e3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e3e:	01 97       	sbiw	r24, 0x01	; 1
    5e40:	f1 f7       	brne	.-4      	; 0x5e3e <SevenSegment_FromAToH+0x5d8>
    5e42:	9a af       	std	Y+58, r25	; 0x3a
    5e44:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 1); // E
    5e46:	fe 01       	movw	r30, r28
    5e48:	ef 58       	subi	r30, 0x8F	; 143
    5e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4c:	80 81       	ld	r24, Z
    5e4e:	61 e0       	ldi	r22, 0x01	; 1
    5e50:	40 e0       	ldi	r20, 0x00	; 0
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	01 e0       	ldi	r16, 0x01	; 1
    5e56:	ee 24       	eor	r14, r14
    5e58:	e3 94       	inc	r14
    5e5a:	cc 24       	eor	r12, r12
    5e5c:	c3 94       	inc	r12
    5e5e:	aa 24       	eor	r10, r10
    5e60:	a3 94       	inc	r10
    5e62:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5e66:	80 e0       	ldi	r24, 0x00	; 0
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	a8 e4       	ldi	r26, 0x48	; 72
    5e6c:	b2 e4       	ldi	r27, 0x42	; 66
    5e6e:	8d ab       	std	Y+53, r24	; 0x35
    5e70:	9e ab       	std	Y+54, r25	; 0x36
    5e72:	af ab       	std	Y+55, r26	; 0x37
    5e74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e76:	6d a9       	ldd	r22, Y+53	; 0x35
    5e78:	7e a9       	ldd	r23, Y+54	; 0x36
    5e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    5e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    5e7e:	20 e0       	ldi	r18, 0x00	; 0
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	4a e7       	ldi	r20, 0x7A	; 122
    5e84:	55 e4       	ldi	r21, 0x45	; 69
    5e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	cb 01       	movw	r24, r22
    5e8e:	89 ab       	std	Y+49, r24	; 0x31
    5e90:	9a ab       	std	Y+50, r25	; 0x32
    5e92:	ab ab       	std	Y+51, r26	; 0x33
    5e94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e96:	69 a9       	ldd	r22, Y+49	; 0x31
    5e98:	7a a9       	ldd	r23, Y+50	; 0x32
    5e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    5e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    5e9e:	20 e0       	ldi	r18, 0x00	; 0
    5ea0:	30 e0       	ldi	r19, 0x00	; 0
    5ea2:	40 e8       	ldi	r20, 0x80	; 128
    5ea4:	5f e3       	ldi	r21, 0x3F	; 63
    5ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5eaa:	88 23       	and	r24, r24
    5eac:	2c f4       	brge	.+10     	; 0x5eb8 <SevenSegment_FromAToH+0x652>
		__ticks = 1;
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	98 ab       	std	Y+48, r25	; 0x30
    5eb4:	8f a7       	std	Y+47, r24	; 0x2f
    5eb6:	3f c0       	rjmp	.+126    	; 0x5f36 <SevenSegment_FromAToH+0x6d0>
	else if (__tmp > 65535)
    5eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    5eba:	7a a9       	ldd	r23, Y+50	; 0x32
    5ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    5ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	3f ef       	ldi	r19, 0xFF	; 255
    5ec4:	4f e7       	ldi	r20, 0x7F	; 127
    5ec6:	57 e4       	ldi	r21, 0x47	; 71
    5ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ecc:	18 16       	cp	r1, r24
    5ece:	4c f5       	brge	.+82     	; 0x5f22 <SevenSegment_FromAToH+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ed0:	6d a9       	ldd	r22, Y+53	; 0x35
    5ed2:	7e a9       	ldd	r23, Y+54	; 0x36
    5ed4:	8f a9       	ldd	r24, Y+55	; 0x37
    5ed6:	98 ad       	ldd	r25, Y+56	; 0x38
    5ed8:	20 e0       	ldi	r18, 0x00	; 0
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	40 e2       	ldi	r20, 0x20	; 32
    5ede:	51 e4       	ldi	r21, 0x41	; 65
    5ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	cb 01       	movw	r24, r22
    5ee8:	bc 01       	movw	r22, r24
    5eea:	cd 01       	movw	r24, r26
    5eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	98 ab       	std	Y+48, r25	; 0x30
    5ef6:	8f a7       	std	Y+47, r24	; 0x2f
    5ef8:	0f c0       	rjmp	.+30     	; 0x5f18 <SevenSegment_FromAToH+0x6b2>
    5efa:	80 e9       	ldi	r24, 0x90	; 144
    5efc:	91 e0       	ldi	r25, 0x01	; 1
    5efe:	9e a7       	std	Y+46, r25	; 0x2e
    5f00:	8d a7       	std	Y+45, r24	; 0x2d
    5f02:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f04:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f06:	01 97       	sbiw	r24, 0x01	; 1
    5f08:	f1 f7       	brne	.-4      	; 0x5f06 <SevenSegment_FromAToH+0x6a0>
    5f0a:	9e a7       	std	Y+46, r25	; 0x2e
    5f0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f10:	98 a9       	ldd	r25, Y+48	; 0x30
    5f12:	01 97       	sbiw	r24, 0x01	; 1
    5f14:	98 ab       	std	Y+48, r25	; 0x30
    5f16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    5f1c:	00 97       	sbiw	r24, 0x00	; 0
    5f1e:	69 f7       	brne	.-38     	; 0x5efa <SevenSegment_FromAToH+0x694>
    5f20:	14 c0       	rjmp	.+40     	; 0x5f4a <SevenSegment_FromAToH+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f22:	69 a9       	ldd	r22, Y+49	; 0x31
    5f24:	7a a9       	ldd	r23, Y+50	; 0x32
    5f26:	8b a9       	ldd	r24, Y+51	; 0x33
    5f28:	9c a9       	ldd	r25, Y+52	; 0x34
    5f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2e:	dc 01       	movw	r26, r24
    5f30:	cb 01       	movw	r24, r22
    5f32:	98 ab       	std	Y+48, r25	; 0x30
    5f34:	8f a7       	std	Y+47, r24	; 0x2f
    5f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f38:	98 a9       	ldd	r25, Y+48	; 0x30
    5f3a:	9c a7       	std	Y+44, r25	; 0x2c
    5f3c:	8b a7       	std	Y+43, r24	; 0x2b
    5f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f42:	01 97       	sbiw	r24, 0x01	; 1
    5f44:	f1 f7       	brne	.-4      	; 0x5f42 <SevenSegment_FromAToH+0x6dc>
    5f46:	9c a7       	std	Y+44, r25	; 0x2c
    5f48:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 0, 1, 1, 1); // F
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	ef 58       	subi	r30, 0x8F	; 143
    5f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f50:	80 81       	ld	r24, Z
    5f52:	61 e0       	ldi	r22, 0x01	; 1
    5f54:	40 e0       	ldi	r20, 0x00	; 0
    5f56:	20 e0       	ldi	r18, 0x00	; 0
    5f58:	00 e0       	ldi	r16, 0x00	; 0
    5f5a:	ee 24       	eor	r14, r14
    5f5c:	e3 94       	inc	r14
    5f5e:	cc 24       	eor	r12, r12
    5f60:	c3 94       	inc	r12
    5f62:	aa 24       	eor	r10, r10
    5f64:	a3 94       	inc	r10
    5f66:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    5f6a:	80 e0       	ldi	r24, 0x00	; 0
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	a8 e4       	ldi	r26, 0x48	; 72
    5f70:	b2 e4       	ldi	r27, 0x42	; 66
    5f72:	8f a3       	std	Y+39, r24	; 0x27
    5f74:	98 a7       	std	Y+40, r25	; 0x28
    5f76:	a9 a7       	std	Y+41, r26	; 0x29
    5f78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    5f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    5f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    5f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	4a e7       	ldi	r20, 0x7A	; 122
    5f88:	55 e4       	ldi	r21, 0x45	; 69
    5f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f8e:	dc 01       	movw	r26, r24
    5f90:	cb 01       	movw	r24, r22
    5f92:	8b a3       	std	Y+35, r24	; 0x23
    5f94:	9c a3       	std	Y+36, r25	; 0x24
    5f96:	ad a3       	std	Y+37, r26	; 0x25
    5f98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5f9a:	6b a1       	ldd	r22, Y+35	; 0x23
    5f9c:	7c a1       	ldd	r23, Y+36	; 0x24
    5f9e:	8d a1       	ldd	r24, Y+37	; 0x25
    5fa0:	9e a1       	ldd	r25, Y+38	; 0x26
    5fa2:	20 e0       	ldi	r18, 0x00	; 0
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	40 e8       	ldi	r20, 0x80	; 128
    5fa8:	5f e3       	ldi	r21, 0x3F	; 63
    5faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5fae:	88 23       	and	r24, r24
    5fb0:	2c f4       	brge	.+10     	; 0x5fbc <SevenSegment_FromAToH+0x756>
		__ticks = 1;
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	9a a3       	std	Y+34, r25	; 0x22
    5fb8:	89 a3       	std	Y+33, r24	; 0x21
    5fba:	3f c0       	rjmp	.+126    	; 0x603a <SevenSegment_FromAToH+0x7d4>
	else if (__tmp > 65535)
    5fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    5fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    5fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    5fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	3f ef       	ldi	r19, 0xFF	; 255
    5fc8:	4f e7       	ldi	r20, 0x7F	; 127
    5fca:	57 e4       	ldi	r21, 0x47	; 71
    5fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5fd0:	18 16       	cp	r1, r24
    5fd2:	4c f5       	brge	.+82     	; 0x6026 <SevenSegment_FromAToH+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fd4:	6f a1       	ldd	r22, Y+39	; 0x27
    5fd6:	78 a5       	ldd	r23, Y+40	; 0x28
    5fd8:	89 a5       	ldd	r24, Y+41	; 0x29
    5fda:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	40 e2       	ldi	r20, 0x20	; 32
    5fe2:	51 e4       	ldi	r21, 0x41	; 65
    5fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fe8:	dc 01       	movw	r26, r24
    5fea:	cb 01       	movw	r24, r22
    5fec:	bc 01       	movw	r22, r24
    5fee:	cd 01       	movw	r24, r26
    5ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ff4:	dc 01       	movw	r26, r24
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	9a a3       	std	Y+34, r25	; 0x22
    5ffa:	89 a3       	std	Y+33, r24	; 0x21
    5ffc:	0f c0       	rjmp	.+30     	; 0x601c <SevenSegment_FromAToH+0x7b6>
    5ffe:	80 e9       	ldi	r24, 0x90	; 144
    6000:	91 e0       	ldi	r25, 0x01	; 1
    6002:	98 a3       	std	Y+32, r25	; 0x20
    6004:	8f 8f       	std	Y+31, r24	; 0x1f
    6006:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6008:	98 a1       	ldd	r25, Y+32	; 0x20
    600a:	01 97       	sbiw	r24, 0x01	; 1
    600c:	f1 f7       	brne	.-4      	; 0x600a <SevenSegment_FromAToH+0x7a4>
    600e:	98 a3       	std	Y+32, r25	; 0x20
    6010:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6012:	89 a1       	ldd	r24, Y+33	; 0x21
    6014:	9a a1       	ldd	r25, Y+34	; 0x22
    6016:	01 97       	sbiw	r24, 0x01	; 1
    6018:	9a a3       	std	Y+34, r25	; 0x22
    601a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    601c:	89 a1       	ldd	r24, Y+33	; 0x21
    601e:	9a a1       	ldd	r25, Y+34	; 0x22
    6020:	00 97       	sbiw	r24, 0x00	; 0
    6022:	69 f7       	brne	.-38     	; 0x5ffe <SevenSegment_FromAToH+0x798>
    6024:	14 c0       	rjmp	.+40     	; 0x604e <SevenSegment_FromAToH+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6026:	6b a1       	ldd	r22, Y+35	; 0x23
    6028:	7c a1       	ldd	r23, Y+36	; 0x24
    602a:	8d a1       	ldd	r24, Y+37	; 0x25
    602c:	9e a1       	ldd	r25, Y+38	; 0x26
    602e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6032:	dc 01       	movw	r26, r24
    6034:	cb 01       	movw	r24, r22
    6036:	9a a3       	std	Y+34, r25	; 0x22
    6038:	89 a3       	std	Y+33, r24	; 0x21
    603a:	89 a1       	ldd	r24, Y+33	; 0x21
    603c:	9a a1       	ldd	r25, Y+34	; 0x22
    603e:	9e 8f       	std	Y+30, r25	; 0x1e
    6040:	8d 8f       	std	Y+29, r24	; 0x1d
    6042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6044:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6046:	01 97       	sbiw	r24, 0x01	; 1
    6048:	f1 f7       	brne	.-4      	; 0x6046 <SevenSegment_FromAToH+0x7e0>
    604a:	9e 8f       	std	Y+30, r25	; 0x1e
    604c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 0); // G
    604e:	fe 01       	movw	r30, r28
    6050:	ef 58       	subi	r30, 0x8F	; 143
    6052:	ff 4f       	sbci	r31, 0xFF	; 255
    6054:	80 81       	ld	r24, Z
    6056:	61 e0       	ldi	r22, 0x01	; 1
    6058:	40 e0       	ldi	r20, 0x00	; 0
    605a:	21 e0       	ldi	r18, 0x01	; 1
    605c:	01 e0       	ldi	r16, 0x01	; 1
    605e:	ee 24       	eor	r14, r14
    6060:	e3 94       	inc	r14
    6062:	cc 24       	eor	r12, r12
    6064:	c3 94       	inc	r12
    6066:	aa 24       	eor	r10, r10
    6068:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	a8 e4       	ldi	r26, 0x48	; 72
    6072:	b2 e4       	ldi	r27, 0x42	; 66
    6074:	89 8f       	std	Y+25, r24	; 0x19
    6076:	9a 8f       	std	Y+26, r25	; 0x1a
    6078:	ab 8f       	std	Y+27, r26	; 0x1b
    607a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    607c:	69 8d       	ldd	r22, Y+25	; 0x19
    607e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6084:	20 e0       	ldi	r18, 0x00	; 0
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	4a e7       	ldi	r20, 0x7A	; 122
    608a:	55 e4       	ldi	r21, 0x45	; 69
    608c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6090:	dc 01       	movw	r26, r24
    6092:	cb 01       	movw	r24, r22
    6094:	8d 8b       	std	Y+21, r24	; 0x15
    6096:	9e 8b       	std	Y+22, r25	; 0x16
    6098:	af 8b       	std	Y+23, r26	; 0x17
    609a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    609c:	6d 89       	ldd	r22, Y+21	; 0x15
    609e:	7e 89       	ldd	r23, Y+22	; 0x16
    60a0:	8f 89       	ldd	r24, Y+23	; 0x17
    60a2:	98 8d       	ldd	r25, Y+24	; 0x18
    60a4:	20 e0       	ldi	r18, 0x00	; 0
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	40 e8       	ldi	r20, 0x80	; 128
    60aa:	5f e3       	ldi	r21, 0x3F	; 63
    60ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    60b0:	88 23       	and	r24, r24
    60b2:	2c f4       	brge	.+10     	; 0x60be <SevenSegment_FromAToH+0x858>
		__ticks = 1;
    60b4:	81 e0       	ldi	r24, 0x01	; 1
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	9c 8b       	std	Y+20, r25	; 0x14
    60ba:	8b 8b       	std	Y+19, r24	; 0x13
    60bc:	3f c0       	rjmp	.+126    	; 0x613c <SevenSegment_FromAToH+0x8d6>
	else if (__tmp > 65535)
    60be:	6d 89       	ldd	r22, Y+21	; 0x15
    60c0:	7e 89       	ldd	r23, Y+22	; 0x16
    60c2:	8f 89       	ldd	r24, Y+23	; 0x17
    60c4:	98 8d       	ldd	r25, Y+24	; 0x18
    60c6:	20 e0       	ldi	r18, 0x00	; 0
    60c8:	3f ef       	ldi	r19, 0xFF	; 255
    60ca:	4f e7       	ldi	r20, 0x7F	; 127
    60cc:	57 e4       	ldi	r21, 0x47	; 71
    60ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    60d2:	18 16       	cp	r1, r24
    60d4:	4c f5       	brge	.+82     	; 0x6128 <SevenSegment_FromAToH+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d6:	69 8d       	ldd	r22, Y+25	; 0x19
    60d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	40 e2       	ldi	r20, 0x20	; 32
    60e4:	51 e4       	ldi	r21, 0x41	; 65
    60e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	bc 01       	movw	r22, r24
    60f0:	cd 01       	movw	r24, r26
    60f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f6:	dc 01       	movw	r26, r24
    60f8:	cb 01       	movw	r24, r22
    60fa:	9c 8b       	std	Y+20, r25	; 0x14
    60fc:	8b 8b       	std	Y+19, r24	; 0x13
    60fe:	0f c0       	rjmp	.+30     	; 0x611e <SevenSegment_FromAToH+0x8b8>
    6100:	80 e9       	ldi	r24, 0x90	; 144
    6102:	91 e0       	ldi	r25, 0x01	; 1
    6104:	9a 8b       	std	Y+18, r25	; 0x12
    6106:	89 8b       	std	Y+17, r24	; 0x11
    6108:	89 89       	ldd	r24, Y+17	; 0x11
    610a:	9a 89       	ldd	r25, Y+18	; 0x12
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f1 f7       	brne	.-4      	; 0x610c <SevenSegment_FromAToH+0x8a6>
    6110:	9a 8b       	std	Y+18, r25	; 0x12
    6112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6114:	8b 89       	ldd	r24, Y+19	; 0x13
    6116:	9c 89       	ldd	r25, Y+20	; 0x14
    6118:	01 97       	sbiw	r24, 0x01	; 1
    611a:	9c 8b       	std	Y+20, r25	; 0x14
    611c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    611e:	8b 89       	ldd	r24, Y+19	; 0x13
    6120:	9c 89       	ldd	r25, Y+20	; 0x14
    6122:	00 97       	sbiw	r24, 0x00	; 0
    6124:	69 f7       	brne	.-38     	; 0x6100 <SevenSegment_FromAToH+0x89a>
    6126:	14 c0       	rjmp	.+40     	; 0x6150 <SevenSegment_FromAToH+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6128:	6d 89       	ldd	r22, Y+21	; 0x15
    612a:	7e 89       	ldd	r23, Y+22	; 0x16
    612c:	8f 89       	ldd	r24, Y+23	; 0x17
    612e:	98 8d       	ldd	r25, Y+24	; 0x18
    6130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6134:	dc 01       	movw	r26, r24
    6136:	cb 01       	movw	r24, r22
    6138:	9c 8b       	std	Y+20, r25	; 0x14
    613a:	8b 8b       	std	Y+19, r24	; 0x13
    613c:	8b 89       	ldd	r24, Y+19	; 0x13
    613e:	9c 89       	ldd	r25, Y+20	; 0x14
    6140:	98 8b       	std	Y+16, r25	; 0x10
    6142:	8f 87       	std	Y+15, r24	; 0x0f
    6144:	8f 85       	ldd	r24, Y+15	; 0x0f
    6146:	98 89       	ldd	r25, Y+16	; 0x10
    6148:	01 97       	sbiw	r24, 0x01	; 1
    614a:	f1 f7       	brne	.-4      	; 0x6148 <SevenSegment_FromAToH+0x8e2>
    614c:	98 8b       	std	Y+16, r25	; 0x10
    614e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 1, 1, 1); // H
    6150:	fe 01       	movw	r30, r28
    6152:	ef 58       	subi	r30, 0x8F	; 143
    6154:	ff 4f       	sbci	r31, 0xFF	; 255
    6156:	80 81       	ld	r24, Z
    6158:	60 e0       	ldi	r22, 0x00	; 0
    615a:	41 e0       	ldi	r20, 0x01	; 1
    615c:	21 e0       	ldi	r18, 0x01	; 1
    615e:	00 e0       	ldi	r16, 0x00	; 0
    6160:	ee 24       	eor	r14, r14
    6162:	e3 94       	inc	r14
    6164:	cc 24       	eor	r12, r12
    6166:	c3 94       	inc	r12
    6168:	aa 24       	eor	r10, r10
    616a:	a3 94       	inc	r10
    616c:	0e 94 7f 23 	call	0x46fe	; 0x46fe <SevenSegment_Display>
    6170:	80 e0       	ldi	r24, 0x00	; 0
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	a8 e4       	ldi	r26, 0x48	; 72
    6176:	b2 e4       	ldi	r27, 0x42	; 66
    6178:	8b 87       	std	Y+11, r24	; 0x0b
    617a:	9c 87       	std	Y+12, r25	; 0x0c
    617c:	ad 87       	std	Y+13, r26	; 0x0d
    617e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6180:	6b 85       	ldd	r22, Y+11	; 0x0b
    6182:	7c 85       	ldd	r23, Y+12	; 0x0c
    6184:	8d 85       	ldd	r24, Y+13	; 0x0d
    6186:	9e 85       	ldd	r25, Y+14	; 0x0e
    6188:	20 e0       	ldi	r18, 0x00	; 0
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	4a e7       	ldi	r20, 0x7A	; 122
    618e:	55 e4       	ldi	r21, 0x45	; 69
    6190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6194:	dc 01       	movw	r26, r24
    6196:	cb 01       	movw	r24, r22
    6198:	8f 83       	std	Y+7, r24	; 0x07
    619a:	98 87       	std	Y+8, r25	; 0x08
    619c:	a9 87       	std	Y+9, r26	; 0x09
    619e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    61a0:	6f 81       	ldd	r22, Y+7	; 0x07
    61a2:	78 85       	ldd	r23, Y+8	; 0x08
    61a4:	89 85       	ldd	r24, Y+9	; 0x09
    61a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	40 e8       	ldi	r20, 0x80	; 128
    61ae:	5f e3       	ldi	r21, 0x3F	; 63
    61b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    61b4:	88 23       	and	r24, r24
    61b6:	2c f4       	brge	.+10     	; 0x61c2 <SevenSegment_FromAToH+0x95c>
		__ticks = 1;
    61b8:	81 e0       	ldi	r24, 0x01	; 1
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	9e 83       	std	Y+6, r25	; 0x06
    61be:	8d 83       	std	Y+5, r24	; 0x05
    61c0:	3f c0       	rjmp	.+126    	; 0x6240 <SevenSegment_FromAToH+0x9da>
	else if (__tmp > 65535)
    61c2:	6f 81       	ldd	r22, Y+7	; 0x07
    61c4:	78 85       	ldd	r23, Y+8	; 0x08
    61c6:	89 85       	ldd	r24, Y+9	; 0x09
    61c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ca:	20 e0       	ldi	r18, 0x00	; 0
    61cc:	3f ef       	ldi	r19, 0xFF	; 255
    61ce:	4f e7       	ldi	r20, 0x7F	; 127
    61d0:	57 e4       	ldi	r21, 0x47	; 71
    61d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61d6:	18 16       	cp	r1, r24
    61d8:	4c f5       	brge	.+82     	; 0x622c <SevenSegment_FromAToH+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61da:	6b 85       	ldd	r22, Y+11	; 0x0b
    61dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    61de:	8d 85       	ldd	r24, Y+13	; 0x0d
    61e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    61e2:	20 e0       	ldi	r18, 0x00	; 0
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	40 e2       	ldi	r20, 0x20	; 32
    61e8:	51 e4       	ldi	r21, 0x41	; 65
    61ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ee:	dc 01       	movw	r26, r24
    61f0:	cb 01       	movw	r24, r22
    61f2:	bc 01       	movw	r22, r24
    61f4:	cd 01       	movw	r24, r26
    61f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61fa:	dc 01       	movw	r26, r24
    61fc:	cb 01       	movw	r24, r22
    61fe:	9e 83       	std	Y+6, r25	; 0x06
    6200:	8d 83       	std	Y+5, r24	; 0x05
    6202:	0f c0       	rjmp	.+30     	; 0x6222 <SevenSegment_FromAToH+0x9bc>
    6204:	80 e9       	ldi	r24, 0x90	; 144
    6206:	91 e0       	ldi	r25, 0x01	; 1
    6208:	9c 83       	std	Y+4, r25	; 0x04
    620a:	8b 83       	std	Y+3, r24	; 0x03
    620c:	8b 81       	ldd	r24, Y+3	; 0x03
    620e:	9c 81       	ldd	r25, Y+4	; 0x04
    6210:	01 97       	sbiw	r24, 0x01	; 1
    6212:	f1 f7       	brne	.-4      	; 0x6210 <SevenSegment_FromAToH+0x9aa>
    6214:	9c 83       	std	Y+4, r25	; 0x04
    6216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6218:	8d 81       	ldd	r24, Y+5	; 0x05
    621a:	9e 81       	ldd	r25, Y+6	; 0x06
    621c:	01 97       	sbiw	r24, 0x01	; 1
    621e:	9e 83       	std	Y+6, r25	; 0x06
    6220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6222:	8d 81       	ldd	r24, Y+5	; 0x05
    6224:	9e 81       	ldd	r25, Y+6	; 0x06
    6226:	00 97       	sbiw	r24, 0x00	; 0
    6228:	69 f7       	brne	.-38     	; 0x6204 <SevenSegment_FromAToH+0x99e>
    622a:	31 cb       	rjmp	.-2462   	; 0x588e <SevenSegment_FromAToH+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    622c:	6f 81       	ldd	r22, Y+7	; 0x07
    622e:	78 85       	ldd	r23, Y+8	; 0x08
    6230:	89 85       	ldd	r24, Y+9	; 0x09
    6232:	9a 85       	ldd	r25, Y+10	; 0x0a
    6234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6238:	dc 01       	movw	r26, r24
    623a:	cb 01       	movw	r24, r22
    623c:	9e 83       	std	Y+6, r25	; 0x06
    623e:	8d 83       	std	Y+5, r24	; 0x05
    6240:	8d 81       	ldd	r24, Y+5	; 0x05
    6242:	9e 81       	ldd	r25, Y+6	; 0x06
    6244:	9a 83       	std	Y+2, r25	; 0x02
    6246:	89 83       	std	Y+1, r24	; 0x01
    6248:	89 81       	ldd	r24, Y+1	; 0x01
    624a:	9a 81       	ldd	r25, Y+2	; 0x02
    624c:	01 97       	sbiw	r24, 0x01	; 1
    624e:	f1 f7       	brne	.-4      	; 0x624c <SevenSegment_FromAToH+0x9e6>
    6250:	9a 83       	std	Y+2, r25	; 0x02
    6252:	89 83       	std	Y+1, r24	; 0x01
    6254:	1c cb       	rjmp	.-2504   	; 0x588e <SevenSegment_FromAToH+0x28>

00006256 <main>:
#include "APP_Includes.h"


int main(void){
    6256:	df 93       	push	r29
    6258:	cf 93       	push	r28
    625a:	00 d0       	rcall	.+0      	; 0x625c <main+0x6>
    625c:	00 d0       	rcall	.+0      	; 0x625e <main+0x8>
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
	u16 digitalValue, tempValue;
	ADC_void_Init();
    6262:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <ADC_void_Init>
	DC_Motor_Init(1, 1);
    6266:	81 e0       	ldi	r24, 0x01	; 1
    6268:	61 e0       	ldi	r22, 0x01	; 1
    626a:	0e 94 91 22 	call	0x4522	; 0x4522 <DC_Motor_Init>
	LCD_init();
    626e:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_init>
	while(1){
		ADC_u8_Get_Digital_ValueSynchNonBlocking(0, &digitalValue);
    6272:	9e 01       	movw	r18, r28
    6274:	2d 5f       	subi	r18, 0xFD	; 253
    6276:	3f 4f       	sbci	r19, 0xFF	; 255
    6278:	80 e0       	ldi	r24, 0x00	; 0
    627a:	b9 01       	movw	r22, r18
    627c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <ADC_u8_Get_Digital_ValueSynchNonBlocking>
		tempValue = digitalValue * 0.48828125;
    6280:	8b 81       	ldd	r24, Y+3	; 0x03
    6282:	9c 81       	ldd	r25, Y+4	; 0x04
    6284:	cc 01       	movw	r24, r24
    6286:	a0 e0       	ldi	r26, 0x00	; 0
    6288:	b0 e0       	ldi	r27, 0x00	; 0
    628a:	bc 01       	movw	r22, r24
    628c:	cd 01       	movw	r24, r26
    628e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    6292:	dc 01       	movw	r26, r24
    6294:	cb 01       	movw	r24, r22
    6296:	bc 01       	movw	r22, r24
    6298:	cd 01       	movw	r24, r26
    629a:	20 e0       	ldi	r18, 0x00	; 0
    629c:	30 e0       	ldi	r19, 0x00	; 0
    629e:	4a ef       	ldi	r20, 0xFA	; 250
    62a0:	5e e3       	ldi	r21, 0x3E	; 62
    62a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62a6:	dc 01       	movw	r26, r24
    62a8:	cb 01       	movw	r24, r22
    62aa:	bc 01       	movw	r22, r24
    62ac:	cd 01       	movw	r24, r26
    62ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	9a 83       	std	Y+2, r25	; 0x02
    62b8:	89 83       	std	Y+1, r24	; 0x01
		LCD_GoToXY(0, 0);
    62ba:	80 e0       	ldi	r24, 0x00	; 0
    62bc:	60 e0       	ldi	r22, 0x00	; 0
    62be:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <LCD_GoToXY>
		LCD_DisplayInteger(tempValue);
    62c2:	89 81       	ldd	r24, Y+1	; 0x01
    62c4:	9a 81       	ldd	r25, Y+2	; 0x02
    62c6:	cc 01       	movw	r24, r24
    62c8:	a0 e0       	ldi	r26, 0x00	; 0
    62ca:	b0 e0       	ldi	r27, 0x00	; 0
    62cc:	bc 01       	movw	r22, r24
    62ce:	cd 01       	movw	r24, r26
    62d0:	0e 94 af 1c 	call	0x395e	; 0x395e <LCD_DisplayInteger>
		LCD_displayCharacter(0xdf);
    62d4:	8f ed       	ldi	r24, 0xDF	; 223
    62d6:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
		LCD_displayCharacter('C');
    62da:	83 e4       	ldi	r24, 0x43	; 67
    62dc:	0e 94 b3 1a 	call	0x3566	; 0x3566 <LCD_displayCharacter>
		
			if(tempValue < 20){
    62e0:	89 81       	ldd	r24, Y+1	; 0x01
    62e2:	9a 81       	ldd	r25, Y+2	; 0x02
    62e4:	84 31       	cpi	r24, 0x14	; 20
    62e6:	91 05       	cpc	r25, r1
    62e8:	58 f4       	brcc	.+22     	; 0x6300 <main+0xaa>
				DIO_u8SetPinDirection(3, 0, 1);
    62ea:	83 e0       	ldi	r24, 0x03	; 3
    62ec:	60 e0       	ldi	r22, 0x00	; 0
    62ee:	41 e0       	ldi	r20, 0x01	; 1
    62f0:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(3, 0, 1);
    62f4:	83 e0       	ldi	r24, 0x03	; 3
    62f6:	60 e0       	ldi	r22, 0x00	; 0
    62f8:	41 e0       	ldi	r20, 0x01	; 1
    62fa:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    62fe:	b9 cf       	rjmp	.-142    	; 0x6272 <main+0x1c>
			}
			
			else if(tempValue > 30){
    6300:	89 81       	ldd	r24, Y+1	; 0x01
    6302:	9a 81       	ldd	r25, Y+2	; 0x02
    6304:	8f 31       	cpi	r24, 0x1F	; 31
    6306:	91 05       	cpc	r25, r1
    6308:	58 f0       	brcs	.+22     	; 0x6320 <main+0xca>
				DIO_u8SetPinDirection(3, 1, 1);
    630a:	83 e0       	ldi	r24, 0x03	; 3
    630c:	61 e0       	ldi	r22, 0x01	; 1
    630e:	41 e0       	ldi	r20, 0x01	; 1
    6310:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(3, 1, 1);
    6314:	83 e0       	ldi	r24, 0x03	; 3
    6316:	61 e0       	ldi	r22, 0x01	; 1
    6318:	41 e0       	ldi	r20, 0x01	; 1
    631a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <DIO_u8SetPinValue>
    631e:	a9 cf       	rjmp	.-174    	; 0x6272 <main+0x1c>
			}
			
			else{
				DIO_u8SetPinDirection(3, 0, 0);
    6320:	83 e0       	ldi	r24, 0x03	; 3
    6322:	60 e0       	ldi	r22, 0x00	; 0
    6324:	40 e0       	ldi	r20, 0x00	; 0
    6326:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
				DIO_u8SetPinDirection(3, 1, 0);
    632a:	83 e0       	ldi	r24, 0x03	; 3
    632c:	61 e0       	ldi	r22, 0x01	; 1
    632e:	40 e0       	ldi	r20, 0x00	; 0
    6330:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPinDirection>
    6334:	9e cf       	rjmp	.-196    	; 0x6272 <main+0x1c>

00006336 <__divmodhi4>:
    6336:	97 fb       	bst	r25, 7
    6338:	09 2e       	mov	r0, r25
    633a:	07 26       	eor	r0, r23
    633c:	0a d0       	rcall	.+20     	; 0x6352 <__divmodhi4_neg1>
    633e:	77 fd       	sbrc	r23, 7
    6340:	04 d0       	rcall	.+8      	; 0x634a <__divmodhi4_neg2>
    6342:	2e d0       	rcall	.+92     	; 0x63a0 <__udivmodhi4>
    6344:	06 d0       	rcall	.+12     	; 0x6352 <__divmodhi4_neg1>
    6346:	00 20       	and	r0, r0
    6348:	1a f4       	brpl	.+6      	; 0x6350 <__divmodhi4_exit>

0000634a <__divmodhi4_neg2>:
    634a:	70 95       	com	r23
    634c:	61 95       	neg	r22
    634e:	7f 4f       	sbci	r23, 0xFF	; 255

00006350 <__divmodhi4_exit>:
    6350:	08 95       	ret

00006352 <__divmodhi4_neg1>:
    6352:	f6 f7       	brtc	.-4      	; 0x6350 <__divmodhi4_exit>
    6354:	90 95       	com	r25
    6356:	81 95       	neg	r24
    6358:	9f 4f       	sbci	r25, 0xFF	; 255
    635a:	08 95       	ret

0000635c <__udivmodsi4>:
    635c:	a1 e2       	ldi	r26, 0x21	; 33
    635e:	1a 2e       	mov	r1, r26
    6360:	aa 1b       	sub	r26, r26
    6362:	bb 1b       	sub	r27, r27
    6364:	fd 01       	movw	r30, r26
    6366:	0d c0       	rjmp	.+26     	; 0x6382 <__udivmodsi4_ep>

00006368 <__udivmodsi4_loop>:
    6368:	aa 1f       	adc	r26, r26
    636a:	bb 1f       	adc	r27, r27
    636c:	ee 1f       	adc	r30, r30
    636e:	ff 1f       	adc	r31, r31
    6370:	a2 17       	cp	r26, r18
    6372:	b3 07       	cpc	r27, r19
    6374:	e4 07       	cpc	r30, r20
    6376:	f5 07       	cpc	r31, r21
    6378:	20 f0       	brcs	.+8      	; 0x6382 <__udivmodsi4_ep>
    637a:	a2 1b       	sub	r26, r18
    637c:	b3 0b       	sbc	r27, r19
    637e:	e4 0b       	sbc	r30, r20
    6380:	f5 0b       	sbc	r31, r21

00006382 <__udivmodsi4_ep>:
    6382:	66 1f       	adc	r22, r22
    6384:	77 1f       	adc	r23, r23
    6386:	88 1f       	adc	r24, r24
    6388:	99 1f       	adc	r25, r25
    638a:	1a 94       	dec	r1
    638c:	69 f7       	brne	.-38     	; 0x6368 <__udivmodsi4_loop>
    638e:	60 95       	com	r22
    6390:	70 95       	com	r23
    6392:	80 95       	com	r24
    6394:	90 95       	com	r25
    6396:	9b 01       	movw	r18, r22
    6398:	ac 01       	movw	r20, r24
    639a:	bd 01       	movw	r22, r26
    639c:	cf 01       	movw	r24, r30
    639e:	08 95       	ret

000063a0 <__udivmodhi4>:
    63a0:	aa 1b       	sub	r26, r26
    63a2:	bb 1b       	sub	r27, r27
    63a4:	51 e1       	ldi	r21, 0x11	; 17
    63a6:	07 c0       	rjmp	.+14     	; 0x63b6 <__udivmodhi4_ep>

000063a8 <__udivmodhi4_loop>:
    63a8:	aa 1f       	adc	r26, r26
    63aa:	bb 1f       	adc	r27, r27
    63ac:	a6 17       	cp	r26, r22
    63ae:	b7 07       	cpc	r27, r23
    63b0:	10 f0       	brcs	.+4      	; 0x63b6 <__udivmodhi4_ep>
    63b2:	a6 1b       	sub	r26, r22
    63b4:	b7 0b       	sbc	r27, r23

000063b6 <__udivmodhi4_ep>:
    63b6:	88 1f       	adc	r24, r24
    63b8:	99 1f       	adc	r25, r25
    63ba:	5a 95       	dec	r21
    63bc:	a9 f7       	brne	.-22     	; 0x63a8 <__udivmodhi4_loop>
    63be:	80 95       	com	r24
    63c0:	90 95       	com	r25
    63c2:	bc 01       	movw	r22, r24
    63c4:	cd 01       	movw	r24, r26
    63c6:	08 95       	ret

000063c8 <__prologue_saves__>:
    63c8:	2f 92       	push	r2
    63ca:	3f 92       	push	r3
    63cc:	4f 92       	push	r4
    63ce:	5f 92       	push	r5
    63d0:	6f 92       	push	r6
    63d2:	7f 92       	push	r7
    63d4:	8f 92       	push	r8
    63d6:	9f 92       	push	r9
    63d8:	af 92       	push	r10
    63da:	bf 92       	push	r11
    63dc:	cf 92       	push	r12
    63de:	df 92       	push	r13
    63e0:	ef 92       	push	r14
    63e2:	ff 92       	push	r15
    63e4:	0f 93       	push	r16
    63e6:	1f 93       	push	r17
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
    63f0:	ca 1b       	sub	r28, r26
    63f2:	db 0b       	sbc	r29, r27
    63f4:	0f b6       	in	r0, 0x3f	; 63
    63f6:	f8 94       	cli
    63f8:	de bf       	out	0x3e, r29	; 62
    63fa:	0f be       	out	0x3f, r0	; 63
    63fc:	cd bf       	out	0x3d, r28	; 61
    63fe:	09 94       	ijmp

00006400 <__epilogue_restores__>:
    6400:	2a 88       	ldd	r2, Y+18	; 0x12
    6402:	39 88       	ldd	r3, Y+17	; 0x11
    6404:	48 88       	ldd	r4, Y+16	; 0x10
    6406:	5f 84       	ldd	r5, Y+15	; 0x0f
    6408:	6e 84       	ldd	r6, Y+14	; 0x0e
    640a:	7d 84       	ldd	r7, Y+13	; 0x0d
    640c:	8c 84       	ldd	r8, Y+12	; 0x0c
    640e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6410:	aa 84       	ldd	r10, Y+10	; 0x0a
    6412:	b9 84       	ldd	r11, Y+9	; 0x09
    6414:	c8 84       	ldd	r12, Y+8	; 0x08
    6416:	df 80       	ldd	r13, Y+7	; 0x07
    6418:	ee 80       	ldd	r14, Y+6	; 0x06
    641a:	fd 80       	ldd	r15, Y+5	; 0x05
    641c:	0c 81       	ldd	r16, Y+4	; 0x04
    641e:	1b 81       	ldd	r17, Y+3	; 0x03
    6420:	aa 81       	ldd	r26, Y+2	; 0x02
    6422:	b9 81       	ldd	r27, Y+1	; 0x01
    6424:	ce 0f       	add	r28, r30
    6426:	d1 1d       	adc	r29, r1
    6428:	0f b6       	in	r0, 0x3f	; 63
    642a:	f8 94       	cli
    642c:	de bf       	out	0x3e, r29	; 62
    642e:	0f be       	out	0x3f, r0	; 63
    6430:	cd bf       	out	0x3d, r28	; 61
    6432:	ed 01       	movw	r28, r26
    6434:	08 95       	ret

00006436 <_exit>:
    6436:	f8 94       	cli

00006438 <__stop_program>:
    6438:	ff cf       	rjmp	.-2      	; 0x6438 <__stop_program>
